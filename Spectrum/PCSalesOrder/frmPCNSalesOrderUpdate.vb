Imports System.Text
Imports System.IO
Imports SpectrumBL
Imports System.Resources
Imports System.Globalization
Imports System.Data
Imports System.Data.SqlClient
Imports C1.Win.C1FlexGrid
Imports Microsoft.Reporting.WinForms
Imports Spire.Pdf
Imports SpectrumPrint
Imports C1.Win.C1BarCode
Imports SpectrumCommon
Imports System.ComponentModel
Imports System.Drawing.Printing

Public Class frmPCNSalesOrderUpdate
    Public Enum PrintSOTransactionSet
        Status
        Payment
        DeliveryNote
        GiftVoucherDocumentPrint
        SOReturnStatus
    End Enum
    Dim objSoPc As New clsSalesOrderPC
    Dim objCustm As New clsCLPCustomer()
    Dim clsVoucher As New SpectrumPrint.clsPrintVoucher

    Dim dtSalesOrderTaxDetails As DataTable
    Protected controlList As New ArrayList
    Private ArticleScanWithBatchBarcode As Boolean
    Dim IsFormClosing As Boolean = False
    Dim IsStrGenerateApplicable As Boolean = False
    Dim IsSTRGenerate As Boolean = False
    Dim IsSOSaved As Boolean = False
    Dim IsNewComboAdd As Boolean = False
    Dim IsComboDoubleClicked As Boolean = False 'vipin ##
    Dim IsPromotionApplyFromFrontEnd As Boolean = False
    Public Shared _QtyChange As Boolean = False   '##
    Public Shared Property QtyChange() As Boolean
        Get
            Return _QtyChange
        End Get
        Set(value As Boolean)
            _QtyChange = value
        End Set
    End Property
    Public Property PrintSOTransaction() As PrintSOTransactionSet
        Get
            Return _PrintTransaction
        End Get
        Set(ByVal value As PrintSOTransactionSet)
            _PrintTransaction = value
        End Set
    End Property
    Public Shared _OrderUpdatePaymentTermId As String
    Public Shared Property OrderUpdatePaymentTermId() As String
        Get
            Return _OrderUpdatePaymentTermId
        End Get
        Set(value As String)
            _OrderUpdatePaymentTermId = value
        End Set
    End Property
    Public Shared _lblArticleCombo1 As New DataTable
    Public Shared Property lblArticleCombo1() As DataTable
        Get
            Return _lblArticleCombo1
        End Get
        Set(value As DataTable)
            _lblArticleCombo1 = value
        End Set
    End Property
    Private _IsCopied As Boolean = False '' $$ added on 18/08/17
    Public Property IsCopied() As Boolean
        Get
            Return _IsCopied
        End Get
        Set(ByVal value As Boolean)
            _IsCopied = value
        End Set
    End Property
    'added by khusrao adil
    'merged on 6-11-2017 for pc sprint 4
    Private _EditCallFromOrderPackagingScreen As Boolean
    Public Property EditCallFromOrderPackagingScreen() As Boolean
        Get
            Return _EditCallFromOrderPackagingScreen
        End Get
        Set(ByVal value As Boolean)
            _EditCallFromOrderPackagingScreen = value
        End Set
    End Property
    Private _SalesORderNumberFromOrderPackagingScreen As String
    Public Property SalesORderNumberFromOrderPackagingScreen() As String
        Get
            Return _SalesORderNumberFromOrderPackagingScreen
        End Get
        Set(ByVal value As String)
            _SalesORderNumberFromOrderPackagingScreen = value
        End Set
    End Property
#Region "Declare Varables"
    Dim dtSTRFactoryRemark As New DataTable
    Dim BarCodestring As String
    Private _PrintTransaction As PrintSOTransactionSet
    Dim Batchbarcode As List(Of SpectrumCommon.BtachbarcodeInfo)
    Dim ReturnBatchbarcode As List(Of SpectrumCommon.BtachbarcodeInfo)
    Dim _iArticleQtyBeforeChange As Double = 0
    Dim CVoucherNo As String
    Dim CVVoucherDay As Int32 = clsAdmin.CreditValidDays
    Dim IssuingCV As Boolean = False
    Dim vSiteCode As String = clsAdmin.SiteCode
    Dim vfinancialYear As String = clsAdmin.Financialyear
    Dim vTerminalID As String = clsAdmin.TerminalID
    Dim vCurrencyDescription As String = clsAdmin.CurrencyDescription
    Dim vCurrencyCode As String = clsAdmin.CurrencyCode
    Dim vUserName As String = clsAdmin.UserName
    Dim vDateFormat As String = clsAdmin.SqlDBDateFormat
    Dim vCurrentDate As Date
    Dim consDeliveryDate As Date
    Dim DtDeletedData As DataTable
    Dim vPrinterSelection As Boolean = False
    Dim vPrintPaperType As String = String.Empty
    Dim vPrintLayoutselection As Boolean = False
    Dim vHeaderNote As Boolean = False
    Dim vFooterNote As Boolean = False
    Dim vResetTransNumbers As Boolean = False
    Dim CLPCardType, CLPCustomerId As String
    Private IsTenderCredit As Boolean = False
    Private IsTenderCash As Boolean = False
    Private IsTenderCheque As Boolean = False
    Private IsTenderCreditCard As Boolean = False
    Dim IsSelectedPromotion As Boolean = False
    Dim IsDefaultPromotion As Boolean = False
    Dim vCurrentSODateTime As DateTime
    Dim vIsPrintingTaxInfoAllowed As Boolean = False
    Dim vIsPrintPreviewAllowed As Boolean = False
    Dim vIsPromotionalMessageAllowed As Boolean = False
    Dim vIsPrintOfficialAddressAllowed As Boolean = False
    Dim vIsReturnWithoutOldSOAllowed As Boolean = False
    Dim vIsNegativeInventoryAllowed As Boolean = False
    Dim IsResetRequired As Boolean = True
    Dim isLeaved As Boolean = False
    Dim drPackgVariation As DataRow
    Dim drDeliveryVariation As DataRow
    Dim tabSales, tabPayment, tabReturn As TabPage
    Dim isPromotionApplied As Boolean = False
    Dim objClpCustm As New clsCLPCustomer
    Dim objComn As New clsCommon
    Dim objCM As New clsCashMemo
    Dim objItemSch As New clsIteamSearch
    Dim DtSoBulkRemarks As New DataTable
    Dim dtArticleTaxes As New DataTable
    Dim dtSTR As New DataTable
    Dim dsScanReturn As New DataSet
    Dim dsScanTemp As New DataSet
    Dim dsScantempPackVar As New DataSet
    Dim dsScantempDelivery As New DataSet
    Dim dsScanProm As New DataSet
    Dim dsInvoice As New DataSet
    Dim dsMainCLP As New DataSet
    Dim dvEditDeleteItems As DataView
    Dim dvDeleteTaxOnItem As DataView
    Dim dvEditTaxVariation As DataView
    Dim dvEditDeletePackagingItems As DataView
    Dim dvEditDeletePackagingDeliveryItems As DataView
    Dim statusforComboHdr As DataView
    Dim statusforComboDtl As DataView
    Dim dtOtherCharges As New DataTable
    Dim dtDiscUsed As New DataTable
    Dim dtWriteOffAmt As New DataTable
    Dim dtItemSch As New DataTable
    Dim dtBaseStr As New DataTable
    Dim dtPickUpDisc As New DataTable
    Dim dtPickUpDiscGrid As New DataTable
    Dim dtPickUpTax As New DataTable '$$ added by KETAN SO GST Changes 
    Dim dtPickUpDiscBillLineWise As New DataTable
    Dim dtPickUpTaxAmtBillLineWise As New DataTable
    Dim DTComboTaxPer As New DataTable '$$ added by KETAN SO GST Changes 
    Dim dtPickUpTaxAmt As New DataTable
    Dim dtFactoryTbl As DataSet
    Dim dtPrintingDetails As New DataTable
    Dim dtCustmInfo As New DataTable
    Dim dtStrResult As New DataSet
    Dim dtDocTaxes As New DataTable
    Dim drAddItemExists() As DataRow
    Dim dvRemarks As DataView
    Dim drItemSch As DataRow
    Dim drProm() As DataRow
    Dim drTax As DataRow
    Dim dvCurrentQty As DataView
    Dim drHomeAdds As DataRow
    Dim drDelvAdds As DataRow
    Dim strSOStatus As String = ""
    Dim vDocTypeCreation As String
    Dim vDocTypeReturn As String
    Dim vDocType As String = ""
    Dim vCardType As String = ""
    Dim vSTRList As String = ""
    Dim vSOStatus As String = ""
    Dim vClpProgramId As String = clsAdmin.CLPProgram
    Dim CLPNo_ProgId_Point As String = ""
    Dim IsStrTabEnabled As Boolean = False
    Dim IsPaymentTabEnabled As Boolean = False
    Dim vSalesNo As String = ""
    Dim vSalesOrderCreationDate As DateTime = DateTime.Now
    Dim vSalesOrderExpectedDeliveryDate As DateTime = DateTime.Now
    Dim vIsDelvery As Boolean = False
    Dim vIsMultiDelvery As Boolean = False
    Dim vIsMultiPickup As Boolean = False
    Const DeliveryBlinkFrequency As Int32 = 250
    Dim vCustomerNo As String
    Dim vArticleCode As String = ""
    Dim vCAddress As String = ""
    Dim vUOM As String = "EACH"
    Dim vEANList As String = ""
    Dim vSalesPerson As String = ""
    Dim vSalesInvcNo As String = ""
    Dim vFilterValue As String = "('Inserted','Updated')"
    Dim IsUpdateSuccess As Boolean = True
    Dim vAddressType As String
    Dim GridWidth As Integer = 0
    Dim GridHeight As Integer = 0
    Dim vRowIndex As Integer = 1
    Dim vtaxIndex As Integer = 1
    Dim vPackagingIndex As Integer = 1
    Dim vDeliveryIndex As Integer = 1
    Dim isCustSelected As Boolean = False
    Dim isDocRequired As Boolean = False
    Dim vAmendedNo As Integer = 0
    Dim strNumbers As New List(Of String)()
    Dim strTimesNumbers As New List(Of String)()
    Dim dvDeleteTaxOnItemLevelTax As DataView
    Dim TaxValue As Double = 0
    Dim vGrossAmount As Double = 0.0
    Dim vDiscAmount As Double = 0.0
    Dim vReceivedAmt As Double = 0.0
    Dim vCurrMinAdvanceAmt As Double = 0.0
    Dim vOtherChargesOld As Double = 0.0
    Dim vOtherChargesNew As Double = 0.0
    Dim vTotalOtherCharges As Double = 0.0
    Dim StockQty As Double = 0
    Dim TotalPoints As Double = 0.0
    Dim MaxDiscNo As Integer = 1
    Dim MaxTaxNo As Integer = 1
    Dim vAdvanceAmount As Double = 0.0
    Dim vBalanceAmount As Double = 0.0
    Dim TotalSalesQty As Double = 0.0
    Dim NetArticleRate As Double = 0.0
    Dim isEditLoad As Boolean = False
    Dim IsAllowedSalesReturn As Boolean = False
    Dim IsQuantityChange As Boolean = False
    Dim IsEditItem As Boolean = False
    Dim IsBtnSave As Boolean = True
    Dim IsNewArticle As Boolean = False
    Dim IsMRPOpen As Boolean = False
    Dim IsNewRow As Boolean = False
    Dim IsApplyPromotion As Boolean = False
    Dim IsNextInvoiceNo As Boolean = False
    Dim TempOtherChargesTable As DataTable
    Dim dtPackagingPrintBox As New DataTable
    Dim IsDiscountApplicable As Boolean = True
    ''--- temporary variable 
    Dim lblOrderQty As New Label
    Dim lblPickupQty As New Label
    'Dim lblGrossAmt As New Label
    'Dim lblDiscAmt As New Label
    'Dim lblOtherCharges As New Label

    'Dim lblNetAmount As New Label
    Dim lblReceivedAmt As New Label
    Dim ItemScan As New Label
    Dim lbltotalitem As New Label
    Dim lbldeliveredqty As New Label
    Dim lblgrossamt1 As New Label
    'Dim lbladvancepaid As New Label
    Dim lblminadvancepaid As New Label
    'Dim lblbalanceamt As New Label

    Dim NCuurentQty As Double
    Dim SalesPersonName As String = ""

    Dim BtnSOSave As New Button
    Dim BtnSOPrint As New Button
    'Dim BtnSOApplyPromotion As New Button
    Dim BtnSOAcceptPayment As New Button
    Dim BtnSOOtherCharges As New Button

    Dim BtnSOReturn As New Button
    Dim BtnSOCancel As New Button
    Dim LbReturnReason As New Button
    Dim BtnSOStockCheck As New Button
    Dim BtnSOCalculater As New Button
    Dim BtnSearchItem As New Button

    '' ----- end of temporory variable
    Private DeliverySiteCode As String
    Private _dDueDate As Date
    Private _strRemarks As String
    Private boolIsReturn As Boolean = False
    Private IsCSTApplicable As Boolean = False
    Dim dvEditDeleteSTRItems As DataView
    Dim DtSoBulkComboHdr As New DataTable
    Dim DtSoBulkComboDtl As New DataTable
    Dim dtPackagingBox As New DataTable
    Dim dtOrderAddresses As New DataTable
    Dim dtTempOrderAddresses As New DataTable
    Dim dtSOReturn As New DataTable
    Dim tooltip As New ToolTip
    Dim vSrno As Integer = 0
    Dim dtPackagingcopiedfrom As New DataTable

    Private deliveryTimer As New Timer()
    Dim DtSOStr As New DataTable
    Dim _dsMain As New DataSet
    Public Property dsMain() As DataSet
        Get
            Return _dsMain
        End Get
        Set(ByVal value As DataSet)
            _dsMain = value
        End Set
    End Property
    Private _customerNo As String
    Public Property CustomerNo() As String
        Get
            Return _customerNo
        End Get
        Set(ByVal value As String)
            _customerNo = value
        End Set
    End Property
    Dim _strIndex As Integer
    Public Property StrIndex() As Integer
        Get
            Return _strIndex
        End Get
        Set(ByVal value As Integer)
            _strIndex = value
        End Set
    End Property
    Dim _dsScan As New DataSet
    Public Property dsScan() As DataSet
        Get
            Return _dsScan
        End Get
        Set(ByVal value As DataSet)
            _dsScan = value
        End Set
    End Property
    Dim _dsPackagingVar As New DataSet
    Dim _pickupHistory As New DataSet
    Public Property dsPackagingVar() As DataSet
        Get
            Return _dsPackagingVar
        End Get
        Set(ByVal value As DataSet)
            _dsPackagingVar = value
        End Set
    End Property
    Dim _dsPackagingDelivery As New DataSet
    Public Property dsPackagingDelivery() As DataSet
        Get
            Return _dsPackagingDelivery
        End Get
        Set(ByVal value As DataSet)
            _dsPackagingDelivery = value
        End Set
    End Property
    Dim _dsPayment As New DataSet
    Public Property dsPayment() As DataSet
        Get
            Return _dsPayment
        End Get
        Set(ByVal value As DataSet)
            _dsPayment = value
        End Set
    End Property

    Dim _drSiteInfo As DataRow
    Public Property drSiteInfo() As DataRow
        Get
            Return _drSiteInfo
        End Get
        Set(ByVal value As DataRow)
            _drSiteInfo = value
        End Set
    End Property

    Dim _dvDisplayItem As New DataView
    Public Property dvDisplayItem() As DataView
        Get
            Return _dvDisplayItem
        End Get
        Set(ByVal value As DataView)
            _dvDisplayItem = value
        End Set
    End Property
    Private _strGiftReceiptMessage As String
    Public Property GiftReceiptMessage() As String
        Get
            Return _strGiftReceiptMessage
        End Get
        Set(ByVal value As String)
            _strGiftReceiptMessage = value
        End Set
    End Property
    Private _StrNotificationSONo As String
    Public Property StrNotificationSONo() As String
        Get
            Return _StrNotificationSONo
        End Get
        Set(ByVal value As String)
            _StrNotificationSONo = value
        End Set
    End Property
    Private _SoCancel As Boolean = False
    Public Property SoCancel() As Boolean
        Get
            Return _SoCancel
        End Get
        Set(ByVal value As Boolean)
            _SoCancel = value
        End Set
    End Property
    Private _IsBookingEdit As Boolean
    Public Property IsBookingEdit() As Boolean
        Get
            Return _IsBookingEdit
        End Get
        Set(ByVal value As Boolean)
            _IsBookingEdit = value
        End Set
    End Property
    Private _IsBookBarcodePrint As Boolean = False
    Public Property IsBookBarcodePrint() As Boolean
        Get
            Return _IsBookBarcodePrint
        End Get
        Set(ByVal value As Boolean)
            _IsBookBarcodePrint = value
        End Set
    End Property
    Dim oldGrossAmt As Double = 0.0
    Dim oldPickup As Double = 0.0
    Dim oldBalToPay As Double = 0.0
    Dim oldAdvPaid As Double = 0.0
    Dim setoldvalue As Boolean = False
#End Region
#Region "Load Sales Order Application"

    Private Sub frmPCNSalesOrderUpdate_Activated(sender As Object, e As System.EventArgs) Handles Me.Activated
        If EditCallFromOrderPackagingScreen Then
            dgDeliveryLocation.Focus()
            dgDeliveryLocation.Select()
        Else
            CtrlTxtOrderNo.Focus()
            CtrlTxtOrderNo.Select()
        End If

    End Sub
    Private Sub frmNSalesOrderUpdate_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing

        If grdSOItems.Rows.Count > 1 AndAlso Not IsFormClosing Then
            If EditCallFromOrderPackagingScreen = False Then
                If MsgBox(getValueByKey("SO047"), MsgBoxStyle.YesNo, "SO047 - " & getValueByKey("CLAE04")) = MsgBoxResult.No Then
                    e.Cancel = True
                End If

            Else
                If CtrlSalesPerson.AndroidSearchTextBox.IsListBoxVisible Then
                    CtrlSalesPerson.AndroidSearchTextBox.ResetListBox()
                End If
                If EditCallFromOrderPackagingScreen = True Then
                    Me.DialogResult = Windows.Forms.DialogResult.OK
                End If
            End If
        End If
    End Sub

    Private Sub frmNSalesOrderUpdate_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown
        Try
            If e.KeyCode = Keys.F1 Then
                Dim objClsCommon As New clsCommon
                If SoCancel Then
                    objClsCommon.DisplayHelpFile(ParentForm, "543-cancel-sales-order.htm")
                Else
                    objClsCommon.DisplayHelpFile(ParentForm, "edit-sales-order.htm")
                End If

            End If
            If e.KeyCode = Keys.F12 Then
                '-----Added By Prasad For Checking if Header then Call Price Change else no
                If grdSOItems.Item(grdSOItems.Row, "IsHeader") = True AndAlso grdSOItems.Item(grdSOItems.Row, "ArticleType") = "Single" Then
                    If CInt(grdSOItems.Item(grdSOItems.Row, "DeliveredQty")) = 0 Then 'added by vipin once pick up done.User cannot change price.
                        PriceChange()
                    Else
                        ShowMessage("Price cannot be changed. Pickup is done for selected article.", "BOC001 - " & getValueByKey("CLAE04"))
                    End If
                    '' added by ketan validation for combo
                ElseIf grdSOItems.Item(grdSOItems.Row, "IsHeader") = True AndAlso grdSOItems.Item(grdSOItems.Row, "ArticleType") = "Combo" Then
                    ShowMessage("Price cannot be changed for combo articles.", "BOC001 - " & getValueByKey("CLAE04"))
                    Exit Sub             
            End If
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub


    ''' <summary>
    ''' Get the Site default Settings And Set Default Config Object
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub frmSalesOrderUpdation_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try

            grdSOItems.AllowSorting = False     'vipin 20.02.2018 Disable Grid Sort
            dgDeliveryLocation.AllowSorting = False

            If SoCancel Then
                Me.Text = "Cancel Sales Order"
            End If
            dtPackagingcopiedfrom = objPCSO.CopyFromStructure()
            If dtPackagingcopiedfrom IsNot Nothing Then
                dtPackagingcopiedfrom.Clear()
            End If
            DtSoBulkRemarks = objPCSO.RmearksStructure()
            DtSoBulkRemarks.Rows.Clear()

            lblCompName.Text = ""
            CtrlLabel18.Text = ""
            CtrltxrCust.Text = ""
            lblStrRaised.Text = "-"
            grdSOItems.Rows.MinSize = 28
            dgDeliveryLocation.Rows.MinSize = 28
            grdSOItemRetuns.Rows.MinSize = 28
            grdSTRDetails.Rows.MinSize = 28
            grdSOInvoice.Rows.MinSize = 28
            rbnCST.LargeImage = My.Resources.ApplyCSTTax
            AddHandler CtrlSalesPerson.CtrlTxtBox.TextChanged, AddressOf txtSearchItem_textchange
            AddHandler CtrlSalesPerson.CtrlTxtBox.Leave, AddressOf txtSearchItem_Leave
            AddHandler CtrlSalesPerson.AndroidSearchTextBox.TextChanged, AddressOf AndroidSearchTextBox_Textchange
            AddHandler CtrlSalesPerson.AndroidSearchTextBox.Leave, AddressOf AndroidSearchTextBox_Leave

            AddHandler CtrlSalesPerson.CtrlCmdSearch.Click, AddressOf BtnSearchItem_Click
            AddHandler CtrlSalesPerson.CtrlTxtBox.KeyDown, AddressOf txtSearchItem_Leave
            AddHandler CtrlBtnAddExtraCost.Click, AddressOf BtnAddOtherCharges_Click
            AddHandler cmdApplySelectedPromo.Click, AddressOf cmdDefaultPromo_Click
            AddHandler cmdSave.Click, AddressOf BtnSaveSalesOrder_Click
            'AddHandler CtrlSalesInfo.CtrlBtn1.Click, AddressOf BtnSearchSalesOrder_Click
            AddHandler CmdSOClose.Click, AddressOf BtnSOCancel_Click
            AddHandler rbbtnSelectPromo.Click, AddressOf rbbtnDefaultPromo_Click
            AddHandler rbbtnClrAllPromo.Click, AddressOf cmdClrAllPromo_Click
            AddHandler CmdSOClose.Click, AddressOf BtnSOCloseManualSO_Click
            AddHandler cmdPrint.Click, AddressOf BtnSOPrint_Click
            AddHandler CtrlBtnReturn.Click, AddressOf BtnSOReturn_Click
            AddHandler CtrlBtnStockCheck.Click, AddressOf BtnSOStockCheck_Click
            'AddHandler CtrlRbn1.DbtnPay.Click, AddressOf BtnAcceptPayment_Click
            'AddHandler CtrlRbn1.DbtnPayCard.Click, AddressOf BtnPayCard_Click
            'AddHandler CtrlRbn1.DbtnPayCash.Click, AddressOf BtnPayCash_Click
            'AddHandler CtrlRbn1.DbtnpayCheque.Click, AddressOf BtnPayCheque_Click

            Call SetScreenAsBooking()
            lblBarcode.Text = getValueByKey("")
            'AddHandler CtrlSalesInfo.CtrlTxtOrderNo.KeyDown, AddressOf FillSalesOrder
            'AddHandler CtrlSalesPerson.CtrlTxtBox.KeyDown, AddressOf txtSearchItem_KeyDown
            AddHandler CtrlRbn1.DbtnF2.Click, AddressOf ChangeQty
            AddHandler grdSOItems.StartEdit, AddressOf grdSOItems_StartEdit
            AddHandler rbnAddCombo.Click, AddressOf rbnAddCombo_Click

            ' AddHandler CtrlSalesInfo.CtrlDtExpDelDate.Leave, AddressOf dtpExpDeliveryDate_Leave
            ' AddHandler CtrlSalesInfo.CtrlDtExpDelDate.Calendar.DateValueSelected, AddressOf dtpExpDeliveryDate_Leave
            Dim objdefault As New clsDefaultConfiguration("SalesOrder")
            objdefault.GetDefaultSettings()
            dsMain = objPCSO.GetSOTableStructEdit(vSiteCode, 0)
            objPCSO.GetSODefaultConfig(vSiteCode)
            dtArticleTaxes = objPCSO.GetAllTaxesAppliedToSiteArticleLevel(clsAdmin.SiteCode, "SO201")
            dtPrintingDetails = objPCSO.GetPrintingDetail
            _drSiteInfo = objComn.GetSiteInfo(vSiteCode).Rows(0)
            lblBarcode.Text = getValueByKey("frmnsalesordercreation.grdSOItems.ean")
            vDocTypeCreation = objPCSO.SOCreation
            vDocTypeReturn = objPCSO.SOReturn
            vDocType = vDocTypeCreation
            vIsPrintPreviewAllowed = clsDefaultConfiguration.SOPrintPreviewAllowed
            CtrReturnBarcode.Visible = clsDefaultConfiguration.IsBatchManagementReq
            lblBarcode.Visible = clsDefaultConfiguration.IsBatchManagementReq
            rbnGrpCST.Visible = clsDefaultConfiguration.IsCstTaxRequired

            vCurrentDate = objComn.GetCurrentDate

            _dsScan = objPCSO.GetCollectionOfItems
            _dsScan.Clear()
            _dsPackagingVar = objPCSO.GetCollectionOfPackagingMaterial
            dtFactoryTbl = objPCSO.GetFactoryNodeCodes()
            If Not (dsScan Is Nothing) Then
                _dsScan.Clear()
            End If
            If Not (_dsPackagingVar Is Nothing) Then
                _dsPackagingVar.Clear()
            End If
            _dsPackagingDelivery = objPCSO.GetCollectionOfPackagingDelivery
            If Not (_dsPackagingDelivery Is Nothing) Then
                _dsPackagingDelivery.Clear()
            End If
            dsScanProm.Merge(dsScan)

            dsInvoice = objPCSO.SetInvoiceInSOCancel(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))

            RefreshLoadSOData()
            RefreshLoadInvcData()

            dsScanReturn.Merge(dsScan)

            'grdSOItemRetuns.DataSource = dsScanReturn.Tables(0)
            'grdSOItems.DataSource = dsScan.Tables(0)
            CtrlSalesPerson.CtrlSalesPersons.Enabled = False
            'tabSales = TabPageItemDetails
            'tabPayment = TabPageInvoiceDetails
            'tabReturn = TabPageItemDetailsReturn
            'TabSalesOrder.TabPages.Remove(tabReturn)
            TabSalesOrder.TabPages("TabPageItemDetailsReturn").TabVisible = False
            TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetails")
            'TabSalesOrder.TabPages("TabPageItemDetails").Select()
            'TabSalesOrder.pInit()
            GridItemSetting()
            GridInvoiceSetting()
            GridDeliverdSetting()
            ' PSetDefaultCurrencyOfCashMemoSummary(CtrlCashSummary1)
            '--added by rama on 4-aug-2009 for bug no 0000584
            If clsDefaultConfiguration.IsOtherChargesAllowed = False Then
                CtrlBtnAddExtraCost.Visible = False
            Else
                CtrlBtnAddExtraCost.Visible = True
            End If
            '  PSetDefaultCurrencyOfCashMemoSummary(CtrlCashSummary1)
            '--
            PrintSetProperty()
            CtrlBtnReturn.Enabled = False
            'code added by Mahesh for add bulk combo 
            Call objPCSO.GetSOBulkComboTablestructure(DtSoBulkComboHdr, DtSoBulkComboDtl)
            '--- Set tab sequence
            Call SetTabSequence()
            dtPackagingPrintBox = objComn.GetPackagingBox(clsAdmin.SiteCode, 2)
            Call EnableDiableTenderIcons()
            ''' delivery blinker start
            AddHandler deliveryTimer.Tick, AddressOf timer_Tick
            deliveryTimer.Interval = DeliveryBlinkFrequency
            CtrlLblDelivery.Visible = False
            deliveryTimer.Start()
            CtrllblDiscUsedPerc.Visible = False
            CtrlLabelDiscUsedPer.Visible = False
            ''' delivery blinker end
            '''

            '----05042016 check user authorization for so booking new and edit -sagar
            If CheckAuthorisationForTran(clsAdmin.SiteCode, "SoBooking") = True AndAlso CheckAuthorisation(clsAdmin.UserCode, "SoBooking") AndAlso clsDefaultConfiguration.ISAllowSOBooking = True AndAlso clsDefaultConfiguration.IsNewSalesOrder = True Then
                rbbtnSOBooking.Visible = True
            Else
                rbbtnSOBooking.Visible = False
            End If
            If CheckAuthorisationForTran(clsAdmin.SiteCode, "SoBookingEdit") = True AndAlso CheckAuthorisation(clsAdmin.UserCode, "SoBookingEdit") AndAlso clsDefaultConfiguration.ISAllowSOBooking = True AndAlso clsDefaultConfiguration.IsNewSalesOrder = True Then
                rbbtnSOBookingEdit.Visible = True
            Else
                rbbtnSOBookingEdit.Visible = False
            End If
            If StrNotificationSONo <> "" Then
                cmdGenerateSTR.Enabled = True
                If Not (StrNotificationSONo = "" Or StrNotificationSONo = String.Empty) Then
                    vSalesNo = StrNotificationSONo
                    If boolIsReturn = True Then
                        CtrlBtnReturn.Tag = "Cancel Return"
                        CtrlBtnReturn_Click(sender, e)
                    End If
                    CtrlTxtOrderNo.Text = vSalesNo
                    ResetSalesOrder()
                    SetSalesOrderInForm(vSalesNo)
                    'CtrlSalesPerson.CtrlTxtBox.Focus()
                    CtrlSalesPerson.AndroidSearchTextBox.Focus()
                    IsStrGenerateApplicable = False
                    ItemScan.Visible = True
                    CtrlSalesPerson.CtrlTxtBox.Visible = True
                    BtnSearchItem.Visible = True
                    BtnSOSave.Enabled = True
                    BtnSOPrint.Enabled = True
                    rbnGrpCMPromotion.Enabled = True
                    BtnSOAcceptPayment.Enabled = True
                    BtnSOOtherCharges.Enabled = True
                    'BtnSOReturn.Enabled = True
                    BtnSOStockCheck.Enabled = True
                    BtnSOCalculater.Enabled = True

                End If
                GridInvoiceSetting()
                GridItemSetting()
                GridDeliverdSetting()
                IssuingCV = False
                TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetails")
                'CtrlSalesPerson.CtrlTxtBox.TabIndex = 8
                fnGridColAutoSize(grdSOItems)
                'CtrlSalesPerson.CtrlTxtBox.Focus()
                CtrlSalesPerson.AndroidSearchTextBox.Focus()

            End If
            If clsDefaultConfiguration.ThemeSelect = "Theme 1" Then
                Themechange()
            End If
            'added by khusrao adil 
            'merged on 6-11-2017 for pc sprint 4
            'If EditCallFromOrderPackagingScreen = True Then
            '    If SalesORderNumberFromOrderPackagingScreen <> "" Then
            '        BtnSearchSalesOrder_Click(Nothing, Nothing)
            '        DisableScreenControls()
            '    End If
            'End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
        Try

        
        SetCulture(Me, Me.Name, CtrlRbn1)
        'CtrlSalesInfo.CtrlTxtOrderNo.TabIndex = 0
        'CtrlSalesInfo.Focus()
        'CtrlSalesInfo.CtrlTxtOrderNo.TabIndex = 1
        'CtrlSalesInfo.CtrlTxtOrderNo.Focus()
        CtrlSalesPerson.AndroidSearchTextBox.Select()
        Dim condition As String
        Dim objItem As New clsIteamSearch
        condition = " AND A.ArticalTypeCode<>'Combo'  AND A.ArticleCode <>'" & clsDefaultConfiguration.GVBaseArticle & "' AND A.ArticleCode <>'" & clsDefaultConfiguration.ClpBaseArticle & "' AND A.ArticleCode <>'" & clsAdmin.CVBaseArticle & "'"
        Dim dtBind = objItem.GetEANData(clsAdmin.SiteCode, "", clsAdmin.LangCode, condition)
        If dtBind.Rows.Count > 1 Then
            'Dim listSource As List(Of [String]) = (From row In dtBind Select Convert.ToString(row("ArticleCode")) + " " + Convert.ToString(row("Discription"))).Distinct().ToList()
            'CtrlSalesPerson.AndroidSearchTextBox.lstNames = listSource
            Call SetWildSearchTextBox(dtBind, CtrlSalesPerson.AndroidSearchTextBox, key:="ArticleCode", Value:="Discription", searchData:="ArticleCodeDesc")
        End If
        If SoCancel Then
            CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = False
            rbnGrpCMPromotion1.Enabled = False
            rbngAddCombo.Enabled = False
            rbnGrpCST.Enabled = False
            CtrlBtnReturn.Enabled = False
            CtrlBtnAddExtraCost.Enabled = False
            cmdGenerateSTR.Enabled = False
            Me.Text = "Cancel Sales Order"
        End If
        If StrNotificationSONo <> "" Then
            cmdGenerateSTR.Enabled = True
            StrNotificationSONo = ""
        End If
        'added by sagar for screen resoltn issue
        Me.TabSalesOrder.Size = New System.Drawing.Size(My.Computer.Screen.WorkingArea.Width - 10, My.Computer.Screen.WorkingArea.Height - 410)
        CtrlTxtOrderNo.Focus()
        If clsDefaultConfiguration.IsSavoy Then
            DisablebuttonsForSavoy()
        End If
        If EditCallFromOrderPackagingScreen = True Then
            If SalesORderNumberFromOrderPackagingScreen <> "" Then
                BtnSearchSalesOrder_Click(Nothing, Nothing)
                DisableScreenControls()

                ' TabPageItemDetails_Resize(sender, New System.EventArgs)
            End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub
    'added by khusrao adil
    'merged on 6-11-2017 for pc sprint 4
    Public Sub DisableScreenControls()
        Try


            '--------------header controls
            cmdSave.Enabled = False
            rbnAddCombo.Enabled = False
            rbnCST.Enabled = False
            CtrlBtnStockCheck.Enabled = False
            CtrlBtnAddExtraCost.Enabled = False
            cmdGenerateSTR.Enabled = False

            CtrlRbn1.Tabs(1).Groups("grpPayments").Visible = True
            CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = False
            '------------ customer order details
            rdDelYes.Enabled = False
            rdDelNo.Enabled = False
            rbDPNo.Enabled = False
            rbDPYes.Enabled = False

            lblMultiPickupDel.Enabled = False
            CtrlLblDelivery.Enabled = False
            ctrlDtDeliveryDate.Enabled = False
            CtrldtOrderDt.Enabled = False
            BtnSearchSalesOrder.Enabled = False
            CtrlTxtOrderNo.Enabled = False
            dgDeliveryLocation.Enabled = False


            ''------------------ grid controls
            BtnSearchItem.Enabled = False
            CtrlSalesPerson.AndroidSearchTextBox.Enabled = False
            CtrlSalesPerson.CtrlCmdSearch.Enabled = False

            grdSOItems.Enabled = True
            grdSOItemRetuns.Enabled = True
            grdSOInvoice.Enabled = True
            dgDeliveryLocation.Enabled = True

            grdSOItems.AllowEditing = False
            'grdSOItems.Rows.Frozen = True
            grdSOItemRetuns.AllowEditing = False
            grdSOInvoice.AllowEditing = False
            dgDeliveryLocation.AllowEditing = False
            grdSOItems.AllowEditing = False
            dgDeliveryLocation.AllowEditing = False
            grdSOInvoice.AllowEditing = False

            rbbtnSOBooking.Enabled = False
            rbbtnSOBookingEdit.Enabled = False
            'btnBrowse.Enabled = False
            ' dgDeliveryLocation.Controls.Item("btnBrowse").Enabled = False
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub SetScreenAsBooking()
        Try
            RemoveHandler CtrlRbn1.DbtnPay.Click, AddressOf BtnAcceptPayment_Click
            RemoveHandler CtrlRbn1.DbtnPayCard.Click, AddressOf BtnPayCard_Click
            RemoveHandler CtrlRbn1.DbtnPayCash.Click, AddressOf BtnPayCash_Click
            RemoveHandler CtrlRbn1.DbtnpayCheque.Click, AddressOf BtnPayCheque_Click
            RemoveHandler CtrlRbn1.DbtnPayNEFT.Click, AddressOf BtnPayNEFT_Click  '' added by nikhil
            RemoveHandler CtrlRbn1.DbtnPayRTGS.Click, AddressOf BtnPayRTGS_Click
        Catch ex As Exception
            LogException(ex)
        End Try

        If IsBookingEdit = True Then
            CtrlRbn1.Tabs(1).Groups("grpPayments").Visible = False
            rbnGrpCMPromotion1.Visible = False
            CmdSOClose.Enabled = False
            BtnSOCancel.Enabled = False
            cmdSONew.Enabled = False
            CmdSOEdit.Enabled = False
            rbnGrpCST.Visible = False
            Me.Text = "Edit SO Booking"
        Else
            CtrlRbn1.Tabs(1).Groups("grpPayments").Visible = True
            rbnGrpCMPromotion1.Visible = True
            rbnGrpCST.Visible = True
            Me.Text = "Edit Sales Order"
            AddHandler CtrlRbn1.DbtnPay.Click, AddressOf BtnAcceptPayment_Click
            AddHandler CtrlRbn1.DbtnPayCard.Click, AddressOf BtnPayCard_Click
            AddHandler CtrlRbn1.DbtnPayCash.Click, AddressOf BtnPayCash_Click
            AddHandler CtrlRbn1.DbtnpayCheque.Click, AddressOf BtnPayCheque_Click
            AddHandler CtrlRbn1.DbtnPayNEFT.Click, AddressOf BtnPayNEFT_Click '' added by nikhil
            AddHandler CtrlRbn1.DbtnPayRTGS.Click, AddressOf BtnPayRTGS_Click
        End If
    End Sub
    Dim NewDiscountVal As Double = 0
    ''' <summary>
    ''' Applying the Promotion in Current Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>Manual Promotion may be(%,fixed price off,Fixed price sale) </remarks>
    Private Sub rbbtnDefaultPromo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbbtnDefaultPromo.Click
        Try

            '--change by sagar if bal to pay is zero, discount is not applicable.
            If CtrllblBaltoPay.Text = 0 Then
                Exit Sub
            End If
            For drindex = 0 To dsPackagingVar.Tables(0).Rows.Count - 1

                If dsPackagingVar.Tables(0).Rows(drindex)("ArticleType") = "Combo" Then
                    If dsPackagingVar.Tables(0).Rows(drindex)("PckgMaterial").ToString() = "" Then
                        ShowMessage("Please select Packaging material for Combo article", " " & getValueByKey("CLAE04"))
                        Exit Sub
                    End If
                End If
            Next

            'cmdClrAllPromo_Click("Clear", Nothing)
            If dsScan.Tables(0).Rows.Count > 0 Then
                'If IsApplyPromotion = True Then
                '    RemoveApplyPromotion(_dsScan)
                'End If           
            Else
                'ShowMessage("Please Scan Article first", "Sales Order Information")
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                Exit Sub
            End If

            Dim obj As New clsApplyPromotion
            obj.DecimalDigits = clsDefaultConfiguration.DecimalPlaces
            obj.MainTable = "PackagingMaterial"
            obj.ExclusiveTaxFieldName = "ExclTaxAmt"
            'obj.TotalDiscountField = "DiscountAmount"
            obj.TotalDiscountField = "Discount"
            obj.GrossAmtField = "GrossAmt"
            obj.Condition = "IsStatus <> 'Deleted'"
            ' If clsDefaultConfiguration.IsPromotionManually = True Then
            'If MsgBox(getValueByKey("SO021"), MsgBoxStyle.YesNo, "Customer Information") = MsgBoxResult.Yes Then
            If UCase(sender.id) = UCase("rbbtnSelectPromo") Then
                If IsDefaultPromotion Then
                    If MsgBox(getValueByKey("SO094"), MsgBoxStyle.OkCancel, "SO094 - " & getValueByKey("CLAE04")) = MsgBoxResult.Ok Then
                    Else
                        Exit Sub
                    End If
                End If

                Dim dtList As DataTable
                dtList = obj.GetListofActivePromotions(vSiteCode)

                If Not dtList Is Nothing Then
                    Dim objView As New frmNCommonSearch
                    objView.SetData = dtList
                    objView.ShowDialog()

                    If Not objView.search Is Nothing Then
                        Dim offerno As String = objView.search(0)
                        '''' IsSelectedPromotion = True
                        If obj.CheckValidations(offerno) = True Then
                            Dim dtValidation As DataTable = obj.GetAllQuestions(offerno)
                            Dim StrQues As String = ""

                            For Each dr As DataRow In dtValidation.Rows
                                StrQues = StrQues & dr("QuestionName").ToString() & ","
                            Next
                            Dim DiscountPer As Double = 0
                            Dim DiscountVal As Double = 0

                            If IsDiscountApplicable Then
                                DiscountPer = dsMain.Tables("SalesOrderHdr")(0)("DiscountPercentage")
                                For Each drScanTemp As DataRow In _dsPackagingVar.Tables("PackagingMaterial").Select("IsStatus<> 'Deleted' and status=true")

                                    DiscountVal = DiscountVal + ((drScanTemp("LineDiscount") * ((drScanTemp("Quantity") - drScanTemp("DeliveredQty")) / drScanTemp("Quantity"))))

                                Next
                                ' DiscountVal = dsPackagingVar.Tables(0).Compute("Sum(Linediscount)", "status=True") - dtDiscUsed.Rows(0)("TotalDiscountAmount")

                            End If
                            IsComboDoubleClicked = False  'vipin
                            Dim p As Object = "Clear"
                            cmdClrAllPromo_Click("Clear", Nothing)
                            If StrQues.Contains("Autho") = True AndAlso StrQues.Contains("Voucher") = True Then
                                '_dsScan.Tables(0).Columns("Discount").ColumnName = "TotalDiscount"
                                dsPackagingVar.Tables(0).Columns("Discount").ColumnName = "TotalDiscount"
                                '_dsScan.Tables(0).Columns("ExclTaxAmt").ColumnName = "EXCLUSIVETAX"
                                dsPackagingVar.Tables(0).Columns("ExclTaxAmt").ColumnName = "EXCLUSIVETAX"

                                'CheckInterTransactionAuth("ORD", _dsScan.Tables(0), 0, 0, 0, offerno)
                                CheckInterTransactionAuth("ORD", dsPackagingVar.Tables(0), 0, 0, 0, offerno, baltoPay:=CtrllblBaltoPay.Text, TotalPickUpDisc:=dtPickUpDiscGrid, isNewSO:=True, DiscPer:=DiscountPer, DiscVal:=DiscountVal)
                                Dim newDisamt = NewDiscountAmount '$$ added by KETAN SO GST Changes 
                                IsPromotionApplyFromFrontEnd = True 'vipin
                                ' _dsScan.Tables(0).Columns("TotalDiscount").ColumnName = "Discount"
                                '_dsScan.Tables(0).Columns("EXCLUSIVETAX").ColumnName = "ExclTaxAmt"
                                _dsPackagingVar.Tables(0).Columns("TotalDiscount").ColumnName = "Discount"
                                _dsPackagingVar.Tables(0).Columns("EXCLUSIVETAX").ColumnName = "ExclTaxAmt"
                            ElseIf StrQues.Contains("Autho") = True Then
                                If CheckInterTransactionAuth("DAUTH", _dsPackagingVar.Tables(0)) = True Then 'CheckInterTransactionAuth("DAUTH", _dsScan.Tables(0))
                                    'obj.ApplySelectedPromotion(offerno, _dsScan, vSiteCode)
                                    obj.ApplySelectedPromotion(offerno, _dsPackagingVar, vSiteCode)
                                End If
                            End If
                        Else
                            Dim p As Object = "Clear"
                            cmdClrAllPromo_Click("Clear", Nothing)
                            'obj.ApplySelectedPromotion(offerno, _dsScan, vSiteCode)
                            obj.ApplySelectedPromotion(offerno, _dsPackagingVar, vSiteCode)
                        End If
                    Else
                        Exit Sub
                    End If
                End If
            Else
                If IsSelectedPromotion = False Then
                    ShowMessage(getValueByKey("SO022"), "SO022 - " & getValueByKey("CLAE04"))
                    IsDefaultPromotion = True
                End If

                'ShowMessage("Default Schemes is applied Now", "Message")
                'obj.CalculatedDs(_dsScan, vSiteCode)
                obj.CalculatedDs(_dsPackagingVar, vSiteCode)
            End If

            'Else
            '    ShowMessage(getValueByKey("SO022"), "SO022 - " & getValueByKey("CLAE04"))
            '    'ShowMessage("Default Schemes is applied Now", "Message")
            '    obj.CalculatedDs(_dsScan, vSiteCode)
            'End If
            For Each drUpdateScan As DataRow In _dsScan.Tables(0).Rows
                'drRem("GrossAmt") = 0
                'drRem("MinPayAmt") = 0
                'Dim resultPackQuntity As DataRow() = _dsPackagingVar.Tables(0).Select("RowIndex='" + drUpdateScan("RowIndex").ToString() + "' and IsHeader=True ")
                Dim resultPackQuntity As DataRow() = _dsPackagingVar.Tables(0).Select("RowIndex='" + drUpdateScan("RowIndex").ToString() + "' and IsHeader=True and IsStatus<> 'Deleted'") 'vipin
                If resultPackQuntity.Length > 0 Then
                    drUpdateScan("Discount") = Math.Round(resultPackQuntity(0)("Discount"), 2)
                    drUpdateScan("NetAmount") = resultPackQuntity(0)("NetAmount")
                    drUpdateScan("LineDiscount") = Math.Round(resultPackQuntity(0)("LineDiscount"), 2)
                    drUpdateScan("TotalDiscPercentage") = resultPackQuntity(0)("TotalDiscPercentage")
                    drUpdateScan("FirstLevel") = resultPackQuntity(0)("FirstLevel")
                    drUpdateScan("TopLevel") = resultPackQuntity(0)("TopLevel")
                    'drUpdateScan("TopLevelDisc") = resultPackQuntity(0)("TopLevelDisc")
                End If



            Next

            _dsScan.AcceptChanges()

            Dim TotalPendingGrossAmt As Double = 0
            '  For Each drDisc As DataRow In _dsPackagingVar.Tables(0).Rows
            For Each drDisc As DataRow In _dsPackagingVar.Tables(0).Select("IsStatus <>'Deleted'")
                Dim ordQty = drDisc.Item("Quantity")
                Dim delQty = drDisc("DeliveredQty")
                Dim sellPrice = drDisc.Item("SellingPrice")
                TotalPendingGrossAmt = TotalPendingGrossAmt + sellPrice * (ordQty - delQty)
            Next
            Dim NewDiscount As Double
            For Each drDisc As DataRow In _dsScan.Tables(0).Rows

                Dim PrvDisAmount As Decimal = 0 'vipin
                Dim prvTaxAmount As Decimal = 0

                If Not (IIf(IsDBNull(drDisc("TotalDiscPercentage")), 0, drDisc("TotalDiscPercentage")) = 0) Then

                    Dim ordQty = drDisc.Item("Quantity")
                    Dim delQty = drDisc("DeliveredQty")
                    Dim sellPrice = drDisc.Item("SellingPrice")
                    Dim GrossAmt = sellPrice * (ordQty - delQty)
                    Dim Disper = GrossAmt / TotalPendingGrossAmt * 100

                    If (Not String.IsNullOrEmpty(drDisc("CLPDiscount").ToString())) Then
                        '     NewDiscount = NewDiscountAmount * Disper / 100
                        NewDiscount = Math.Round(NewDiscountAmount * Disper / 100, 2) 'vipin
                        ' NewDiscount = NewDiscountAmount 'drDisc("Discount") '$$ added by KETAN SO GST Changes 
                        drDisc("Discount") = CDbl(drDisc("LineDiscount").ToString()) + CDbl(drDisc("CLPDiscount").ToString())
                    End If

                    drDisc("TotalDiscPercentage") = (IIf(drDisc("Discount") Is DBNull.Value, 0, drDisc("Discount")) * 100) / drDisc("GrossAmt")
                    drDisc("PromotionId") = IIf(drDisc("FirstLevel") = String.Empty, 0, drDisc("FirstLevel")) & "," & IIf(drDisc("TopLevel") = String.Empty, 0, drDisc("TopLevel"))

                    'If drDisc("PromotionId") = "0,0" Then
                    '    drDisc("LineDiscount") = (drDisc("GrossAmt") * drDisc("TotalDiscPercentage")) / 100
                    'End If
                    Dim totalamt As Decimal = 0
                    If clsDefaultConfiguration.ExclusiveTaxAfterDisc = True Then
                        totalamt = drDisc("GrossAmt") - drDisc("Discount")
                        Dim objcom As New clsSaleOrderCommon
                        objcom.IsCSTApplicable = IsCSTApplicable
                        ' objcom.CreateDataSetForTaxCalculation(drDisc("ARTICLECODE"), totalamt, drDisc, dsMain, CtrlSalesInfo1.CtrlTxtOrderNo.Text, drDisc("EAN"), True)
                    End If

                    drDisc("NetAmount") = drDisc("NetAmount") ' drDisc("GrossAmt") - drDisc("LineDiscount") + IIf(drDisc("ExclTaxAmt") Is DBNull.Value, 0, drDisc("ExclTaxAmt")) + IIf(drDisc("IncTaxAmt") Is DBNull.Value, 0, drDisc("IncTaxAmt"))
                    'drDisc("MinPayAmt") = Math.Round((drDisc("NetAmount") / drDisc("Quantity")) * drDisc("PickUpQty"), 3)

                    TotalSalesQty = drDisc("PickUpQty") + IIf(drDisc("DeliveredQty") IsNot DBNull.Value, drDisc("DeliveredQty"), 0)
                    ' NetArticleRate = drDisc("NetAmount") / drDisc("Quantity")
                    Dim DiscAmt As Double = 0
                    DiscAmt = DiscAmt + ((drDisc("LineDiscount") * ((drDisc("Quantity") - drDisc("DeliveredQty")) / drDisc("Quantity"))))
                    Dim vpendingQty = (drDisc("Quantity") - drDisc("DeliveredQty"))
                    NetArticleRate = Math.Round((drDisc("SellingPrice") * vpendingQty) + ((drDisc("TotalTaxAmt") * vpendingQty / drDisc("Quantity"))) - DiscAmt, 3) / vpendingQty

                    'drDisc("MinPayAmt") = ((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)

                    '  drDisc("TotalPickUpAmt") = (drDisc("PickupQty") * NetArticleRate)
                    drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)) '##vioin
                    drDisc("TotalPickUpAmt") = Math.Round((drDisc("PickupQty") * NetArticleRate)) '## added by vipin
                    ' ----------------------------------------------------------'$$ added by KETAN SO GST Changes 
                    Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drDisc("BillLineNo").ToString() + "'")
                    Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drDisc("BillLineNo").ToString() + "'")
                    Dim dtTaxCalc As DataTable
                    If IsCSTApplicable Then
                        dtTaxCalc = objCM.getTax(vSiteCode, String.Empty, "SO201", drDisc("Quantity") - drDisc("DeliveredQty"), drDisc("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
                    Else
                        dtTaxCalc = objCM.getTax(vSiteCode, drDisc.Item("ArticleCode"), "SO201", drDisc("Quantity") - drDisc("DeliveredQty"), drDisc("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
                    End If
                    If drDisc("ArticleType") = "Combo" Then
                        If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then ''$$ added by nikhil
                            ' Dim TaxAmt As Double = (Math.Round(drDisc.Item("SellingPrice") * drDisc.Item("Quantity"), 3) - drDisc.Item("Discount")) * CDbl(lblArticleCombo1.Rows(0)("Tax") / 100)
                            ' Dim newTax = vTotalNetAmt * CDbl(lblArticleCombo1.Rows(0)("Tax")) / 100
                            If result.Length > 0 Then 'vipin
                                PrvDisAmount = result(0)("DiscountAmount")
                            End If
                            If resultTax.Length > 0 Then
                                prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                            End If
                            Dim prvdeliveredQty = drDisc("DeliveredQty")
                            Dim Prvnetamount = drDisc("DeliveredQty") * drDisc.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                            ' Dim vTotalNetAmt = Math.Round(drDisc.Item("SellingPrice") * (drDisc.Item("Quantity") - prvdeliveredQty), 3) - drDisc.Item("Discount")
                            Dim vTotalNetAmt = Math.Round(drDisc.Item("SellingPrice") * (drDisc.Item("Quantity") - prvdeliveredQty), 3) - NewDiscount
                            '   Dim newTax = vTotalNetAmt * CDbl(DTComboTaxPer.Rows(0)("ValueInPer")) / 100
                            ' Dim newTax = Math.Round(vTotalNetAmt * CDbl(DTComboTaxPer.Rows(0)("ValueInPer")) / 100, 2) 'vipin
                            Dim DRComboTax As DataRow() = DTComboTaxPer.Select("ComboSrNo='" + drDisc("SrNo").ToString() + "'")
                            Dim newTax As Decimal = 0
                            If DRComboTax.Length > 0 Then
                                newTax = Math.Round(vTotalNetAmt * DRComboTax(0)("ValueInPer") / 100, 2) 'addedround vipin
                            Else
                                newTax = Math.Round(vTotalNetAmt * drDisc("TaxInPer") / 100, 2) 'addedround vipin
                            End If
                            drDisc("ExclTaxAmt") = prvTaxAmount + newTax
                            drDisc("TotalTaxAmt") = prvTaxAmount + newTax
                            drDisc("NetAmount") = Prvnetamount + vTotalNetAmt + newTax
                            TotalSalesQty = drDisc("PickUpQty") + IIf(drDisc("DeliveredQty") IsNot DBNull.Value, drDisc("DeliveredQty"), 0)
                            NetArticleRate = (vTotalNetAmt + newTax) / (drDisc("Quantity") - drDisc("DeliveredQty"))
                            drDisc("MinPayAmt") = ((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                            drDisc("Discount") = PrvDisAmount + NewDiscount
                            drDisc("LineDiscount") = PrvDisAmount + NewDiscount
                            drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)) '##vioin
                            drDisc("TotalPickUpAmt") = Math.Round((drDisc("PickupQty") * NetArticleRate))
                        End If
                    Else
                        If dtTaxCalc.Rows.Count > 0 Then

                            'Dim PrvDisAmount = result(0)("DiscountAmount")
                            'Dim prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                            If result.Length > 0 Then 'vipin
                                PrvDisAmount = result(0)("DiscountAmount")
                            End If
                            If resultTax.Length > 0 Then
                                prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                            End If
                            Dim prvdeliveredQty = drDisc("DeliveredQty")
                            Dim Prvnetamount = drDisc("DeliveredQty") * drDisc.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                            Dim vTotalNetAmt = Math.Round(drDisc.Item("SellingPrice") * (drDisc.Item("Quantity") - prvdeliveredQty), 3) - NewDiscount
                            dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                            objCM.getCalculatedDataSet(dtTaxCalc)
                            drDisc("ExclTaxAmt") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                            drDisc("TotalTaxAmt") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                            drDisc("NetAmount") = Prvnetamount + vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                            TotalSalesQty = drDisc("PickUpQty") + IIf(drDisc("DeliveredQty") IsNot DBNull.Value, drDisc("DeliveredQty"), 0)
                            NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drDisc("Quantity") - drDisc("DeliveredQty"))
                            drDisc("MinPayAmt") = ((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                            drDisc("Discount") = PrvDisAmount + NewDiscount
                            drDisc("LineDiscount") = PrvDisAmount + NewDiscount
                            drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)) '##vioin
                            drDisc("TotalPickUpAmt") = Math.Round((drDisc("PickupQty") * NetArticleRate))
                        End If
                    End If
                    ' -----------------------------------------------

                    '-----Added By Prasad for Calculating Tax PickupWise of Savoy Client
                    If clsDefaultConfiguration.IsSavoy Then
                        Dim TaxCalc As Double = 0
                        Dim TaxValue As Double
                        If Not dsMain.Tables("SalesOrderTaxDtls") Is Nothing AndAlso dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
                            Dim dr() = dsMain.Tables("SalesOrderTaxDtls").Select("Status=True")
                            If dr.Count > 0 Then
                                TaxValue = dr(0)("TaxValue")
                            End If
                        End If
                        TaxCalc = ((drDisc("SellingPrice") * drDisc("PickupQty")) / dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " ")) * TaxValue
                        drDisc("TotalPickUpAmt") = drDisc("TotalPickUpAmt") + TaxCalc
                    End If
                    '--------------------------------------------------------------------
                End If
                PrvDisAmount = 0
                prvTaxAmount = 0
            Next
            '$$ added by KETAN SO GST Changes 
            ' Dim TotalPendingGrossAmt As Double = 0
            For Each drDisc As DataRow In _dsPackagingVar.Tables(0).Rows  'vipin
                drDisc("Discount") = Math.Round(drDisc("Discount"), 2)
                drDisc("LineDiscount") = Math.Round(drDisc("LineDiscount"), 2)
            Next

            ' For Each drDisc As DataRow In _dsPackagingVar.Tables(0).Rows
            For Each drDisc As DataRow In _dsPackagingVar.Tables(0).Select("IsStatus <> 'Deleted'")
                Dim PrvDisAmount As Decimal = 0 'vipin
                Dim prvTaxAmount As Decimal = 0

                If Not (IIf(IsDBNull(drDisc("TotalDiscPercentage")), 0, drDisc("TotalDiscPercentage")) = 0) Then
                    'Dim TotalGrossAmt As Double = _dsPackagingVar.Tables(0).Compute("SUM(GROSSAMT)", "")
                    Dim ordQty = drDisc.Item("Quantity")
                    Dim delQty = drDisc("DeliveredQty")
                    Dim sellPrice = drDisc.Item("SellingPrice")
                    Dim GrossAmt = sellPrice * (ordQty - delQty)
                    '   Dim Disper = GrossAmt / TotalPendingGrossAmt * 100
                    Dim Disper = Math.Round(GrossAmt / TotalPendingGrossAmt * 100, 3)

                    If (Not String.IsNullOrEmpty(drDisc("CLPDiscount").ToString())) Then
                        'NewDiscount = NewDiscountAmount 'drDisc("Discount")
                        '    NewDiscount = NewDiscountAmount * Disper / 100
                        NewDiscount = Math.Round(NewDiscountAmount * Disper / 100, 2)  'vipin
                        'Dim percentage = (drDisc("GROSSAMT") / totalGAmount) * 100
                        'dr("LINEDISCOUNT") = (percentage * totalDiscValue) / 100
                        drDisc("Discount") = CDbl(drDisc("LineDiscount").ToString()) + CDbl(drDisc("CLPDiscount").ToString())
                    End If

                    drDisc("TotalDiscPercentage") = (IIf(drDisc("Discount") Is DBNull.Value, 0, drDisc("Discount")) * 100) / drDisc("GrossAmt")
                    drDisc("PromotionId") = IIf(drDisc("FirstLevel") = String.Empty, 0, drDisc("FirstLevel")) & "," & IIf(drDisc("TopLevel") = String.Empty, 0, drDisc("TopLevel"))

                    'If drDisc("PromotionId") = "0,0" Then
                    '    drDisc("LineDiscount") = (drDisc("GrossAmt") * drDisc("TotalDiscPercentage")) / 100
                    'End If
                    Dim totalamt As Decimal = 0
                    If clsDefaultConfiguration.ExclusiveTaxAfterDisc = True Then
                        totalamt = drDisc("GrossAmt") - drDisc("Discount")
                        Dim objcom As New clsSaleOrderCommon
                        objcom.IsCSTApplicable = IsCSTApplicable
                        ' objcom.CreateDataSetForTaxCalculation(drDisc("ARTICLECODE"), totalamt, drDisc, dsMain, CtrlSalesInfo1.CtrlTxtOrderNo.Text, drDisc("EAN"), True)
                    End If

                    drDisc("NetAmount") = drDisc("NetAmount") 'drDisc("GrossAmt") - drDisc("LineDiscount") + IIf(drDisc("ExclTaxAmt") Is DBNull.Value, 0, drDisc("ExclTaxAmt")) + IIf(drDisc("IncTaxAmt") Is DBNull.Value, 0, drDisc("IncTaxAmt"))
                    'drDisc("MinPayAmt") = Math.Round((drDisc("NetAmount") / drDisc("Quantity")) * drDisc("PickUpQty"), 3)

                    TotalSalesQty = drDisc("PickUpQty") + IIf(drDisc("DeliveredQty") IsNot DBNull.Value, drDisc("DeliveredQty"), 0)
                    'NetArticleRate = drDisc("NetAmount") / drDisc("Quantity")
                    Dim DiscAmt As Double = 0
                    DiscAmt = DiscAmt + ((drDisc("LineDiscount") * ((drDisc("Quantity") - drDisc("DeliveredQty")) / drDisc("Quantity"))))
                    Dim vpendingQty = (drDisc("Quantity") - drDisc("DeliveredQty"))
                    '  NetArticleRate = Math.Round((drDisc("SellingPrice") * vpendingQty) + ((drDisc("TotalTaxAmount") * vpendingQty / drDisc("Quantity"))) - DiscAmt, 3) / vpendingQty
                    NetArticleRate = Math.Round(Math.Round((drDisc("SellingPrice") * vpendingQty) + ((drDisc("TotalTaxAmount") * vpendingQty / drDisc("Quantity"))) - DiscAmt, 3) / vpendingQty, 2)
                    drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate))
                    drDisc("TotalPickUpAmt") = Math.Round((drDisc("PickupQty") * NetArticleRate))
                    '-----Added By Prasad for Calculating Tax PickupWise of Savoy Client
                    If clsDefaultConfiguration.IsSavoy Then
                        Dim TaxCalc As Double = 0
                        Dim TaxValue As Double
                        If Not dsMain.Tables("SalesOrderTaxDtls") Is Nothing AndAlso dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
                            Dim dr() = dsMain.Tables("SalesOrderTaxDtls").Select("Status=True")
                            If dr.Count > 0 Then
                                TaxValue = dr(0)("TaxValue")
                            End If
                        End If
                        TaxCalc = ((drDisc("SellingPrice") * drDisc("PickupQty")) / dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " ")) * TaxValue
                        drDisc("MinPayAmt") = drDisc("MinPayAmt") + TaxCalc
                        drDisc("TotalPickUpAmt") = drDisc("TotalPickUpAmt") + TaxCalc
                    End If

                    ' ---------------------------------------------------------- '$$ added by KETAN SO GST Changes 
                    Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drDisc("BillLineNo").ToString() + "' and PkgLineNo='" + drDisc("PkgLineNo").ToString() + "'")
                    Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drDisc("BillLineNo").ToString() + "' and PkgLineNo='" + drDisc("PkgLineNo").ToString() + "'")
                    Dim dtTaxCalc As DataTable
                    If IsCSTApplicable Then
                        dtTaxCalc = objCM.getTax(vSiteCode, String.Empty, "SO201", drDisc("Quantity") - drDisc("DeliveredQty"), drDisc("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
                    Else
                        dtTaxCalc = objCM.getTax(vSiteCode, drDisc.Item("ArticleCode"), "SO201", drDisc("Quantity") - drDisc("DeliveredQty"), drDisc("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
                    End If
                    If drDisc("ArticleType") = "Combo" Then
                        If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then  ''$$ added by nikhil
                            ' Dim TaxAmt As Double = (Math.Round(drDisc.Item("SellingPrice") * drDisc.Item("Quantity"), 3) - drDisc.Item("Discount")) * CDbl(lblArticleCombo1.Rows(0)("Tax") / 100)
                            ' Dim newTax = vTotalNetAmt * CDbl(lblArticleCombo1.Rows(0)("Tax")) / 100
                            If result.Length > 0 Then 'vipin
                                PrvDisAmount = result(0)("DiscountAmount")
                            End If
                            If resultTax.Length > 0 Then
                                prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                            End If
                            Dim prvdeliveredQty = drDisc("DeliveredQty")
                            Dim Prvnetamount = drDisc("DeliveredQty") * drDisc.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                            ' Dim vTotalNetAmt = Math.Round(drDisc.Item("SellingPrice") * (drDisc.Item("Quantity") - prvdeliveredQty), 3) - drDisc.Item("Discount")
                            Dim vTotalNetAmt = Math.Round(drDisc.Item("SellingPrice") * (drDisc.Item("Quantity") - prvdeliveredQty), 3) - NewDiscount
                            'Dim newTax = vTotalNetAmt * CDbl(DTComboTaxPer.Rows(0)("ValueInPer")) / 100
                            Dim DRComboTax As DataRow() = DTComboTaxPer.Select("ComboSrNo='" + drDisc("BillLineNo").ToString() + "'")
                            Dim newTax As Decimal = 0
                            If DRComboTax.Length > 0 Then
                                newTax = Math.Round(vTotalNetAmt * DRComboTax(0)("ValueInPer") / 100, 2)
                            Else
                                newTax = Math.Round(vTotalNetAmt * drDisc("TaxInPer") / 100, 2)
                            End If
                            drDisc("ExclTaxAmt") = prvTaxAmount + newTax
                            drDisc("TotalTaxAmount") = prvTaxAmount + newTax
                            drDisc("NetAmount") = Prvnetamount + vTotalNetAmt + newTax
                            TotalSalesQty = drDisc("PickUpQty") + IIf(drDisc("DeliveredQty") IsNot DBNull.Value, drDisc("DeliveredQty"), 0)
                            NetArticleRate = (vTotalNetAmt + newTax) / (drDisc("Quantity") - drDisc("DeliveredQty"))
                            drDisc("MinPayAmt") = ((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                            drDisc("Discount") = PrvDisAmount + NewDiscount
                            drDisc("LineDiscount") = PrvDisAmount + NewDiscount
                            drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate))
                            drDisc("TotalPickUpAmt") = Math.Round((drDisc("PickupQty") * NetArticleRate))
                        End If
                    Else

                        If dtTaxCalc.Rows.Count > 0 Then

                            If result.Length > 0 Then
                                PrvDisAmount = result(0)("DiscountAmount")
                            End If
                            If resultTax.Length > 0 Then
                                prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                                prvTaxAmount = Math.Round(prvTaxAmount, 2) 'vipin
                            End If
                            Dim prvdeliveredQty = drDisc("DeliveredQty")
                            Dim Prvnetamount = drDisc("DeliveredQty") * drDisc.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                            Dim vTotalNetAmt = Math.Round(drDisc.Item("SellingPrice") * (drDisc.Item("Quantity") - prvdeliveredQty), 3) - NewDiscount
                            dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                            objCM.getCalculatedDataSet(dtTaxCalc)
                            drDisc("ExclTaxAmt") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                            drDisc("TotalTaxAmount") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                            drDisc("NetAmount") = Prvnetamount + vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                            TotalSalesQty = drDisc("PickUpQty") + IIf(drDisc("DeliveredQty") IsNot DBNull.Value, drDisc("DeliveredQty"), 0)
                            NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drDisc("Quantity") - drDisc("DeliveredQty"))
                            drDisc("MinPayAmt") = ((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                            drDisc("Discount") = PrvDisAmount + NewDiscount
                            drDisc("LineDiscount") = PrvDisAmount + NewDiscount
                            drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate))
                            drDisc("TotalPickUpAmt") = Math.Round((drDisc("PickupQty") * NetArticleRate))
                        End If
                        ' -----------------------------------------------

                    End If
                End If
                PrvDisAmount = 0
                prvTaxAmount = 0
            Next

            For Each drDisc As DataRow In _dsPackagingVar.Tables(0).Rows  'vipin
                drDisc("Discount") = Math.Round(drDisc("Discount"), 2)
                drDisc("LineDiscount") = Math.Round(drDisc("LineDiscount"), 2)
            Next

            IsApplyPromotion = True
            isPromotionApplied = True
            CalculateSalesOrderSummory(dsScan)

            RefreshLoadSOData()
            GridItemSetting()
            'IsPromotionApplyFromFrontEnd = False ' $$ By ketan And vipin 
        Catch ex As Exception
            ShowMessage(getValueByKey("SO023"), "SO023 - " & getValueByKey("CLAE04"))
            LogException(ex)
            'ShowMessage("Promotion is not applied properly", "Error")
        End Try

    End Sub

    Private Sub SetTabSequence()
        Try
            '---- Set Tab Index START
            SetFormTabStop(Me, tabStopValue:=False)

            Dim ctrTablIndex As New Dictionary(Of Object, Int16)

            'ctrTablIndex.Add(CtrlSalesInfo, 0)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrlTxtOrderNo, 0)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrlBtn1, 1)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrldtOrderDt, 2)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrlDtExpDelDate, 3)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrlTxtCustOrdRef, 4)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrlTxtRemarks, 5)
            'ctrTablIndex.Add(CtrlSalesInfo.CtrlTxtInvoice, 6)

            'ctrTablIndex.Add(Me.TabSalesOrder, 1)
            ctrTablIndex.Add(Me.TabPageInvoiceDetails, 0)
            ctrTablIndex.Add(Me.TabPageItemDetails, 1)
            ctrTablIndex.Add(Me.TabPageItemDetailsReturn, 2)
            ctrTablIndex.Add(Me.C1Sizer3, 0)
            ctrTablIndex.Add(Me.CtrlSalesPerson, 0)
            ctrTablIndex.Add(Me.CtrlSalesPerson.CtrlSalesPersons, 0)
            ctrTablIndex.Add(Me.CtrlSalesPerson.CtrlTxtBox, 1)
            ctrTablIndex.Add(Me.CtrlSalesPerson.CtrlCmdSearch, 2)

            ctrTablIndex.Add(Me.grdSOItems, 1)

            '  ctrTablIndex.Add(Me.C1Sizer2, 2)
            ctrTablIndex.Add(Me.CtrlBtnStockCheck, 3)
            ctrTablIndex.Add(Me.CtrlBtnAddExtraCost, 4)
            ctrTablIndex.Add(Me.CtrlBtnReturn, 5)

            SetFormTabIndex(ctrTablIndex:=ctrTablIndex)
            Me.grdSOItems.KeyActionTab = C1.Win.C1FlexGrid.KeyActionEnum.None
            Me.TabSalesOrder.TabStop = False
            Me.C1Sizer3.TabStop = False
            '  C1Sizer2.TabStop = False
            Me.TabPageInvoiceDetails.TabStop = False
            Me.TabPageItemDetails.TabStop = False
            Me.TabPageItemDetailsReturn.TabStop = False

            '---- Set Tab Index END 
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Sub

    Private Sub frmPCNSalesOrderUpdate_Resize(sender As Object, e As EventArgs) Handles Me.Resize
        TableLayoutPanel1.Width = Me.Width
    End Sub



    Private Sub frmNSalesOrderUpdate_Shown(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Shown
        'CtrlSalesInfo.CtrlTxtOrderNo.TabIndex = 0
        'CtrlSalesInfo.Focus()
        'CtrlSalesInfo.CtrlTxtOrderNo.TabIndex = 1
        'CtrlSalesInfo.CtrlTxtOrderNo.Focus()
    End Sub

    ''' <summary>
    ''' Resize DataGrid for Display Items Details
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub TabPageItemDetails_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPageItemDetails.Resize
        GridWidth = 0
        GridHeight = 0

        grdSOItems.Width = TabSalesOrder.TabPages(0).Width - 3
        grdSOItems.Height = TabSalesOrder.TabPages(0).Height - 3
        GridWidth = (TabSalesOrder.TabPages(0).Width * 1) / 100
        GridHeight = (TabSalesOrder.TabPages(0).Height * 1) / 100

        grdSOItems.Cols(0).WidthDisplay = GridWidth * 2.27
        grdSOItems.Cols(1).WidthDisplay = GridWidth * 11.35
        grdSOItems.Cols(2).WidthDisplay = GridWidth * 17.65
        grdSOItems.Cols(3).WidthDisplay = GridWidth * 6.31
        grdSOItems.Cols(4).WidthDisplay = GridWidth * 8.83
        grdSOItems.Cols(5).WidthDisplay = GridWidth * 10.09
        grdSOItems.Cols(6).WidthDisplay = GridWidth * 7.57
        grdSOItems.Cols(7).WidthDisplay = GridWidth * 7.57
        grdSOItems.Cols(8).WidthDisplay = GridWidth * 8.83
        grdSOItems.Cols(9).WidthDisplay = GridWidth * 11.98

        grdSOItems.Refresh()
    End Sub

    ''' <summary>
    ''' Resize DataGrid for Display Items Details
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub TabPageItemDetailsReturn_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPageItemDetailsReturn.Resize
        GridWidth = 0
        GridHeight = 0

        grdSOItemRetuns.Width = TabSalesOrder.TabPages(1).Width - 3
        grdSOItemRetuns.Height = TabSalesOrder.TabPages(1).Height - 3
        GridWidth = (TabSalesOrder.TabPages(1).Width * 1) / 100
        GridHeight = (TabSalesOrder.TabPages(1).Height * 1) / 100

        grdSOItemRetuns.Cols(0).WidthDisplay = GridWidth * 2.27
        grdSOItemRetuns.Cols(1).WidthDisplay = GridWidth * 11.35
        grdSOItemRetuns.Cols(2).WidthDisplay = GridWidth * 17.65
        grdSOItemRetuns.Cols(3).WidthDisplay = GridWidth * 6.31
        grdSOItemRetuns.Cols(4).WidthDisplay = GridWidth * 8.83
        grdSOItemRetuns.Cols(5).WidthDisplay = GridWidth * 10.09
        grdSOItemRetuns.Cols(6).WidthDisplay = GridWidth * 7.57
        grdSOItemRetuns.Cols(7).WidthDisplay = GridWidth * 7.57
        grdSOItemRetuns.Cols(8).WidthDisplay = GridWidth * 8.83
        grdSOItemRetuns.Cols(9).WidthDisplay = GridWidth * 11.98
        grdSOItemRetuns.Refresh()

    End Sub

    ''' <summary>
    ''' Resize DataGrid for Display Invoice Details
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub TabPageInvoiceDetails_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPageInvoiceDetails.Resize
        GridWidth = 0
        GridHeight = 0

        grdSOInvoice.Width = TabSalesOrder.TabPages(2).Width - 3
        grdSOInvoice.Height = TabSalesOrder.TabPages(2).Height - 3
        GridWidth = (TabSalesOrder.TabPages(2).Width * 1) / 100
        GridHeight = (TabSalesOrder.TabPages(2).Height * 1) / 100

        grdSOInvoice.Cols(1).WidthDisplay = GridWidth * 9.47
        grdSOInvoice.Cols(2).WidthDisplay = GridWidth * 12.18
        grdSOInvoice.Cols(3).WidthDisplay = GridWidth * 14.88
        grdSOInvoice.Cols(4).WidthDisplay = GridWidth * 11.5
        grdSOInvoice.Cols(5).WidthDisplay = GridWidth * 12.86
        grdSOInvoice.Cols(6).WidthDisplay = GridWidth * 11.5
        grdSOInvoice.Cols(7).WidthDisplay = GridWidth * 14.75
        grdSOInvoice.Cols(8).WidthDisplay = GridWidth * 12.86
        grdSOInvoice.Refresh()
    End Sub

    Private Sub dtpExpDeliveryDate_Leave(ByVal sender As Object, ByVal e As System.EventArgs) 'Handles CtrlSalesInfo.CtrlDtExpDelDate.Leave
        'CtrlSalesInfo.CtrlDtExpDelDate.ValidateText()
        'If isLeaved = True Then
        '    isLeaved = False
        '    Return
        'End If
        'If CtrlSalesInfo.CtrlDtExpDelDate.Value Is DBNull.Value Then
        '    ShowMessage(getValueByKey("SO032"), "SO032 - " & getValueByKey("CLAE04"))
        '    'ShowMessage("Delivery Date cannot be Blank.", "Delivery Date Information")
        '    CtrlSalesInfo.CtrlDtExpDelDate.Value = consDeliveryDate
        'Else
        '    If CtrlSalesInfo.CtrlDtExpDelDate.Value < vCurrentDate Then
        '        ShowMessage(getValueByKey("SO010"), "SO010 - " & getValueByKey("CLAE04"))
        '        'ShowMessage("Delivery Date cannot be backdated.", "Delivery Date Information")
        '        CtrlSalesInfo.CtrlDtExpDelDate.Value = consDeliveryDate
        '    Else
        '        vSalesOrderExpectedDeliveryDate = CtrlSalesInfo.CtrlDtExpDelDate.Value
        '        For Each drGridRow As C1.Win.C1FlexGrid.Row In grdSOItems.Rows
        '            If Not (drGridRow.Index = 0) Then
        '                drGridRow.Item("ExpDelDate") = CtrlSalesInfo.CtrlDtExpDelDate.Value
        '            End If
        '        Next
        '    End If
        'End If

    End Sub

    ''' <summary>
    ''' Set Languadge in Sales Order Window
    ''' </summary>
    ''' <remarks></remarks>

    Public Sub New()
        If clsDefaultConfiguration.TillOperationRequired = True And clsDefaultConfiguration.TillOpenDone = False Then
            ShowMessage(getValueByKey("SO052"), "SO052 - " & getValueByKey("CLAE04"))
            Me.Dispose()
            Me.Close()
            Exit Sub
        End If
        ' This call is required by the Windows Form Designer.
        ''Changed By Prasad
        'If CheckAuthorisation(clsAdmin.UserCode, "SOUpdation") = False Then

        '    ShowMessage(getValueByKey("SPCM001"), "SPCM001 - " & getValueByKey("CLAE04"))
        '    'ShowMessage("You have not Sufficent Rights", "Information")
        '    Me.Dispose()
        '    Me.Close()
        '    Exit Sub
        'End If

        InitializeComponent()
        Me.ClientSize = New System.Drawing.Size(gmdiclientwidth, gmdiclientheight)
        CtrlRbn1.pInitRbn()
        If Batchbarcode Is Nothing Then
            Batchbarcode = New List(Of SpectrumCommon.BtachbarcodeInfo)
            ReturnBatchbarcode = New List(Of SpectrumCommon.BtachbarcodeInfo)
        End If

        CtrlRbn1.DbtnF12.LargeImage = Global.Spectrum.My.Resources.Resources.price_change
        CtrlRbn1.DbtnF2.LargeImage = Global.Spectrum.My.Resources.Resources.change_qty

    End Sub

#End Region

    Private _IsScanningWoBarcodeSelected As Boolean

#Region "Add Items in Sales Order"

    ''' <summary>
    ''' Get the Item Details 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub BtnSearchItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 'Handles BtnSearchItem.Click
        Try
            'If (String.IsNullOrEmpty(vSalesNo) Or CtrlSalesInfo.CtrlTxtOrderNo.Text.Trim <> vSalesNo Or grdSOItems.Rows.Count <= 1) Then
            If (String.IsNullOrEmpty(vSalesNo) Or grdSOItems.Rows.Count <= 1) Then
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                Exit Sub
            End If
            Dim FetchData As New frmNItemSearch()
            FetchData.ShowDialog()

            Dim drSearch As DataRow = FetchData.ItemRow

            If Not (drSearch Is Nothing) Then
                Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                If foundRow.Count > 0 Then
                    ResetDocTax(True, dtDocTaxes)
                    dtDocTaxes.Clear()
                End If
                'If IsApplyPromotion = True Then
                '    RemoveApplyPromotionNew(dsScan, dsPackagingVar)

                'End If
                If Not (vEANList.IndexOf(drSearch("EAN").ToString) = -1) Then
                    IsNewArticle = False
                Else
                    IsNewArticle = True
                End If
                IsEditItem = False
                Dim ean As String = String.Empty
                If clsDefaultConfiguration.IsBatchManagementReq Then
                    ean = SearchAvailableBarcodes(drSearch.Item("ArticleCode").ToString())
                    If String.IsNullOrEmpty(ean) Then
                        'Dim EventType As Int32
                        'ShowMessage(getValueByKey("frmnsalesorder.scaningreqmsg"), getValueByKey("CLAE04"), EventType, True, getValueByKey("mod009"))
                        'If EventType = 1 Then
                        _IsScanningWoBarcodeSelected = True
                        ean = drSearch("EAN").ToString()
                        'Else
                        '    Exit Sub
                        'End If
                    End If
                End If
                If String.IsNullOrEmpty(ean) Then
                    ean = drSearch("EAN").ToString()
                End If
                CtrlSalesPerson.CtrlTxtBox.Text = ean
                txtSearchItem_Leave(ean, New KeyEventArgs(Keys.Enter))
                _IsScanningWoBarcodeSelected = False
                drItemsRow = Nothing
                CtrlSalesPerson.CtrlTxtBox.Text = ""

                TabPageItemDetails_Resize(sender, New System.EventArgs)
                fnGridColAutoSize(grdSOItems)
                GridItemSetting()
            End If

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub


    Private Function SearchAvailableBarcodes(ByRef articleCode As String) As String
        Dim barCode As String = String.Empty
        Dim objFrmBarcode As New frmSelectBarcode
        objFrmBarcode.ArticleCode = articleCode
        objFrmBarcode.ShowDialog()
        If objFrmBarcode.SelectedRow IsNot Nothing Then
            barCode = objFrmBarcode.SelectedRow.Cells("BatchBarcode").Value
            ArticleScanWithBatchBarcode = True
        Else
            ArticleScanWithBatchBarcode = False
        End If
        Return barCode
    End Function
    Private Sub AndroidSearchTextBox_Textchange(sender As Object, e As EventArgs)
        If ((vSalesNo = "" Or vSalesNo = String.Empty) AndAlso CtrlSalesPerson.AndroidSearchTextBox.Text <> String.Empty) Then
            ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
            'CtrlSalesPerson.CtrlTxtBox.Text = ""
            'CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected = False
            CtrlSalesPerson.AndroidSearchTextBox.Text = String.Empty
            Exit Sub
        End If
        If CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected Then
            CtrlSalesPerson.CtrlTxtBox.Text = CtrlSalesPerson.AndroidSearchTextBox.Text
        End If
    End Sub
    Private Sub txtSearchItem_textchange(sender As Object, e As EventArgs)
        If Not String.IsNullOrEmpty(CtrlSalesPerson.CtrlTxtBox.Text) AndAlso CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected Then
            CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected = False
            'SendKeys.Send("{Enter}")
            Dim eKeyDown = New System.Windows.Forms.KeyEventArgs(Keys.Enter)
            Call txtSearchItem_Leave(sender, eKeyDown)
        End If
    End Sub
    Private Sub AndroidSearchTextBox_Leave(ByVal sender As Object, ByVal e As System.EventArgs) 'Handles txtSearchItem.Leave
        CtrlSalesPerson.AndroidSearchTextBox.Text = ""

    End Sub
    ''' <summary>
    ''' Get the Item Details 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub txtSearchItem_Leave(ByVal sender As Object, ByVal e As EventArgs) 'Handles CtrlSalesPerson.CtrlTxtBox.Leave
        Try

            If (vSalesNo = "" Or vSalesNo = String.Empty) Then ' AndAlso CtrlSalesPerson.AndroidSearchTextBox.Text <> String.Empty) 
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                CtrlSalesPerson.CtrlTxtBox.Text = ""
                CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected = False
                CtrlSalesPerson.AndroidSearchTextBox.Text = ""
                Exit Sub
            End If
            CtrlSalesPerson.CtrlTxtBox.Text = CtrlSalesPerson.CtrlTxtBox.Text.ToString().Split(" ")(0)
            If CtrlSalesPerson.CtrlTxtBox.Text.Length >= 1 Then
                If clsDefaultConfiguration.IsBatchManagementReq Then
                    Dim articleCode As String = objItemSch.GetArticleCodeFromBarcode(clsAdmin.SiteCode, CtrlSalesPerson.CtrlTxtBox.Text.Trim)
                    If String.IsNullOrEmpty(articleCode) Then
                        articleCode = objItemSch.GetArticleCodeFromEAN(CtrlSalesPerson.CtrlTxtBox.Text.Trim)
                        If String.IsNullOrEmpty(articleCode) Then
                            articleCode = CtrlSalesPerson.CtrlTxtBox.Text.Trim
                        End If
                        Dim barCode As String
                        If _IsScanningWoBarcodeSelected = False Then
                            barCode = SearchAvailableBarcodes(articleCode)
                        End If

                        ArticleScanWithBatchBarcode = False

                        If String.IsNullOrEmpty(barCode) AndAlso _IsScanningWoBarcodeSelected = False Then
                            'Dim EventType As Int32
                            'ShowMessage(getValueByKey("frmnsalesorder.scaningreqmsg"), getValueByKey("CLAE04"), EventType, True, getValueByKey("mod009"))
                            'If EventType = 1 Then
                            dtItemSch = objItemSch.GetEANData(clsAdmin.SiteCode, articleCode, clsAdmin.LangCode, "", dtItemScanData)
                            For Each item In dtItemSch.Rows
                                item("BatchBarcode") = DBNull.Value
                            Next
                            'Else
                            '    Exit Sub
                            'End If
                        Else
                            dtItemSch = objItemSch.GetEANData(clsAdmin.SiteCode, articleCode, clsAdmin.LangCode, "", dtItemScanData, False, True, barCode)
                            If Batchbarcode IsNot Nothing AndAlso Not String.IsNullOrEmpty(barCode) Then
                                If Batchbarcode.Any(Function(w) w.BatchBarcode = barCode) Then
                                    Batchbarcode.Find(Function(w) w.BatchBarcode = barCode).Qty = Batchbarcode.Find(Function(w) w.BatchBarcode = barCode).Qty + 1
                                Else
                                    Dim dvEan As New DataView(dtItemSch, "Ean='" & CtrlSalesPerson.CtrlTxtBox.Text.Trim & "'", "", DataViewRowState.CurrentRows)
                                    If dvEan.Count > 0 Then
                                        Batchbarcode.Add(New SpectrumCommon.BtachbarcodeInfo() With {.ArticleCode = dvEan(0)("ArticleCode"), .BatchBarcode = barCode, .EAN = dvEan(0)("EAN"), .LineNO = vRowIndex, .Qty = 1, .Status = True, .ArticleName = dvEan(0)("DISCRIPTION")})
                                    Else
                                        Batchbarcode.Add(New SpectrumCommon.BtachbarcodeInfo() With {.ArticleCode = dtItemSch(0)("ArticleCode"), .BatchBarcode = barCode, .EAN = dtItemSch(0)("EAN"), .LineNO = vRowIndex, .Qty = 1, .Status = True, .ArticleName = dtItemSch(0)("DISCRIPTION")})
                                    End If
                                End If
                                For Each item In dtItemSch.Rows
                                    item("BatchBarcode") = DBNull.Value
                                Next
                                ArticleScanWithBatchBarcode = True
                            End If
                        End If
                    Else
                        dtItemSch = objItemSch.GetEANData(clsAdmin.SiteCode, articleCode, clsAdmin.LangCode, "", dtItemScanData, False, True, CtrlSalesPerson.CtrlTxtBox.Text.Trim)

                        If Batchbarcode IsNot Nothing AndAlso Not String.IsNullOrEmpty(CtrlSalesPerson.CtrlTxtBox.Text.Trim) Then
                            If Batchbarcode.Any(Function(w) w.BatchBarcode = CtrlSalesPerson.CtrlTxtBox.Text.Trim) Then
                                Batchbarcode.Find(Function(w) w.BatchBarcode = CtrlSalesPerson.CtrlTxtBox.Text.Trim).Qty = Batchbarcode.Find(Function(w) w.BatchBarcode = CtrlSalesPerson.CtrlTxtBox.Text.Trim).Qty + 1
                            Else
                                Batchbarcode.Add(New SpectrumCommon.BtachbarcodeInfo() With {.ArticleCode = dtItemSch(0)("ArticleCode"), .BatchBarcode = CtrlSalesPerson.CtrlTxtBox.Text.Trim, .EAN = dtItemSch(0)("EAN"), .LineNO = vRowIndex, .Qty = 1, .Status = True, .ArticleName = dtItemSch(0)("DISCRIPTION")})
                            End If
                            For Each item In dtItemSch.Rows
                                item("BatchBarcode") = DBNull.Value
                            Next

                            ArticleScanWithBatchBarcode = True
                        End If
                    End If
                Else
                    dtItemSch = objItemSch.GetEANData(clsAdmin.SiteCode, CtrlSalesPerson.CtrlTxtBox.Text.Trim, clsAdmin.LangCode, "", dtItemScanData)
                    For Each item In dtItemSch.Rows
                        item("BatchBarcode") = DBNull.Value
                    Next

                    ArticleScanWithBatchBarcode = False
                End If
                If clsDefaultConfiguration.customerwisepricemanagement Then
                    Dim CustWisePrice As DataTable = objComn.GetCustomerWisePriceForSO(clsAdmin.SiteCode, CustomerNo, CtrlSalesPerson.CtrlTxtBox.Text.Trim)
                    If Not CustWisePrice Is Nothing And CustWisePrice.Rows.Count > 0 Then
                        For Each DrRow In dtItemSch.Rows
                            DrRow("SellingPrice") = CustWisePrice.Rows(0)(0)
                        Next
                    End If
                End If
                If dtItemSch Is Nothing Or dtItemSch.Rows.Count < 1 Then
                    ShowMessage(getValueByKey("SO055"), "SO055 - " & getValueByKey("CLAE04"))
                    CtrlSalesPerson.CtrlTxtBox.Text = ""
                    Exit Sub
                End If
                'Changed by rama on sep 16 sep 2009 for bug no 1107
                If dtItemSch.Rows.Count > 1 Then
                    Dim dvEan As New DataView(dtItemSch, "Ean='" & CtrlSalesPerson.CtrlTxtBox.Text & "'", "", DataViewRowState.CurrentRows)
                    If dvEan.Count > 0 Then
                        dvEan.RowFilter = "EAN<>'" & CtrlSalesPerson.CtrlTxtBox.Text & "'"
                        If dvEan.Count > 0 Then
                            dvEan.AllowDelete = True
                            For Each dr As DataRowView In dvEan
                                dr.Delete()
                            Next
                            dtItemSch.AcceptChanges()
                        End If
                    Else
                        Dim dv As New DataView(dtItemSch, "DefaultEAN <> 1", "", DataViewRowState.CurrentRows)
                        'Dim dv As New DataView(dtItemSch, "EanType<>'" & EanType & "'", "", DataViewRowState.CurrentRows)
                        If dv.Count > 0 Then
                            dv.AllowDelete = True
                            For Each dr As DataRowView In dv
                                dr.Delete()
                            Next
                            dtItemSch.AcceptChanges()
                            If dtItemSch.Rows.Count <= 0 Then
                                ShowMessage(getValueByKey("SO056"), "SO056 - " & getValueByKey("CLAE04"))
                            End If
                            If dtItemSch.Rows.Count > 1 Then
                                Dim objEan As New frmNCommonView
                                objEan.SetData = dtItemSch
                                Array.Resize(objEan.ColumnName, dtItemSch.Columns.Count)
                                Dim i As Integer = 0
                                For Each col As DataColumn In dtItemSch.Columns
                                    If col.ColumnName <> "EAN" And col.ColumnName <> "ARTICLECODE" And col.ColumnName <> "SELLINGPRICE" Then
                                        objEan.ColumnName(i) = col.ColumnName
                                    End If
                                    i = i + 1
                                Next
                                objEan.ShowDialog()
                                Dim dtTemp As DataTable = dtItemSch.Clone()
                                dtTemp.ImportRow(objEan.GetResultRow)
                                dtItemSch.Clear()
                                CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected = False
                                CtrlSalesPerson.AndroidSearchTextBox.Text = ""
                                dtItemSch = dtTemp
                                'For i = dtItemSch.Rows.Count - 1 To 1 Step -1
                                '    dtItemSch.Rows.RemoveAt(i)
                                'Next
                                'If Not objEan.search Is Nothing Then
                                '    dtItemSch.Rows(0)("SellingPrice") = objEan.search(5)
                                '    dtItemSch.Rows(0)("EAN") = objEan.search(0)
                                'Else
                                '    Exit Sub
                                'End If
                            End If
                        End If
                    End If
                End If
                '---
                If dtItemSch.Rows.Count > 0 Then
                    If dtItemSch.Rows(0)("FreezeSB") = True Then
                        ShowMessage(getValueByKey("SO079"), "SO079 - " & getValueByKey("CLAE04"))
                        Exit Sub
                    End If
                End If
                If dtItemSch.Rows.Count > 1 Then
                    Dim objPrice As New frmNCommonView
                    objPrice.SetData = dtItemSch
                    objPrice.ShowDialog()

                    If Not objPrice.search Is Nothing Then
                        CtrlSalesPerson.CtrlTxtBox.Text = objPrice.search(5)

                        drItemSch = dtItemSch.Select("SELLINGPRICE='" & ConvertToEnglish(objPrice.search(7)) & "'")(0)
                    End If
                Else
                    If dtItemSch.Rows.Count = 1 Then
                        drItemSch = dtItemSch.Rows(0)
                        IsMRPOpen = drItemSch("IsMRPOpen")
                    End If
                End If
                If dtItemSch.Rows.Count > 1 AndAlso Not (vEANList.IndexOf(drItemSch("EAN").ToString) = -1) Then
                    IsNewArticle = False
                Else
                    IsNewArticle = True
                End If

                If Not drItemSch Is Nothing AndAlso drItemSch.RowState <> DataRowState.Detached Then
                    SetScanItemInSO(drItemSch)
                End If
                If IsApplyPromotion Then
                    RemoveApplyPromotionNew(dsScan, dsPackagingVar)
                    RefreshLoadSOData()
                End If
                '' Reset Tax before add discount Changes By PC tax Issue Added by Ketan
                Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                If foundRow.Count > 0 Then
                    ResetDocTax(True, dtDocTaxes)
                    dtDocTaxes.Rows.Clear()
                End If
                dtItemSch.Clear()
                CtrlSalesPerson.CtrlTxtBox.Text = ""
                CtrlSalesPerson.AndroidSearchTextBox.IsItemSelected = False
                CtrlSalesPerson.AndroidSearchTextBox.Text = ""
                IsMRPOpen = False
                ArticleScanWithBatchBarcode = False
                CtrlSalesPerson.AndroidSearchTextBox.Focus()
                CalculateSalesOrderSummory(dsScan)
                GridItemSetting()
                'AddButtonControlInGridW(1)
                If clsDefaultConfiguration.IsNewSalesOrder Then
                    '  BindTextValue() '$$ Ketan By GST PC Changes 
                End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Sub
    Public Sub BindTextValue()
        Try
            Dim total As Double = 0
            Dim totalGross As Double = 0
            Dim TotalAdvmount As Double = 0 '##
            Dim TotDiscount As Double = 0
            Dim obCombo As New clsArticleCombo
            If grdSOItems.Rows.Count > 1 Then
                For i = 1 To grdSOItems.Rows.Count - 1
                    ' Dim dtTax As DataTable = obCombo.getTaxData(grdScanItem.Rows(i)("ArticleCode"), clsAdmin.SiteCode, "SO201")  ''Dim Tax As Double 
                    ' Dim Tax As Double = CDbl(dtTax.Compute("Sum(TaxValue)", ""))
                    'total = total + (((CDbl(grdScanItem.Rows(i)("SellingPrice")) * CDbl(grdScanItem.Rows(i)("Quantity"))) - CDbl(grdScanItem.Rows(i)("Discount"))) * (CDbl(lblArticleCombo.Rows(0)("Tax")) / 100))
                    total = total + Convert.ToDouble(grdSOItems.Rows(i)("TotalTaxAmt"))
                    TotDiscount = TotDiscount + Convert.ToDouble(grdSOItems.Rows(i)("Discount"))
                    totalGross = totalGross + (CDbl(grdSOItems.Rows(i)("SellingPrice")) * CDbl(grdSOItems.Rows(i)("Quantity")))
                    If dgDeliveryLocation.Rows.Count > i Then '##
                        'TotalAdvmount = TotalAdvmount + (CDbl(grdScanItem.Rows(i)("SellingPrice")) - (CDbl(grdScanItem.Rows(i)("Discount")) / grdScanItem.Rows(i)("Quantity")) + (CDbl(grdScanItem.Rows(i)("TotalTaxAmt")) / CDbl(grdScanItem.Rows(i)("Quantity")) * CDbl(dgDeliveryLocation.Rows(i)("PickUpQty")))) '' $$ added by nikhl
                        TotalAdvmount = TotalAdvmount + (((CDbl(grdSOItems.Rows(i)("SellingPrice")) - (CDbl(grdSOItems.Rows(i)("Discount")) / grdSOItems.Rows(i)("Quantity")) + (CDbl(grdSOItems.Rows(i)("TotalTaxAmt")) / CDbl(grdSOItems.Rows(i)("Quantity")))) * CDbl(dgDeliveryLocation.Rows(i)("PickUpQty"))))
                    End If
                Next
            End If
            CtrllblTaxAmt.Text = Math.Round(total, 2)
            CtrllblGrossAmt.Text = totalGross.ToString
            If CtrllblDiscAmt.Text = "" Then
                CtrllblDiscAmt.Text = "0"
            End If
            If String.IsNullOrEmpty(CtrllblTaxAmt.Text.ToString.Trim) Then
                CtrllblTaxAmt.Text = "0"
            End If

            If String.IsNullOrEmpty(CtrllblDiscAmt.Text.ToString.Trim) Then
                CtrllblDiscAmt.Text = "0"
            End If

            CtrllblDiscAmt.Text = Math.Round(TotDiscount)
            CtrllblNetAmt.Text = Math.Round(((CDbl(CtrllblGrossAmt.Text) - CDbl(CtrllblDiscAmt.Text)) + CDbl(CtrllblTaxAmt.Text)))
            CtrllblMinAdv.Text = FormatNumber(TotalAdvmount, 0) '##


        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    'Private Sub txtSearchItem_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
    '    Try
    '        If e.KeyCode = Keys.Enter Then
    '            txtSearchItem_Leave(sender, New System.EventArgs)
    '        End If
    '        'If CtrlSalesPerson.CtrlTxtBox.Text.Length > 1 Then
    '        '    dtItemSch = objItemSch.GetEANData(clsAdmin.SiteCode, CtrlSalesPerson.CtrlTxtBox.Text)

    '        '    If dtItemSch.Rows.Count > 1 Then
    '        '        Dim objPrice As New frmNCommonView
    '        '        objPrice.SetData = dtItemSch
    '        '        objPrice.ShowDialog()

    '        '        If Not objPrice.search Is Nothing Then
    '        '            CtrlSalesPerson.CtrlTxtBox.Text = objPrice.search(5)

    '        '            drItemSch = dtItemSch.Select("SELLINGPRICE='" & objPrice.search(5) & "'")(0)
    '        '        End If
    '        '    Else
    '        '        If dtItemSch.Rows.Count = 1 Then
    '        '            drItemSch = dtItemSch.Rows(0)
    '        '            IsMRPOpen = drItemSch("IsMRPOpen")
    '        '        End If
    '        '    End If
    '        '    If Not (vEANList.IndexOf(drItemSch("EAN").ToString) = -1) Then
    '        '        IsNewArticle = False
    '        '    Else
    '        '        IsNewArticle = True
    '        '    End If
    '        '    If drItemSch.RowState <> DataRowState.Detached Then
    '        '        SetScanItemInSO(drItemSch)
    '        '    End If


    '        '    dtItemSch.Clear()
    '        '    CtrlSalesPerson.CtrlTxtBox.Text = ""
    '        '    IsMRPOpen = False
    '        '    CtrlSalesPerson.CtrlTxtBox.Focus()
    '        '    GridItemSetting()
    '        'End If

    '    Catch ex As Exception
    '        ShowMessage(ex.Message, "Add Selected Item in Grid...")
    '    End Try

    'End Sub

    ''' <summary>
    ''' Get the Item Details 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub txtSearchItem_PreviewKeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.PreviewKeyDownEventArgs) 'Handles CtrlSalesPerson.CtrlTxtBox.PreviewKeyDown
        If e.KeyCode = Keys.Enter AndAlso Not (CtrlSalesPerson.CtrlTxtBox.Text = String.Empty) Then
            txtSearchItem_Leave(sender, New System.EventArgs)
            'CtrlSalesPerson.CtrlTxtBox.Focus()
            CtrlSalesPerson.AndroidSearchTextBox.Focus()
        End If
    End Sub

    ''' <summary>
    ''' Update Scan Article Quantity, PickupQty and Delivery Date
    ''' </summary>
    ''' <param name="sender">Selected Row</param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub grdSOItems_AfterEdit(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.RowColEventArgs) Handles grdSOItems.AfterEdit
        Try

            If grdSOItems.Row = -1 Then Exit Sub
            Dim CurrentCell As Integer = e.Col
            Dim CurrentRow As Integer = grdSOItems.Row '-- e.Row
            Dim UpdatePackagingIndex As Integer = IIf(grdSOItems.Item(CurrentRow, "PackagingIndex") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingIndex"))
            Dim result As DataRow() = dsScan.Tables(0).Select("PackagingIndex='" + UpdatePackagingIndex.ToString() + "' ")
            Dim resultPackVar As DataRow() = dsPackagingVar.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString() + "' ")
            Dim IsComboRow As String = IIf(grdSOItems.Item(CurrentRow, "IsCombo") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "IsCombo"))
            Dim resultPackDelivery As DataRow() = dsPackagingDelivery.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString() + "' ")


            If grdSOItems.Cols(CurrentCell).Name = "PackagingMaterial" AndAlso IsComboRow = "True" Then
                Dim dtCheck As New DataTable
                dtCheck = dtPackagingBox
                Dim PackMaterailName As String = IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial"))
                Dim resultCombo As DataRow() = dtPackagingBox.Select("ArticleShortName='" + PackMaterailName + "' ")
                If resultCombo.Length > 0 Then
                    dtCheck = objItemSch.GetEANData(clsAdmin.SiteCode, resultCombo(0)("articleCode"), clsAdmin.LangCode, "")
                End If


                ''update dsscan and packvar for combo
                Dim resultDsScan As DataRow() = dsScan.Tables(0).Select("PackagingIndex='" + UpdatePackagingIndex.ToString() + "' ")
                If result.Length > 0 Then
                    'dtCheck = objItemSch.GetEANData(clsAdmin.SiteCode, resultCombo(0)("articleCode"), clsAdmin.LangCode, "")
                    result(0)("PackagingMaterial") = IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial"))
                    resultPackVar(0)("PckgMaterial") = IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial"))
                    '  result(0)("SellingPrice") = dtCheck(0)("SellingPrice") '##
                    result(0)("EAN") = dtCheck(0)("EAN")
                    result(0)("articlecode") = dtCheck(0)("articlecode")
                    '     resultPackVar(0)("SellingPrice") = dtCheck(0)("SellingPrice")
                    resultPackVar(0)("EAN") = dtCheck(0)("EAN")
                    '     result(0)("Discount") = 0 '##
                    '  result(0)("NetAmount") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))) '##
                    '   result(0)("GrossAmt") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))) '##

                    '       resultPackVar(0)("Discount") = 0 '##
                    resultPackVar(0)("articlecode") = dtCheck(0)("articlecode")
                    '    resultPackVar(0)("NetAmount") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))) '##
                    '    resultPackVar(0)("GrossAmt") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity")))
                    '    resultPackVar(0)("GrossAmount") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity")))
                    If resultPackDelivery.Length > 0 Then
                        For i = 1 To resultPackDelivery.Length
                            resultPackDelivery(i - 1)("EAN") = dtCheck(0)("EAN")
                            resultPackDelivery(i - 1)("articlecode") = dtCheck(0)("articlecode")
                        Next
                    End If
                End If
                If resultPackVar.Length > 0 Then
                    resultPackVar(0)("PckgMaterial") = IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial"))
                    '   resultPackVar(0)("SellingPrice") = dtCheck(0)("SellingPrice")
                    'resultPackVar(0)("Discount") = 0  '## vipin
                    '   resultPackVar(0)("NetAmount") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))) '##
                    resultPackVar(0)("EAN") = dtCheck(0)("EAN")
                    '   resultPackVar(0)("GrossAmt") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity")))
                    '  resultPackVar(0)("GrossAmount") = dtCheck(0)("SellingPrice") * (IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity")))
                    resultPackVar(0)("articlecode") = dtCheck(0)("articlecode")
                End If


                ResetNewTax(True, dtDocTaxes)
                dsScan.AcceptChanges()
                dsPackagingVar.AcceptChanges()
                dsPackagingDelivery.AcceptChanges()
                ''
            Else
                If grdSOItems.Cols(CurrentCell).Name = "PackagingMaterial" Then
                    If result.Length > 0 Then
                        result(0)("PackagingMaterial") = IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial"))
                        dsScan.AcceptChanges()
                    End If


                    If dsPackagingVar.Tables(0).Rows.Count > 0 Then
                        Dim resultVar As DataRow() = dsPackagingVar.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString() + "' ")
                        resultVar(0)("pckgMaterial") = IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial"))
                        dsPackagingVar.AcceptChanges()
                    End If
                    'MessageBox.Show(IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial")))
                End If
            End If



            If grdSOItems.Cols(CurrentCell).Name = "PackagingType" Then
                If result.Length > 0 Then
                    result(0)("PackagingType") = IIf(grdSOItems.Item(CurrentRow, "PackagingType") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingType"))
                    dsScan.AcceptChanges()
                End If



                If resultPackVar.Length > 0 Then
                    resultPackVar(0)("pckgType") = IIf(grdSOItems.Item(CurrentRow, "PackagingType") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingType"))
                    dsPackagingVar.AcceptChanges()
                End If

                'MessageBox.Show(IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial")))
            End If
            If grdSOItems.Cols(CurrentCell).Name = "PckgSize" Then
                IsPromotionApplyFromFrontEnd = False
                Dim packSize = IIf(grdSOItems.Item(CurrentRow, "PckgSize") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgSize"))
                Dim cQty = IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))
                '------------------------------------
                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                    If grdSOItems.Item(CurrentRow, "UOM") = "KGS" Then
                        If packSize > 0 Then
                            Dim var = cQty / packSize
                            Dim varQty = var.ToString.Split(".")
                            If varQty.Length = 2 Then
                                If varQty(1) > 0 Then
                                    ShowMessage("Package Quantity should not be in decimal", "Information")
                                    grdSOItems.Item(CurrentRow, "PckgSize") = 0
                                    grdSOItems.Item(CurrentRow, "PckgQty") = 0
                                    If result.Length > 0 Then
                                        result(0)("PckgSize") = 0
                                        result(0)("PckgQty") = 0
                                    End If
                                    If resultPackVar.Length > 0 Then
                                        resultPackVar(0)("PckgSize") = 0
                                        resultPackVar(0)("PckgQty") = 0
                                    End If
                                    dsScan.AcceptChanges()
                                    dsPackagingVar.AcceptChanges()
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If
                '------------------------------------
                If IsApplyPromotion = True Then
                    RemoveApplyPromotionNew(dsScan, dsPackagingVar)

                End If
                Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                If foundRow.Count > 0 Then
                    ResetDocTax(True, dtDocTaxes)
                    dtDocTaxes.Rows.Clear()
                End If

                If result.Length > 0 Then
                    result(0)("PckgSize") = packSize
                    resultPackVar(0)("PckgSize") = packSize
                    dsScan.AcceptChanges()
                End If


                If resultPackVar.Length > 0 Then
                    resultPackVar(0)("PckgSize") = packSize
                End If
                'Dim cQty = IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))
                Dim cPckSize = packSize
                Dim resultDisc As DataRow() = dtPickUpDiscGrid.Select(" pkgLineNo='" + UpdatePackagingIndex.ToString() + "'")
                'Dim cPckQty = IIf(grdSOItems.Item(CurrentRow, "PckgQty") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgQty"))
                If cQty > 0 AndAlso cPckSize > 0 Then
                    If result.Length > 0 Then
                        result(0)("PckgQty") = cQty / cPckSize
                        If resultDisc.Length > 0 Then
                            result(0)("NetAmount") = Math.Round(IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity") + result(0)("TotalTaxAmt") - resultDisc(0)("DiscountAmount"), 3)
                        Else
                            result(0)("NetAmount") = Math.Round(IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity") + result(0)("TotalTaxAmt"), 3)
                        End If
                        result(0)("GrossAmt") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity")
                        ' result(0)("GrossAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity")

                    End If
                    resultPackVar(0)("PckgQty") = cQty / cPckSize
                    If resultDisc.Length > 0 Then
                        resultPackVar(0)("NetAmount") = Math.Round(IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity") + resultPackVar(0)("TotalTaxAmount") - resultDisc(0)("DiscountAmount"), 3)
                    Else
                        resultPackVar(0)("NetAmount") = Math.Round(IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity") + resultPackVar(0)("TotalTaxAmount"), 3)
                    End If
                    resultPackVar(0)("GrossAmt") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity")
                    resultPackVar(0)("GrossAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity")

                End If
                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                    If grdSOItems.Item(CurrentRow, "ArticleType") = "Combo" Then
                        If result.Length > 0 Then
                            result(0)("PckgQty") = 0
                        End If

                        resultPackVar(0)("PckgQty") = 0
                    End If
                End If
                If packSize = 0 Then
                    If result.Length > 0 Then
                        result(0)("PckgQty") = 0
                    End If
                    resultPackVar(0)("PckgQty") = 0
                End If

                dsScan.AcceptChanges()

                dsPackagingVar.AcceptChanges()
                'MessageBox.Show(IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial")))
            End If
            If grdSOItems.Cols(CurrentCell).Name = "PckgQty" Then
                Dim packQty = IIf(grdSOItems.Item(CurrentRow, "PckgQty") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgQty"))
                '------------
                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                    If grdSOItems.Item(CurrentRow, "UOM") = "KGS" Then
                        Dim pkgQty = packQty.ToString.Split(".")
                        If pkgQty.Length = 2 Then
                            If pkgQty(1) > 0 Then
                                ShowMessage("Package Quantity should not be in decimal", "Information")
                                grdSOItems.Item(CurrentRow, "PckgSize") = 0
                                grdSOItems.Item(CurrentRow, "PckgQty") = 0
                                If result.Length > 0 Then
                                    result(0)("PckgSize") = 0
                                    result(0)("PckgQty") = 0
                                End If
                                If resultPackVar.Length > 0 Then
                                    resultPackVar(0)("PckgSize") = 0
                                    resultPackVar(0)("PckgQty") = 0
                                End If
                                dsScan.AcceptChanges()
                                dsPackagingVar.AcceptChanges()
                                Exit Sub
                            End If
                        End If
                    End If
                End If
                '----------------
                If IsApplyPromotion = True Then
                    RemoveApplyPromotionNew(dsScan, dsPackagingVar)
                End If
                Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                If foundRow.Count > 0 Then
                    ResetDocTax(True, dtDocTaxes)
                    dtDocTaxes.Rows.Clear()
                End If

                If result.Length > 0 Then
                    result(0)("PckgQty") = packQty
                    resultPackVar(0)("PckgQty") = packQty
                    dsScan.AcceptChanges()
                End If
                If resultPackVar.Length > 0 Then
                    resultPackVar(0)("PckgQty") = packQty
                End If

                'Dim cQty = IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))
                Dim cPckSize = IIf(grdSOItems.Item(CurrentRow, "PckgSize") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgSize"))
                Dim cPckQty = packQty
                If cPckQty > 0 AndAlso cPckSize > 0 Then
                    If result.Length > 0 Then
                        result(0)("Quantity") = cPckQty * cPckSize
                        'result(0)("NetAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity")
                        'result(0)("GrossAmt") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity")
                        ''result(0)("GrossAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * result(0)("Quantity")

                    End If
                    resultPackVar(0)("Quantity") = cPckQty * cPckSize
                    'resultPackVar(0)("NetAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity")
                    'resultPackVar(0)("GrossAmt") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity")
                    'resultPackVar(0)("GrossAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultPackVar(0)("Quantity")
                    GoTo QtyUpdate
                End If


                dsScan.AcceptChanges()

                dsPackagingVar.AcceptChanges()


                'MessageBox.Show(IIf(grdSOItems.Item(CurrentRow, "PackagingMaterial") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PackagingMaterial")))
            End If
            Dim ComboSrNo = grdSOItems.Item(grdSOItems.Row, "RowIndex")
            Dim addCondtionRow As String = String.Empty
            If DtSoBulkComboHdr.Rows.Count > 0 Then
                Dim drHdr() = DtSoBulkComboHdr.Select("ComboSrNo=" & ComboSrNo)
                If drHdr.Count > 0 Then
                    addCondtionRow = " AND RowIndex =" & ComboSrNo
                End If
            End If
            'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
            '    dvCurrentQty = New DataView(dsScan.Tables(0), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode = '" & grdSOItems.Item(CurrentRow, "BatchBarcode") & "'" & addCondtionRow, "", DataViewRowState.CurrentRows)
            'Else
            dvCurrentQty = New DataView(dsScan.Tables(0), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "'" & addCondtionRow, "", DataViewRowState.CurrentRows) ' & "' And BatchBarcode IS NULL"
            'End If
            'Dim CurrentQty As Double = dvCurrentQty.ToTable.Rows(0).Item("Quantity")

            'If grdSOItems.Cols(CurrentCell).Name = "Quantity" Then  commented to correct get netamount calculate after price change
            If grdSOItems.Cols(CurrentCell).Name = "Quantity" Or grdSOItems.Cols(CurrentCell).Name = "SellingPrice" Then
QtyUpdate:
                IsPromotionApplyFromFrontEnd = False
                ComboSrNo = grdSOItems.Item(grdSOItems.Row, "RowIndex")
                Try

                    Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                    If foundRow.Count > 0 Then
                        ResetDocTax(True, dtDocTaxes)
                        dtDocTaxes.Rows.Clear()
                    End If


                    Dim vOrderQty As Double = IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Quantity"))
                    Dim vPickupQty As Double = IIf(grdSOItems.Item(CurrentRow, "PickupQty") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PickupQty"))
                    Dim vDeliveredQty As Double = IIf(grdSOItems.Item(CurrentRow, "DeliveredQty") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "DeliveredQty"))
                    Dim vStock As Double = IIf(grdSOItems.Item(CurrentRow, "Stock") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "Stock"))

                    Dim cQty = vOrderQty
                    Dim cPckSize = IIf(grdSOItems.Item(CurrentRow, "PckgSize") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgSize"))
                    '-----------------------------------
                    If clsDefaultConfiguration.PackageFiedlsAllowed Then
                        If grdSOItems.Item(CurrentRow, "UOM") = "KGS" Then
                            If cPckSize > 0 Then
                                Dim var = cQty / cPckSize
                                Dim varQty = var.ToString.Split(".")
                                If varQty.Length = 2 Then
                                    If varQty(1) > 0 Then
                                        ShowMessage("Package Quantity should not be in decimal", "Information")
                                        grdSOItems.Item(CurrentRow, "Quantity") = 1
                                        grdSOItems.Item(CurrentRow, "PckgSize") = 0
                                        grdSOItems.Item(CurrentRow, "PckgQty") = 0
                                        If result.Length > 0 Then
                                            result(0)("PckgSize") = 0
                                            result(0)("PckgQty") = 0
                                        End If
                                        If resultPackVar.Length > 0 Then
                                            resultPackVar(0)("PckgSize") = 0
                                            resultPackVar(0)("PckgQty") = 0
                                        End If
                                        dsScan.AcceptChanges()
                                        dsPackagingVar.AcceptChanges()
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If

                    If result.Length > 0 Then
                        If vOrderQty < (vPickupQty + vDeliveredQty) Then  '## vipin
                            result(0)("PickUpQty") = 0
                            result(0)("MinPayAmt") = 0
                            result(0)("TotalPickUpAmt") = 0
                        End If
                        If CInt(vPickupQty) = 0 Then  '## 
                            result(0)("PickUpQty") = 0
                            result(0)("MinPayAmt") = 0
                            result(0)("TotalPickUpAmt") = 0
                        End If
                    End If
                    '-----------------------------------
                    If Not (vOrderQty > 0) Then
                        ShowMessage(getValueByKey("SO005"), "SO005 - " & getValueByKey("CLAE04"))
                        'ShowMessage("Order Quantity cannot less than 1.", "Order Quantity Information")
                        grdSOItems.Item(CurrentRow, "Quantity") = 1
                        Exit Sub
                    ElseIf Not (vOrderQty >= vPickupQty) Then
                        ShowMessage(getValueByKey("SO006"), "SO006 - " & getValueByKey("CLAE04"))
                        'ShowMessage("Order Quantity cannot less than PickUp Quantity.", "Order Quantity Information")
                        grdSOItems.Rows(e.Row)("Quantity") = _iArticleQtyBeforeChange
                        Exit Sub

                        'Rakesh-01.10.2013:7998-->Commented for Check article stock balance quantity
                        'ElseIf Not (vOrderQty <= vStock) AndAlso clsDefaultConfiguration.NegativeInventoryAllowed = False Then
                        '    ShowMessage(getValueByKey("SO007"), "SO007 - " & getValueByKey("CLAE04"))
                        '    'ShowMessage("Order Quantity cannot greater than Stock Quantity.", "Order Quantity Information")
                        '    grdSOItems.Item(CurrentRow, "Quantity") = CurrentQty
                        '    Exit Sub
                    End If
                    If Not (vOrderQty >= vDeliveredQty + vPickupQty) Then

                        ShowMessage(getValueByKey("SO033"), "SO033 - " & getValueByKey("CLAE04"))
                        'ShowMessage("Order Quantity cannot less than PickUp + Delivered Quantity.", "Order Quantity Information")
                        grdSOItems.Item(grdSOItems.Row, "Quantity") = _iArticleQtyBeforeChange
                        Exit Sub
                    End If

                    If IsApplyPromotion = True Then
                        'RemoveApplyPromotion(_dsScan, _dsPackagingVar)
                        RemoveApplyPromotionNew(dsScan, dsPackagingVar)
                    End If

                    'Rakesh-01.10.2013:7835-->Check article stock balance quantity
                    If (Not clsDefaultConfiguration.NegativeInventoryAllowed) Then
                        Dim objCommon As New clsCommon
                        Dim articleCode = grdSOItems.Item(CurrentRow, "ArticleCode")
                        Dim articleEAN = grdSOItems.Item(CurrentRow, "EAN")

                        Dim StockQty As Double = objCommon.GetStocks(clsAdmin.SiteCode, articleEAN, articleCode, True)

                        If ((StockQty < vOrderQty) AndAlso grdSOItems.Item(CurrentRow, "ReservedQty")) Then
                            ShowMessage(String.Format(getValueByKey("SB015"), StockQty), "SB015 - " & getValueByKey("CLAE04"))
                            grdSOItems.Item(CurrentRow, "PickUpQty") = 0
                            grdSOItems.Item(CurrentRow, "ReservedQty") = False
                            Exit Sub
                        End If
                    End If
                    ''Qty DS Change
                    If grdSOItems.Cols(CurrentCell).Name = "Quantity" Then
                        If result.Length > 0 Then
                            result(0)("Quantity") = vOrderQty
                            dsScan.AcceptChanges()
                        End If

                        If dsPackagingVar.Tables(0).Rows.Count > 0 Then
                            Dim resultVar As DataRow() = dsPackagingVar.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString() + "' ")
                            resultVar(0)("Quantity") = vOrderQty

                        End If
                        RemoveApplyPromotionNew(dsScan, dsPackagingVar) '' $$ added by Ketan SO GST changes 
                        '-----------Added By Prasad for Checking if Order Qty in AddItems Tab is Less than total qty including subvariations in
                        '-------------- Order Details Tab then Update Header Qty and Others as 0
                        If dsPackagingDelivery.Tables(0).Rows.Count > 0 Then

                            Dim resultHeaderVar As DataRow() = dsPackagingDelivery.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString() + "'")
                            Dim VarSum = IIf(dsPackagingDelivery.Tables(0).Compute("sum(Quantity)", "PkgLineNo='" + UpdatePackagingIndex.ToString() + "' AND isHeader=False") Is DBNull.Value, 0, dsPackagingDelivery.Tables(0).Compute("sum(Quantity)", "PkgLineNo='" + UpdatePackagingIndex.ToString() + "' AND isHeader=False"))
                            Dim currentQty = vOrderQty
                            Dim CalcOrderQtyVar = currentQty - VarSum
                            If CalcOrderQtyVar <= 0 Then
                                For Each resultvar As DataRow In dsPackagingDelivery.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString() + "' AND IsHeader=False")
                                    '------Added By Prasad if Pickup Qty then consider it as Qty else 0 Qty
                                    If resultvar("DeliveredQty") + resultvar("PickupQty") > 0 Then
                                        resultvar("Quantity") = resultvar("DeliveredQty") + resultvar("PickupQty")
                                    Else
                                        resultvar("Quantity") = 0
                                    End If
                                Next

                                Dim SumVarQty = dsPackagingDelivery.Tables(0).Compute("sum(Quantity)", "PkgLineNo='" + UpdatePackagingIndex.ToString() + "' AND isHeader=False")
                                If resultHeaderVar.Length > 0 Then
                                    resultHeaderVar(0)("Quantity") = currentQty - IIf(SumVarQty Is DBNull.Value, 0, SumVarQty)
                                End If
                            End If
                            If resultHeaderVar.Length > 0 Then
                                If vOrderQty < resultHeaderVar(0)("PickupQty") Then
                                    resultHeaderVar(0)("PickupQty") = 0
                                End If
                            End If
                        End If


                        'Dim cQty = vOrderQty
                        'Dim cPckSize = IIf(grdSOItems.Item(CurrentRow, "PckgSize") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgSize"))
                        'Dim cPckQty = IIf(grdSOItems.Item(CurrentRow, "PckgQty") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PckgQty"))
                        If cQty > 0 AndAlso cPckSize > 0 Then
                            If result.Length > 0 Then
                                result(0)("PckgQty") = cQty / cPckSize
                            End If
                            resultPackVar(0)("PckgQty") = cQty / cPckSize
                        End If
                        '----Added By Prasad for Checking if for Combo, Decimal Qty it gives error Msg
                        Dim drCheckIfCombo As New DataView(_dsScan.Tables("ItemScanDetails"), "ArticleCode='" & grdSOItems.Item(grdSOItems.Row, "ArticleCode") & "' AND ArticleType='Combo'", "", DataViewRowState.CurrentRows)
                        If drCheckIfCombo.Count > 0 Then

                            Dim OrderQty = vOrderQty.ToString.Split(".")
                            If OrderQty.Length = 2 Then
                                If OrderQty(1) > 0 Then
                                    ShowMessage("Order Qty For Combo should not be in decimal", "Information")
                                    grdSOItems.Item(grdSOItems.Row, "Quantity") = 1
                                    If result.Length > 0 Then
                                        result(0)("Quantity") = IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, 1)
                                        dsScan.AcceptChanges()
                                    End If
                                    If resultPackVar.Length > 0 Then
                                        resultPackVar(0)("Quantity") = IIf(grdSOItems.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, 1)
                                        dsPackagingVar.AcceptChanges()
                                    End If
                                    Exit Sub
                                End If
                            End If
                        End If
                        'changed by vipin 26102017
                        '   Dim drCheckIfSingleNos As New DataView(_dsScan.Tables("ItemScanDetails"), "ArticleCode='" & grdSOItems.Item(grdSOItems.Row, "ArticleCode") & "' AND ArticleType='Single' AND UOM='NOS'", "", DataViewRowState.CurrentRows)
                        Dim drCheckIfSingleNos As New DataView(_dsScan.Tables("ItemScanDetails"), "ArticleCode='" & grdSOItems.Item(grdSOItems.Row, "ArticleCode") & "' AND ArticleType in ('Single','Kit') AND UOM='NOS'", "", DataViewRowState.CurrentRows)
                        If drCheckIfSingleNos.Count > 0 Then

                            Dim OrderQty = vOrderQty.ToString.Split(".")
                            If OrderQty.Length = 2 Then
                                If OrderQty(1) > 0 Then
                                    ShowMessage("Order Qty For Single Where UOM is NOS should not be in decimal", "Information")
                                    grdSOItems.Item(grdSOItems.Row, "Quantity") = OrderQty(0)
                                    If result.Length > 0 Then
                                        result(0)("Quantity") = OrderQty(0)
                                        dsScan.AcceptChanges()
                                    End If
                                    If resultPackVar.Length > 0 Then
                                        resultPackVar(0)("Quantity") = OrderQty(0)
                                        dsPackagingVar.AcceptChanges()
                                    End If
                                    Exit Sub
                                End If
                            End If

                        End If
                        If clsDefaultConfiguration.PackageFiedlsAllowed Then
                            If grdSOItems.Item(CurrentRow, "ArticleType") = "Combo" Then
                                If result.Length > 0 Then
                                    result(0)("PckgQty") = 0
                                End If

                                resultPackVar(0)("PckgQty") = 0
                            End If
                        End If
                        dsScan.AcceptChanges()

                        dsPackagingVar.AcceptChanges()

                    End If
                    If grdSOItems.Cols(CurrentCell).Name = "SellingPrice" Then
                        If result.Length > 0 Then
                            result(0)("SellingPrice") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice"))
                            '-----Added bY Prasad for Updating Netamt when Changing Price 
                            result(0)("NetAmount") = (IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * grdSOItems.Item(CurrentRow, "Quantity")) + IIf(grdSOItems.Item(CurrentRow, "TotalTaxAmt") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "TotalTaxAmt"))
                            dsScan.AcceptChanges()
                        End If

                        If dsPackagingVar.Tables(0).Rows.Count > 0 Then
                            '-----Added bY Prasad for Updating Netamt & Selling Price For Sub Variations when Changing Price 
                            For Each resultVar As DataRow In dsPackagingVar.Tables(0).Select("ArticleCode='" + grdSOItems.Item(CurrentRow, "ArticleCode") + "' AND Discription='" + grdSOItems.Item(CurrentRow, "Discription") + "' and Rowindex='" + ComboSrNo.ToString() + "'")
                                resultVar("SellingPrice") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice"))
                                resultVar("GrossAmt") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultVar("Quantity")
                                resultVar("GrossAmount") = IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultVar("Quantity")
                                resultVar("NetAmount") = Math.Round((IIf(grdSOItems.Item(CurrentRow, "SellingPrice") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "SellingPrice")) * resultVar("Quantity")) + IIf(grdSOItems.Item(CurrentRow, "TotalTaxAmt") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "TotalTaxAmt")), 3)
                            Next
                            dsPackagingVar.AcceptChanges()
                        End If
                    End If
                    'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
                    '    drAddItemExists = _dsScan.Tables("ItemScanDetails").Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode = '" & grdSOItems.Item(CurrentRow, "BatchBarcode") & "'")
                    'Else
                    'drAddItemExists = _dsScan.Tables("ItemScanDetails").Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode IS NULL")
                    drAddItemExists = _dsScan.Tables("ItemScanDetails").Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And RowIndex='" & ComboSrNo & "'") ' And BatchBarcode IS NULL
                    'End If
                    Dim IsHeader As String = IIf(grdSOItems.Item(CurrentRow, "IsHeader") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "IsHeader"))
                    If IsHeader = "False" Then
                        Dim drAddPackageItemExists() As DataRow
                        drAddPackageItemExists = _dsPackagingVar.Tables("PackagingMaterial").Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo='" & UpdatePackagingIndex & "'") ' And BatchBarcode IS NULL
                        IsEditItem = True
                        Dim itrQtyRow As DataRow() = dsPackagingVar.Tables(0).Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo<>'" + UpdatePackagingIndex.ToString() + "' ")

                        Dim QtyOthers As Object
                        Dim QtyExcAmt As Object
                        If itrQtyRow.Length > 0 Then
                            QtyOthers = dsPackagingVar.Tables(0).Compute("Sum(Quantity)", "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo<>'" + UpdatePackagingIndex.ToString() + "' ")
                            QtyExcAmt = dsPackagingVar.Tables(0).Compute("Sum(ExclTaxAmt)", "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo<>'" + UpdatePackagingIndex.ToString() + "' ")
                        Else
                            QtyOthers = 0
                            QtyExcAmt = 0
                        End If
                        If drAddPackageItemExists.Length > 0 Then
                            'drAddItemExists(0)("GrossAmt") = grdSOItems.Item(CurrentRow, "Quantity") * grdSOItems.Item(CurrentRow, "SellingPrice")
                            Dim obj As New clsSaleOrderCommon
                            obj.IsCSTApplicable = IsCSTApplicable
                            ' obj.RecalculateLinePack(drAddPackageItemExists(0), CtrlTxtOrderNo.Text, dsMain, , False, _iArticleQtyBeforeChange, UpdatePackagingIndex, QtyOthers, QtyExcAmt, TotalPickUpDisc:=dtPickUpDiscGrid)
                            TotalSalesQty = drAddPackageItemExists(0)("PickupQty") + drAddPackageItemExists(0)("DeliveredQty")
                            Dim ArticleRate As Double = Math.Round(drAddPackageItemExists(0)("NetAmount") / drAddPackageItemExists(0)("Quantity"), 3)
                            drAddPackageItemExists(0)("MinPayAmt") = ((drAddPackageItemExists(0)("Quantity") - TotalSalesQty) * ArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * ArticleRate)
                        End If
                        If drAddItemExists.Length > 0 Then
                            If drAddItemExists(0)("PickupQty") = 0 Then
                                drAddItemExists(0)("TotalPickUpAmt") = 0
                            Else
                                drAddItemExists(0)("TotalPickUpAmt") = (drAddItemExists(0)("PickupQty") * NetArticleRate)
                            End If
                        End If
                        'SetScanItemInSO(drAddItemExists(0))
                        'For Each dr As DataRow In dsMain.Tables("SalesOrderTaxDtls").Select("SiteCode='" & clsAdmin.SiteCode & "' And Finyear='" & clsAdmin.Financialyear & "' And SaleOrderNumber='" & CtrlTxtOrderNo.Text & "' And EAN='" & drAddPackageItemExists(0)("EAN") & "'")
                        'dr("TaxValue") = (dr("TaxValue") / _iArticleQtyBeforeChange) * drAddItemExists(0)("Quantity")
                        'For drindex = 0 To dtDocTaxes.Rows.Count - 1
                        '    'dr("TaxValue") = dr("TaxValue") + dtDocTaxes.Rows(drindex)("TaxAmt")
                        '    drAddPackageItemExists(0)("TotalTaxAmt") = drAddPackageItemExists(0)("TotalTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                        '    drAddPackageItemExists(0)("NetAmount") = drAddPackageItemExists(0)("NetAmount") + dtDocTaxes.Rows(drindex)("TaxAmt")
                        '    If dtDocTaxes.Rows(drindex)("Type") = "Exclusive" Then
                        '        drAddPackageItemExists(0)("ExclTaxAmt") = drAddPackageItemExists(0)("ExclTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                        '    Else
                        '        drAddPackageItemExists(0)("IncTaxAmt") = drAddPackageItemExists(0)("IncTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                        '    End If


                        'Next
                        ResetNewTax(True, dtDocTaxes)
                        'ResetNewTax(True, dtDocTaxes)
                        dsScan.AcceptChanges()
                        _dsPackagingVar.AcceptChanges()
                        'Next
                    Else
                        If drAddItemExists.Length > 0 Then
                            Dim drAddPackageItemExists() As DataRow
                            drAddPackageItemExists = _dsPackagingVar.Tables("PackagingMaterial").Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And RowIndex='" & ComboSrNo & "' And PkgLineNo='" & UpdatePackagingIndex & "'") ' And BatchBarcode IS NULL
                            Dim itrQtyRow As DataRow() = dsPackagingVar.Tables(0).Select("EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo<>'" + UpdatePackagingIndex.ToString() + "' ")

                            Dim QtyOthers As Object
                            Dim QtyExcAmt As Object
                            If itrQtyRow.Length > 0 Then
                                QtyOthers = dsPackagingVar.Tables(0).Compute("Sum(Quantity)", "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo<>'" + UpdatePackagingIndex.ToString() + "' ")
                                QtyExcAmt = dsPackagingVar.Tables(0).Compute("Sum(ExclTaxAmt)", "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And PkgLineNo<>'" + UpdatePackagingIndex.ToString() + "' ")
                            Else
                                QtyOthers = 0
                                QtyExcAmt = 0
                            End If
                            IsEditItem = True
                            'drAddItemExists(0)("GrossAmt") = grdSOItems.Item(CurrentRow, "Quantity") * grdSOItems.Item(CurrentRow, "SellingPrice")
                            Dim obj As New clsSaleOrderCommon
                            obj.IsCSTApplicable = IsCSTApplicable
                            '' added by ketan after F12 (price change) tax was not update for production issue  
                            RemoveApplyPromotionNew(dsScan, dsPackagingVar)
                            ' $$ Added bye ketan SO GST
                            'obj.RecalculateLineP(drAddItemExists(0), CtrlTxtOrderNo.Text, dsMain, , False, _iArticleQtyBeforeChange, UpdatePackagingIndex, QtyOthers, QtyExcAmt, TotalPickUpDisc:=dtPickUpDiscGrid)
                            'obj.RecalculateLinePack(drAddPackageItemExists(0), CtrlTxtOrderNo.Text, dsMain, , False, _iArticleQtyBeforeChange, UpdatePackagingIndex, QtyOthers, QtyExcAmt, TotalPickUpDisc:=dtPickUpDiscGrid)
                            TotalSalesQty = drAddItemExists(0)("PickupQty") + IIf(drAddItemExists(0)("DeliveredQty") Is DBNull.Value, 0, drAddItemExists(0)("DeliveredQty"))
                            Dim ArticleRate As Double = Math.Round(drAddItemExists(0)("NetAmount") / drAddItemExists(0)("Quantity"), 3)
                            drAddItemExists(0)("MinPayAmt") = ((drAddItemExists(0)("Quantity") - TotalSalesQty) * ArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * ArticleRate)
                            If drAddItemExists(0)("PickupQty") = 0 Then
                                drAddItemExists(0)("TotalPickUpAmt") = 0
                            Else
                                drAddItemExists(0)("TotalPickUpAmt") = (drAddItemExists(0)("PickupQty") * NetArticleRate)
                            End If
                            If drAddItemExists(0)("PickupQty") = 0 Then
                                drAddItemExists(0)("TotalPickUpAmt") = 0
                            Else
                                drAddItemExists(0)("TotalPickUpAmt") = (drAddItemExists(0)("PickupQty") * NetArticleRate)
                            End If

                            'SetScanItemInSO(drAddItemExists(0))
                            'For Each dr As DataRow In dsMain.Tables("SalesOrderTaxDtls").Select("SiteCode='" & clsAdmin.SiteCode & "' And Finyear='" & clsAdmin.Financialyear & "' And SaleOrderNumber='" & CtrlTxtOrderNo.Text & "' And EAN='" & drAddItemExists(0)("EAN") & "'")
                            'dr("TaxValue") = dr("TaxValue") ' (dr("TaxValue") / _iArticleQtyBeforeChange) '* drAddItemExists(0)("Quantity")
                            'For drindex = 0 To dtDocTaxes.Rows.Count - 1
                            '    'dr("TaxValue") = dr("TaxValue") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    drAddItemExists(0)("TotalTaxAmt") = drAddItemExists(0)("TotalTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    drAddItemExists(0)("NetAmount") = drAddItemExists(0)("NetAmount") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    If dtDocTaxes.Rows(drindex)("Type") = "Exclusive" Then
                            '        drAddItemExists(0)("ExclTaxAmt") = drAddItemExists(0)("ExclTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    Else
                            '        drAddItemExists(0)("IncTaxAmt") = drAddItemExists(0)("IncTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    End If


                            '    drAddPackageItemExists(0)("TotalTaxAmt") = drAddPackageItemExists(0)("TotalTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    drAddPackageItemExists(0)("NetAmount") = drAddPackageItemExists(0)("NetAmount") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    If dtDocTaxes.Rows(drindex)("Type") = "Exclusive" Then
                            '        drAddPackageItemExists(0)("ExclTaxAmt") = drAddPackageItemExists(0)("ExclTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    Else
                            '        drAddPackageItemExists(0)("IncTaxAmt") = drAddPackageItemExists(0)("IncTaxAmt") + dtDocTaxes.Rows(drindex)("TaxAmt")
                            '    End If



                            'Next
                            ResetNewTax(True, dtDocTaxes)
                            dsScan.AcceptChanges()
                            _dsPackagingVar.AcceptChanges()

                            'Next

                            'ResetNewTax(True, dtDocTaxes)
                            'CalculateSalesOrderSummary(dsScan)
                            'RefreshScanData(dsScan)
                            'GridSetting()
                        End If
                    End If

                    'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
                    '    grdSOItems.Item(CurrentRow, "PickUpQty") = vOrderQty
                    '    grdSOItems_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(CurrentRow, grdSOItems.Cols("PickUpQty").Index))
                    'End If
                Catch ex As Exception
                    ShowMessage(ex.Message, getValueByKey("CLAE05"))
                    LogException(ex)
                End Try
            End If

            If grdSOItems.Cols(CurrentCell).Name = "PickUpQty" Then
                Try
                    Dim vPickupQty As Double = IIf(grdSOItems.Item(CurrentRow, "PickupQty") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "PickupQty"))
                    'StockQty = objCM.GetStocks(clsAdmin.SiteCode, grdSOItems.Item(CurrentRow, "EAN"), grdSOItems.Item(CurrentRow, "ArticleCode"), clsDefaultConfiguration.IsBatchManagementReq, grdSOItems.Item(CurrentRow, "BatchBarcode"))
                    'If CDbl(StockQty) <= 0 Then
                    '    If clsDefaultConfiguration.NegativeInventoryAllowed = False Then
                    '        ShowMessage(getValueByKey("SO001"), "SO001 - " & getValueByKey("CLAE04"))
                    '        'ShowMessage("Article out of Stock.", "Information")                        
                    '        e.Cancel = True
                    '        Exit Sub
                    '    End If
                    'End If
                    If Not (vPickupQty >= 0) Then
                        ShowMessage(getValueByKey("SO008"), "SO008 - " & getValueByKey("CLAE05"))
                        'ShowMessage("PickUp Quantity cannot less than 1.", "PickUp Quantity Information")
                        grdSOItems.Item(CurrentRow, "PickupQty") = 0
                    End If

                    Dim dvPickupQty As DataView
                    'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
                    '    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode = '" & grdSOItems.Item(CurrentRow, "BatchBarcode") & "'" & addCondtionRow, "", DataViewRowState.CurrentRows)
                    'Else
                    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode IS NULL" & addCondtionRow, "", DataViewRowState.CurrentRows)
                    'End If

                    If dvPickupQty.Count > 0 Then
                        dvPickupQty.AllowEdit = True

                        'Rakesh-01.10.2013:7835-->Check article stock balance quantity
                        If (Not clsDefaultConfiguration.NegativeInventoryAllowed) Then
                            Dim objCommon As New clsCommon
                            Dim articleCode = grdSOItems.Item(CurrentRow, "ArticleCode")
                            Dim articleEAN = grdSOItems.Item(CurrentRow, "EAN")
                            Dim iPickUpQty = grdSOItems.Item(CurrentRow, "PickUpQty")

                            Dim StockQty As Double = objCommon.GetStocks(clsAdmin.SiteCode, articleEAN, articleCode, True)

                            If (StockQty < iPickUpQty) Then
                                ShowMessage(String.Format(getValueByKey("SB015"), StockQty), "SB015 - " & getValueByKey("CLAE04"))
                                grdSOItems.Item(CurrentRow, "PickUpQty") = 0
                            End If
                        End If

                        For Each drPickupQty As DataRowView In dvPickupQty 'need to check for package variation

                            If grdSOItems.Item(CurrentRow, "PickupQty") <= grdSOItems.Item(CurrentRow, "Quantity") Then
                                drPickupQty("PickupQty") = grdSOItems.Item(CurrentRow, "PickupQty")

                                TotalSalesQty = drPickupQty("PickupQty") + IIf(drPickupQty("DeliveredQty") Is DBNull.Value, 0, drPickupQty("DeliveredQty"))
                                NetArticleRate = Math.Round(drPickupQty("NetAmount") / drPickupQty("Quantity"), 3)
                                drPickupQty("MinPayAmt") = Math.Round(((drPickupQty("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                                'drPickupQty("PickupQty") = grdSOItems.Item(CurrentRow, "PickupQty")
                                'RecalculateLine(drPickupQty.Row)
                                drPickupQty("TotalPickUpAmt") = (drPickupQty("PickupQty") * NetArticleRate)
                            Else
                                grdSOItems.Item(CurrentRow, "PickupQty") = 0
                                grdSOItems.Item(CurrentRow, "TotalPickUpAmt") = 0
                                ShowMessage(getValueByKey("SO009"), "SO009 - " & getValueByKey("CLAE04"))
                                'ShowMessage("Pick Up Quantity cannot greater than Order Quantity.", "Information")
                            End If
                        Next
                        _dsScan.AcceptChanges()
                    End If

                    ' CalculateSalesOrderSummary(dsScan)

                Catch ex As Exception
                    ShowMessage(ex.Message, getValueByKey("CLAE05"))
                    LogException(ex)
                End Try
            End If



            If grdSOItems.Cols(CurrentCell).Name = "ReservedQty" Then
                Try
                    Dim dvPickupQty As New DataView
                    'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
                    '    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode = '" & grdSOItems.Item(CurrentRow, "BatchBarcode") & "'", "", DataViewRowState.CurrentRows)
                    'Else
                    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode IS NULL", "", DataViewRowState.CurrentRows)
                    'End If

                    If dvPickupQty.Count > 0 Then

                        If (grdSOItems.Item(CurrentRow, "ReservedQty")) Then

                            Dim objCommon As New clsCommon
                            Dim articleCode = grdSOItems.Item(CurrentRow, "ArticleCode")
                            Dim articleEAN = grdSOItems.Item(CurrentRow, "EAN")
                            Dim Quantity = grdSOItems.Item(CurrentRow, "Quantity")

                            Dim StockQty As Double = objCommon.GetStocks(clsAdmin.SiteCode, articleEAN, articleCode, False)

                            If (StockQty < Quantity) Then
                                ShowMessage(String.Format(getValueByKey("SB016"), StockQty), "SB016 - " & getValueByKey("CLAE04"))
                                'grdSOItems.Item(CurrentRow, "Quantity") = IIf(StockQty < 0, Quantity, StockQty)
                                'grdSOItems.Item(CurrentRow, "ReservedQty") = IIf(StockQty > 0, True, False)
                                grdSOItems.Item(CurrentRow, "ReservedQty") = False
                                Return
                            End If

                        End If

                        dvPickupQty.AllowEdit = True
                        For Each drPickupQty As DataRowView In dvPickupQty
                            drPickupQty("ReservedQty") = grdSOItems.Item(CurrentRow, "ReservedQty")
                        Next
                        _dsScan.AcceptChanges()
                    End If
                Catch ex As Exception
                    ShowMessage(ex.Message, getValueByKey("CLAE05"))
                    LogException(ex)
                End Try
            End If

            If grdSOItems.Cols(CurrentCell).Name = "IsCLP" Then
                Try
                    Dim dvPickupQty As DataView
                    'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
                    '    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode = '" & grdSOItems.Item(CurrentRow, "BatchBarcode") & "'", "", DataViewRowState.CurrentRows)
                    'Else
                    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode IS NULL", "", DataViewRowState.CurrentRows)
                    'End If
                    If dvPickupQty.Count > 0 Then
                        dvPickupQty.AllowEdit = True
                        For Each drPickupQty As DataRowView In dvPickupQty
                            drPickupQty("IsCLP") = grdSOItems.Item(CurrentRow, "IsCLP")
                        Next
                        _dsScan.AcceptChanges()
                    End If
                    '------Added By Prasad for CLP Selection as Per Variation
                    Dim dvVariationCLP As DataView
                    dvVariationCLP = New DataView(_dsPackagingVar.Tables("PackagingMaterial"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode IS NULL", "", DataViewRowState.CurrentRows)
                    If dvPickupQty(0)("IsCLP") Then
                        'End If
                        If dvVariationCLP.Count > 0 Then
                            dvPickupQty.AllowEdit = True
                            For Each drVariationCLP As DataRowView In dvVariationCLP
                                drVariationCLP("IsCLPApplicable") = True
                            Next
                            _dsPackagingVar.AcceptChanges()
                        End If

                    Else
                        If dvVariationCLP.Count > 0 Then
                            dvVariationCLP.AllowEdit = True

                            For Each drVariationCLP As DataRowView In dvVariationCLP
                                drVariationCLP("IsCLPApplicable") = False
                            Next
                            _dsPackagingVar.AcceptChanges()

                        End If
                    End If
                Catch ex As Exception
                    ShowMessage(ex.Message, getValueByKey("CLAE05"))
                    LogException(ex)
                End Try
            End If
            If IsComboRow = "True" Then
                If result.Length > 0 Then
                    If result(0)("PackagingMaterial") = "" Then
                        ShowMessage("Please select Packaging material for Combo article", " " & getValueByKey("CLAE04"))
                        Exit Sub

                    End If
                End If

            End If
            If IsComboRow = "False" Then
                If grdSOItems.Cols(CurrentCell).Name = "PackagingMaterial" Or grdSOItems.Cols(CurrentCell).Name = "PackagingType" Then
                Else
                    CalculateSalesOrderSummory(dsScan)
                    RefreshLoadSOData()
                    'RefreshScanData(dsScan)
                    'GridSetting()
                    'AddButtonControlInGrid(1)
                End If
            Else
                If grdSOItems.Cols(CurrentCell).Name = "PackagingType" Then
                Else
                    CalculateSalesOrderSummory(dsScan)
                    RefreshLoadSOData()
                    'RefreshScanData(dsScan)
                    'GridSetting()
                    'AddButtonControlInGrid(1)
                End If

            End If
            grdSOItems.Select(CurrentRow, CurrentCell, CurrentRow, CurrentCell, True)
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub

    Private Sub ResetDocTax(ByVal considerCst As Boolean, ByVal dtDocTAxes As DataTable, Optional ByVal DocTax As Boolean = False)

        dvDeleteTaxOnItem = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "IsDocumentLevel=True", "", DataViewRowState.CurrentRows)
        vtaxIndex = dsMain.Tables("SalesOrderTaxDtls").Compute("MAX(taxLineNo)", "") + 1
        If dvDeleteTaxOnItem.Count > 0 Then
            ' If IsHeader Then
            dvDeleteTaxOnItem.AllowDelete = True
            For Each dr As DataRowView In dvDeleteTaxOnItem
                dr("Status") = False
            Next
            dtDocTAxes.Rows.Clear()
        End If

        'Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True and status = true")
        'If foundRow.Count > 0 Then


        '    For Each row As DataRow In foundRow
        '        row("status") = False
        '    Next
        '    'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()

        '    vtaxIndex = dsMain.Tables("SalesOrderTaxDtls").Compute("Max(TaxLineNo)", "") + 1 'dsMain.Tables("SalesOrderTaxDtls").Rows.Count + 1
        '    For drindex = 0 To _dsScan.Tables("ItemScanDetails").Rows.Count - 1
        '        Dim vnewNetAmt As Decimal = 0.0
        '        Dim vnewExclTaxAmt As Decimal = 0.0
        '        Dim vnewIncTaxAmt As Decimal = 0.0
        '        Dim vnewTotalTaxAmt As Decimal = 0.0
        '        Dim vnewNetAmount As Decimal = 0.0
        '        Dim vnewSellingPrice As Decimal = 0.0
        '        Dim vnewGrossAmt As Decimal = 0.0
        '        vnewNetAmt = Math.Round(_dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") * _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), 3)
        '        _dsScan.Tables("ItemScanDetails").Rows(drindex)("ExclTaxAmt") = vnewExclTaxAmt
        '        _dsScan.Tables("ItemScanDetails").Rows(drindex)("IncTaxAmt") = vnewIncTaxAmt
        '        _dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") = vnewTotalTaxAmt

        '        _dsScan.Tables("ItemScanDetails").Rows(drindex)("NetAmount") = vnewNetAmt
        '        _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") = _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice")
        '        _dsScan.Tables("ItemScanDetails").Rows(drindex)("GrossAmt") = vnewNetAmt

        '        Dim dvDtl As New DataView
        '        dvDtl = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN").ToString() & "' and IsDocumentLevel=False", "", DataViewRowState.CurrentRows)

        '        For Each drView As DataRowView In dvDtl
        '            Dim result As DataRow() = dtArticleTaxes.Select("TaxCode='" + drView("TaxLabel").ToString() + "' ")
        '            If result.Length > 0 Then
        '                If result(0)("Inclusive") Then
        '                    _dsScan.Tables("ItemScanDetails").Rows(drindex)("IncTaxAmt") = drView("TaxValue")
        '                End If

        '                Dim resultsOt As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("EAN='" + _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN") + "' and RowIndex='" + _dsScan.Tables("ItemScanDetails").Rows(drindex)("RowIndex") + "' ")
        '                Dim taxVal As Decimal
        '                If resultsOt.Length > 0 Then
        '                    Dim itrQtyRow As DataRow() = dsPackagingVar.Tables(0).Select("EAN='" & _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN") & "' And BillLineNo='" + _dsScan.Tables("ItemScanDetails").Rows(drindex)("RowIndex") + "'  and PkgLineNo <> '" + _dsScan.Tables("ItemScanDetails").Rows(drindex)("PackagingIndex").ToString() + "' ")

        '                    Dim QtyOthers As Object
        '                    Dim QtyExcAmt As Object
        '                    If itrQtyRow.Length > 0 Then
        '                        QtyOthers = dsPackagingVar.Tables(0).Compute("Sum(Quantity)", "EAN='" & _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN") & "' And BillLineNo='" + _dsScan.Tables("ItemScanDetails").Rows(drindex)("RowIndex") + "'   ")

        '                    End If
        '                    If QtyOthers > 0 Then
        '                        taxVal = (drView("TaxValue") / QtyOthers) * _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity")
        '                    End If
        '                End If

        '                If result(0)("Inclusive") = False Then
        '                    _dsScan.Tables("ItemScanDetails").Rows(drindex)("ExclTaxAmt") = taxVal
        '                End If

        '                vnewTotalTaxAmt = vnewTotalTaxAmt + taxVal
        '                _dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") = vnewTotalTaxAmt

        '                _dsScan.Tables("ItemScanDetails").Rows(drindex)("NetAmount") = vnewNetAmt + vnewTotalTaxAmt
        '                _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") = _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice")
        '                _dsScan.Tables("ItemScanDetails").Rows(drindex)("GrossAmt") = vnewNetAmt
        '            End If
        '        Next

        '        _dsScan.Tables("ItemScanDetails").AcceptChanges()

        '    Next

        '    For drindex = 0 To _dsPackagingVar.Tables("PackagingMaterial").Rows.Count - 1
        '        Dim vnewNetAmt As Decimal = 0.0
        '        Dim vnewExclTaxAmt As Decimal = 0.0
        '        Dim vnewIncTaxAmt As Decimal = 0.0
        '        Dim vnewTotalTaxAmt As Decimal = 0.0
        '        Dim vnewNetAmount As Decimal = 0.0
        '        Dim vnewSellingPrice As Decimal = 0.0
        '        Dim vnewGrossAmt As Decimal = 0.0
        '        vnewNetAmt = Math.Round(_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") * _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Quantity"), 3)
        '        _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("ExclTaxAmt") = vnewExclTaxAmt
        '        _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IncTaxAmt") = vnewIncTaxAmt
        '        _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("TotalTaxAmount") = vnewTotalTaxAmt

        '        _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("NetAmount") = vnewNetAmt
        '        _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice")
        '        _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("GrossAmount") = vnewNetAmt

        '        Dim dvDtl As New DataView
        '        dvDtl = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN").ToString() & "' and IsDocumentLevel=False", "", DataViewRowState.CurrentRows)

        '        For Each drView As DataRowView In dvDtl
        '            Dim result As DataRow() = dtArticleTaxes.Select("TaxCode='" + drView("TaxLabel").ToString() + "' ")
        '            If result.Length > 0 Then
        '                If result(0)("Inclusive") Then
        '                    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IncTaxAmt") = drView("TaxValue")
        '                End If
        '                Dim resultsOt As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("EAN='" + dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN") + "' and RowIndex='" + dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("BillLineNo").ToString() + "'")
        '                Dim taxVal As Decimal
        '                If resultsOt.Length > 0 Then
        '                    Dim itrQtyRow As DataRow() = dsPackagingVar.Tables(0).Select("EAN='" & dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN") & "' And BillLineNo='" + dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("BillLineNo").ToString() + "'  and PkgLineNo <> '" + dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("PkgLineNo").ToString() + "' ")

        '                    Dim QtyOthers As Object
        '                    Dim QtyExcAmt As Object
        '                    If itrQtyRow.Length > 0 Then
        '                        QtyOthers = dsPackagingVar.Tables(0).Compute("Sum(Quantity)", "EAN='" & dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN") & "' And BillLineNo='" + dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("BillLineNo").ToString() + "'   ")

        '                    End If
        '                    If QtyOthers > 0 Then
        '                        taxVal = (drView("TaxValue") / QtyOthers) * dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Quantity")
        '                    End If
        '                End If

        '                If result(0)("Inclusive") = False Then
        '                    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("ExclTaxAmt") = taxVal
        '                End If

        '                vnewTotalTaxAmt = vnewTotalTaxAmt + taxVal
        '                _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("TotalTaxAmount") = vnewTotalTaxAmt

        '                _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("NetAmount") = vnewNetAmt + vnewTotalTaxAmt
        '                _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") = dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice")
        '                _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("GrossAmount") = vnewNetAmt
        '            End If




        '        Next


        '        _dsPackagingVar.Tables("PackagingMaterial").AcceptChanges()
        '    Next
        '    _dsScan.AcceptChanges()
        '    _dsPackagingVar.AcceptChanges()
        '    'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
        '    isDocRequired = False
        'End If
    End Sub
    Private Sub ResetNewTax(ByVal considerCst As Boolean, ByVal dtDocTAxes As DataTable, Optional ByVal DocTax As Boolean = False)
        'Tax Reset
        'For drindex = 0 To _dsScan.Tables("ItemScanDetails").Rows.Count - 1
        '    Dim dt = objCM.getTax(vSiteCode, String.Empty, "SO201", _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN"), clsDefaultConfiguration.CSTTaxCode, considerCst)
        '    If dt Is Nothing OrElse Not dt.Rows.Count > 0 Then
        '        Exit Sub
        '    End If

        'Next
        ''start: reset tax with article level only

        Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True and status = true")
        If foundRow.Count > 0 Then


            For Each row As DataRow In foundRow
                row("Status") = False
                ''Added By ketan Tax Add By Multipletime  (PC Issue Solve With Akshay)
                row("CREATEDBY") = clsAdmin.UserCode
            Next
            'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            vtaxIndex = IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("Max(TaxLineNo)", "") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("Max(TaxLineNo)", "")) + 1 ' dsMain.Tables("SalesOrderTaxDtls").Rows.Count + 1
            'For drindex = 0 To _dsScan.Tables("ItemScanDetails").Rows.Count - 1
            '    Dim vnewNetAmt As Decimal = 0.0
            '    Dim vnewExclTaxAmt As Decimal = 0.0
            '    Dim vnewIncTaxAmt As Decimal = 0.0
            '    Dim vnewTotalTaxAmt As Decimal = 0.0
            '    Dim vnewNetAmount As Decimal = 0.0
            '    Dim vnewSellingPrice As Decimal = 0.0
            '    Dim vnewGrossAmt As Decimal = 0.0
            '    vnewNetAmt = Math.Round(_dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") * _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), 3)
            '    _dsScan.Tables("ItemScanDetails").Rows(drindex)("ExclTaxAmt") = vnewExclTaxAmt
            '    _dsScan.Tables("ItemScanDetails").Rows(drindex)("IncTaxAmt") = vnewIncTaxAmt
            '    _dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") = vnewTotalTaxAmt

            '    _dsScan.Tables("ItemScanDetails").Rows(drindex)("NetAmount") = vnewNetAmt - IIf(_dsScan.Tables("ItemScanDetails").Rows(drindex)("Discount") Is DBNull.Value, 0, _dsScan.Tables("ItemScanDetails").Rows(drindex)("Discount"))
            '    _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") = _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice")
            '    _dsScan.Tables("ItemScanDetails").Rows(drindex)("GrossAmt") = vnewNetAmt

            '    Dim dvDtl As New DataView
            '    dvDtl = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN").ToString() & "'", "", DataViewRowState.CurrentRows)

            '    For Each drView As DataRowView In dvDtl
            '        Dim result As DataRow() = dtArticleTaxes.Select("TaxCode='" + drView("TaxLabel").ToString() + "' ")
            '        If result.Length > 0 Then
            '            If result(0)("Inclusive") Then
            '                _dsScan.Tables("ItemScanDetails").Rows(drindex)("IncTaxAmt") = drView("TaxValue")
            '            End If
            '            If result(0)("Inclusive") = False Then
            '                _dsScan.Tables("ItemScanDetails").Rows(drindex)("ExclTaxAmt") = drView("TaxValue")
            '            End If

            '            vnewTotalTaxAmt = vnewTotalTaxAmt + drView("TaxValue")
            '            _dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") = vnewTotalTaxAmt

            '            _dsScan.Tables("ItemScanDetails").Rows(drindex)("NetAmount") = vnewNetAmt + vnewTotalTaxAmt - IIf(_dsScan.Tables("ItemScanDetails").Rows(drindex)("Discount") Is DBNull.Value, 0, _dsScan.Tables("ItemScanDetails").Rows(drindex)("Discount"))
            '            _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") = _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice")
            '            _dsScan.Tables("ItemScanDetails").Rows(drindex)("GrossAmt") = vnewNetAmt
            '        End If
            '    Next

            '    _dsScan.Tables("ItemScanDetails").AcceptChanges()

            'Next

            'For drindex = 0 To _dsPackagingVar.Tables("PackagingMaterial").Rows.Count - 1
            '    Dim vnewNetAmt As Decimal = 0.0
            '    Dim vnewExclTaxAmt As Decimal = 0.0
            '    Dim vnewIncTaxAmt As Decimal = 0.0
            '    Dim vnewTotalTaxAmt As Decimal = 0.0
            '    Dim vnewNetAmount As Decimal = 0.0
            '    Dim vnewSellingPrice As Decimal = 0.0
            '    Dim vnewGrossAmt As Decimal = 0.0
            '    vnewNetAmt = Math.Round(_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") * _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Quantity"), 3)
            '    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("ExclTaxAmt") = vnewExclTaxAmt
            '    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IncTaxAmt") = vnewIncTaxAmt
            '    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("TotalTaxAmount") = vnewTotalTaxAmt

            '    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("NetAmount") = vnewNetAmt - IIf(_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Discount") Is DBNull.Value, 0, _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Discount"))
            '    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice")
            '    _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("GrossAmount") = vnewNetAmount

            '    Dim dvDtl As New DataView
            '    dvDtl = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN").ToString() & "'", "", DataViewRowState.CurrentRows)

            '    For Each drView As DataRowView In dvDtl
            '        Dim result As DataRow() = dtArticleTaxes.Select("TaxCode='" + drView("TaxLabel").ToString() + "' ")
            '        If result.Length > 0 Then
            '            If result(0)("Inclusive") Then
            '                _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IncTaxAmt") = drView("TaxValue")
            '            End If
            '            If result(0)("Inclusive") = False Then
            '                _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("ExclTaxAmt") = drView("TaxValue")
            '            End If

            '            vnewTotalTaxAmt = vnewTotalTaxAmt + drView("TaxValue")
            '            _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("TotalTaxAmount") = vnewTotalTaxAmt

            '            _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("NetAmount") = vnewNetAmt + vnewTotalTaxAmt - IIf(_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Discount") Is DBNull.Value, 0, _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Discount"))
            '            _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice")
            '            _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("GrossAmount") = vnewNetAmt
            '        End If




            '    Next


            '    _dsPackagingVar.Tables("PackagingMaterial").AcceptChanges()
            'Next
        End If
        ''end: reset tax with article level only

        If _dsScan.Tables("ItemScanDetails").Rows.Count > 0 Then


            'If dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
            '    dsMain.Tables("SalesOrderTaxDtls").Clear()
            '    dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            'End If
            Dim dtPack As DataTable
            'Dim dv As DataView = New DataView(_dsPackagingVar.Tables("PackagingMaterial"))
            'dv.Sort = "BillLineNo Asc"
            _dsPackagingVar.Tables("PackagingMaterial").DefaultView.Sort = "BillLineNo asc"
            dtPack = _dsPackagingVar.Tables("PackagingMaterial").DefaultView.ToTable()
            _dsPackagingVar.Tables("PackagingMaterial").Rows.Clear()
            For Each drs As DataRow In dtPack.Rows
                _dsPackagingVar.Tables("PackagingMaterial").Rows.Add(drs.ItemArray)
            Next



            For drTaxIndex = 0 To dtDocTAxes.Rows.Count - 1

                'Dim resultsDocs As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("isdocumentlevel=1 and TaxLabel='" + dt.Rows(iRowTax)("TaxCode") + "'")
                'Dim resultsDocs As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("isdocumentlevel=1 and status=true and TaxLabel='" + dt.Rows(iRowTax)("TaxCode") + "'")
                'If resultsDocs.Length = 0 Then
                Dim drTax1 As DataRow
                'If drTaxExists Is Nothing Then
                drTax1 = dsMain.Tables("SalesOrderTaxDtls").NewRow()
                drTax1("SiteCode") = clsAdmin.SiteCode
                drTax1("FinYear") = clsAdmin.Financialyear
                drTax1("SaleOrderNumber") = CtrlTxtOrderNo.Text
                drTax1("EAN") = ""
                drTax1("TaxLineNo") = vtaxIndex
                drTax1("TaxLabel") = dtDocTAxes.Rows(drTaxIndex)("TaxCode")
                drTax1("TaxValue") = (dtDocTAxes.Rows(drTaxIndex)("TaxAmt"))
                drTax1("IsDocumentLevel") = True
                drTax1("Status") = True


                dsMain.Tables("SalesOrderTaxDtls").Rows.Add(drTax1)
                vtaxIndex = vtaxIndex + 1
                '   Else
                ' drTaxExists("TaxValue") = drTaxExists("TaxValue") + Math.Round(dt.Rows(iRowTax)("TaxAmount"), 2)
                '  End If


                ' End If
            Next

            ''***********************************************************************************************
            'For drindex = 0 To _dsPackagingVar.Tables("PackagingMaterial").Rows.Count - 1
            '    Dim inclTax As Decimal = 0.0
            '    Dim ExcelTax As Decimal = 0.0
            '    Dim TotalTaxAmt As Decimal = 0.0
            '    Dim taxableamt = Math.Round(_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") * _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Quantity"), 3)
            '    'Dim dt = objCM.getTax(vSiteCode, _dsScan.Tables("ItemScanDetails").Rows(drindex)("ARTICLECODE"), "SO201", _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN"), clsDefaultConfiguration.CSTTaxCode, considerCst)
            '    Dim dt = objCM.getTax(vSiteCode, String.Empty, "SO201", _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Quantity"), _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN"), dtDocTAxes.Rows(drTaxIndex)("TAXCODE"), considerCst)
            '    'taxableamt = taxableamt - GetTaxableAmountForCst(_dsScan.Tables("ItemScanDetails").Rows(drindex)("ARTICLECODE"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), taxableamt)
            '    dt.Rows(0)("TAXABLE_AMOUNT") = taxableamt
            '    objCM.getCalculatedDataSet(dt)
            '    For iRowTax = 0 To dt.Rows.Count - 1
            '        Dim drTax1 As DataRow
            '        Dim drTaxExists As DataRow
            '        'If CDbl(dt.Rows(iRowTax)("VALUE").ToString) <> 0 Then
            '        '    If dt.Rows(iRowTax)("INCLUSIVE") = True Then
            '        '        inclTax = inclTax + CDbl(dt.Rows(iRowTax)("TAXAMOUNT"))
            '        '    Else
            '        '        ExcelTax = ExcelTax + CDbl(dt.Rows(iRowTax)("TAXAMOUNT"))
            '        '    End If
            '        'End If

            '        Dim results As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("RowIndex='" + _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("RowIndex").ToString() + "' and TaxLabel='" + dt.Rows(iRowTax)("TaxCode") + "' and IsDocumentLevel=True and Status=true")
            '        Dim findkeyTax(4) As Object
            '        findkeyTax(0) = vSiteCode
            '        findkeyTax(1) = clsAdmin.Financialyear
            '        findkeyTax(2) = CtrlTxtOrderNo.Text
            '        findkeyTax(3) = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("EAN")

            '        'findkeyTax(4) = dt.Rows(iRowTax)("TaxCode")
            '        If results.Length = 0 Then
            '            findkeyTax(4) = vtaxIndex
            '        Else

            '            findkeyTax(4) = results(0)("TaxLineNo")
            '        End If
            '        drTaxExists = dsMain.Tables("SalesOrderTaxDtls").Rows.Find(findkeyTax)
            '        'Dim resultsDocs As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("isdocumentlevel=1 and TaxLabel='" + dt.Rows(iRowTax)("TaxCode") + "'")
            '        Dim resultsDocs As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("isdocumentlevel=1 and status=true and TaxLabel='" + dt.Rows(iRowTax)("TaxCode") + "'")
            '        If resultsDocs.Length = 0 Then

            '            If drTaxExists Is Nothing Then
            '                drTax1 = dsMain.Tables("SalesOrderTaxDtls").NewRow()
            '                drTax1("SiteCode") = clsAdmin.SiteCode
            '                drTax1("FinYear") = clsAdmin.Financialyear
            '                drTax1("SaleOrderNumber") = CtrlTxtOrderNo.Text
            '                drTax1("EAN") = ""
            '                drTax1("TaxLineNo") = vtaxIndex
            '                drTax1("TaxLabel") = dt.Rows(iRowTax)("TaxCode")
            '                drTax1("TaxValue") = Math.Round(dt.Rows(iRowTax)("TaxAmount"), 2)
            '                drTax1("IsDocumentLevel") = True
            '                drTax1("Status") = True
            '                drTax1("IsHeader") = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IsHeader")
            '                drTax1("RowIndex") = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("BillLineNo")
            '                drTax1("PackagingIndex") = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("pkgLineNo")

            '                dsMain.Tables("SalesOrderTaxDtls").Rows.Add(drTax1)
            '                vtaxIndex = vtaxIndex + 1
            '            Else
            '                ' drTaxExists("TaxValue") = drTaxExists("TaxValue") + Math.Round(dt.Rows(iRowTax)("TaxAmount"), 2)
            '            End If


            '        End If


            '    Next
            '    'ExcelTax = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("ExclTaxAmt") + ExcelTax
            '    'inclTax = _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IncTaxAmt") + inclTax
            '    'TotalTaxAmt = ExcelTax + inclTax '_dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") +
            '    '_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("ExclTaxAmt") = ExcelTax
            '    '_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("IncTaxAmt") = inclTax
            '    '_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("TotalTaxAmount") = TotalTaxAmt

            '    '_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("NetAmount") = FormatNumber(taxableamt + ExcelTax + inclTax, 2)
            '    '_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("SellingPrice") = FormatNumber(taxableamt / _dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("Quantity"), 2)
            '    '_dsPackagingVar.Tables("PackagingMaterial").Rows(drindex)("GrossAmt") = taxableamt
            'Next
            ''    For drindex = 0 To _dsScan.Tables("ItemScanDetails").Rows.Count - 1
            ''        Dim inclTax As Decimal = 0.0
            ''        Dim ExcelTax As Decimal = 0.0
            ''        Dim TotalTaxAmt As Decimal = 0.0
            ''        Dim taxableamt = Math.Round(_dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") * _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), 3)
            ''        'Dim dt = objCM.getTax(vSiteCode, _dsScan.Tables("ItemScanDetails").Rows(drindex)("ARTICLECODE"), "SO201", _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN"), clsDefaultConfiguration.CSTTaxCode, considerCst)
            ''        Dim dt = objCM.getTax(vSiteCode, String.Empty, "SO201", _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN"), dtDocTAxes.Rows(drTaxIndex)("TAXCODE"), considerCst)
            ''        'taxableamt = taxableamt - GetTaxableAmountForCst(_dsScan.Tables("ItemScanDetails").Rows(drindex)("ARTICLECODE"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("EAN"), _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), taxableamt)
            ''        dt.Rows(0)("TAXABLE_AMOUNT") = taxableamt
            ''        objCM.getCalculatedDataSet(dt)
            ''        For iRowTax = 0 To dt.Rows.Count - 1

            ''            If CDbl(dt.Rows(iRowTax)("VALUE").ToString) <> 0 Then
            ''                If dt.Rows(iRowTax)("INCLUSIVE") = True Then
            ''                    inclTax = inclTax + CDbl(dt.Rows(iRowTax)("TAXAMOUNT"))
            ''                Else
            ''                    ExcelTax = ExcelTax + CDbl(dt.Rows(iRowTax)("TAXAMOUNT"))
            ''                End If
            ''            End If


            ''        Next
            ''        ExcelTax = _dsScan.Tables("ItemScanDetails").Rows(drindex)("ExclTaxAmt") + ExcelTax
            ''        inclTax = _dsScan.Tables("ItemScanDetails").Rows(drindex)("IncTaxAmt") + inclTax
            ''        TotalTaxAmt = ExcelTax + inclTax '_dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") +
            ''        _dsScan.Tables("ItemScanDetails").Rows(drindex)("ExclTaxAmt") = ExcelTax
            ''        _dsScan.Tables("ItemScanDetails").Rows(drindex)("IncTaxAmt") = inclTax
            ''        _dsScan.Tables("ItemScanDetails").Rows(drindex)("TotalTaxAmt") = TotalTaxAmt

            ''        _dsScan.Tables("ItemScanDetails").Rows(drindex)("NetAmount") = FormatNumber(taxableamt + ExcelTax + inclTax, 2)
            ''        _dsScan.Tables("ItemScanDetails").Rows(drindex)("SellingPrice") = FormatNumber(taxableamt / _dsScan.Tables("ItemScanDetails").Rows(drindex)("Quantity"), 2)
            ''        _dsScan.Tables("ItemScanDetails").Rows(drindex)("GrossAmt") = taxableamt
            ''    Next
            'Next
            ''***********************************************************************************************************

            _dsScan.AcceptChanges()
            _dsPackagingVar.AcceptChanges()
            'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            'For index = 1 To grdSOItems.Rows.Count - 1
            '    grdSOItems_AfterEdit(dsMain, New C1.Win.C1FlexGrid.RowColEventArgs(index, grdSOItems.Cols("PickUpQty").Index))
            'Next

            '  RemoveApplyPromotion(_dsScan, _dsPackagingVar, False)
            'CalculateSalesOrderSummary(_dsScan)
        End If
    End Sub
    ''' <summary>
    ''' Delete Selected Article from DataGrid
    ''' </summary>
    ''' <param name="sender">Select Row</param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub grdSOItems_CellButtonClick(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.RowColEventArgs) Handles grdSOItems.CellButtonClick
        Try
            Dim BulkComboMstId As Int64 = 0
            Dim SrNo As String = grdSOItems.Item(grdSOItems.Row, "SrNo")
            Dim IsHeader = grdSOItems.Item(grdSOItems.Row, "IsHeader")
            Dim IsCombo = grdSOItems.Item(grdSOItems.Row, "IsCombo")
            Dim ComboSrNo = grdSOItems.Item(grdSOItems.Row, "RowIndex")
            'Dim deleteRowNo As Integer = 0
            If DtSoBulkComboHdr.Rows.Count > 0 Then
                Dim drHdr() = DtSoBulkComboHdr.Select("ComboSrNo=" & ComboSrNo)
                'If drHdr.Count > 0 Then
                '    deleteRowNo = ComboSrNo
                'End If
            End If

            If MsgBox(getValueByKey("SO011"), MsgBoxStyle.YesNo, "SO011 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                If IsHeader Then
                    Dim DeliveredQuantity = _dsPackagingVar.Tables(0).Compute("Sum(DeliveredQty)", " BillLineNo='" + ComboSrNo + "'")
                    If DeliveredQuantity > 0 Then
                        ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                        Exit Sub
                    End If

                End If

                If Not ((IIf(grdSOItems.Item(grdSOItems.Row, "DeliveredQty") Is DBNull.Value, 0, grdSOItems.Item(grdSOItems.Row, "DeliveredQty"))) > 0) Then
                    If IsDBNull(grdSOItems.Item(grdSOItems.Row, "BatchBarcode")) = False Then
                        DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), grdSOItems.Item(grdSOItems.Row, "BatchBarcode"), ComboSrNo, grdSOItems.Item(grdSOItems.Row, "PackagingIndex"), IsCombo, IsHeader)
                    Else
                        DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), , ComboSrNo, grdSOItems.Item(grdSOItems.Row, "PackagingIndex"), IsCombo, IsHeader)
                    End If
                Else
                    ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                    Exit Sub
                    'ShowMessage("Items cannot deleted.", "Delivery Date Information")
                End If
                ''----Delete Bulk Combo Details As Well...
                If IsHeader Then
                    If DtSoBulkComboHdr.Rows.Count > 0 And IsCombo = "True" Then
                        DeleteBulkCombo(ComboSrNo)
                        IsStrGenerateApplicable = True
                        '-----Delete socombodtl and hdr

                        statusforComboHdr = New DataView(dsMain.Tables("SalesOrderBulkComboHdr"), "ComboSrNo='" & ComboSrNo & "'", "", DataViewRowState.CurrentRows)
                        If statusforComboHdr.Count > 0 Then
                            For Each drView As DataRowView In statusforComboHdr
                                drView("Status") = False
                            Next
                        End If

                        statusforComboDtl = New DataView(dsMain.Tables("SalesOrderBulkComboDtl"), "ComboSrNo='" & ComboSrNo & "'", "", DataViewRowState.CurrentRows)
                        If statusforComboDtl.Count > 0 Then
                            For Each drView As DataRowView In statusforComboDtl
                                drView("Status") = False
                            Next
                        End If

                    End If
                End If
            End If
            If clsDefaultConfiguration.IsNewSalesOrder Then  '' added by nikhil
                'BindTextValue() '$$KETAN GST SO Chnages 
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Sub
    Private Sub dgDeliveryLocation_CellButtonClick(sender As Object, e As RowColEventArgs) Handles dgDeliveryLocation.CellButtonClick
        Try
            Dim deliveredQty = IIf(dgDeliveryLocation.Item(dgDeliveryLocation.Row, "DeliveredQty") Is DBNull.Value, 0, dgDeliveryLocation.Item(dgDeliveryLocation.Row, "DeliveredQty"))
            Dim SrNo As String = dgDeliveryLocation.Item(dgDeliveryLocation.Row, "SrNo")
            Dim updateData As Boolean = False
            Dim rowIndex = dgDeliveryLocation.Item(dgDeliveryLocation.Row, "RowIndex")
            Dim vEAN As String = "" 'dgDeliveryLocation.Item(dgDeliveryLocation.Row, "EAN")
            Dim packagingIndex = dgDeliveryLocation.Item(dgDeliveryLocation.Row, "PackagingIndex")
            Dim deliveryIndex = dgDeliveryLocation.Item(dgDeliveryLocation.Row, "DeliveryIndex")
            Dim IsHeader = dgDeliveryLocation.Item(dgDeliveryLocation.Row, "IsHeader")
            Dim IsCombo = dgDeliveryLocation.Item(dgDeliveryLocation.Row, "IsCombo")

            Dim resultEAN As DataRow() = _dsScan.Tables("ItemScanDetails").Select("1=1  AND RowIndex = " & rowIndex)
            vEAN = resultEAN(0)("EAN")
            Dim resultMasterRow As DataRow() = _dsScan.Tables("ItemScanDetails").Select("1=1  AND PackagingIndex = " & packagingIndex & " AND DeliveryIndex = " & deliveryIndex)
            If resultMasterRow.Length > 0 Then
                Dim DeliveredQuantity = _dsPackagingVar.Tables(0).Compute("Sum(DeliveredQty)", " BillLineNo='" + rowIndex + "'")
                If DeliveredQuantity > 0 Then
                    ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
            End If
            If IsHeader = "False" And deliveredQty > 0 Then
                ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                Exit Sub
            End If
            If IsHeader = "True" And deliveredQty > 0 Then
                ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                Exit Sub
            End If
            If IsHeader = "True" And deliveredQty = 0 Then
                '------Added By Prasad for Checking if Null Value
                Dim resultbaseQtyV = IIf(_dsPackagingDelivery.Tables(0).Compute("Sum(DeliveredQty)", " BilllineNo='" + rowIndex + "' and pkgLineNo='" + packagingIndex + "'") Is DBNull.Value, 0, _dsPackagingDelivery.Tables(0).Compute("Sum(DeliveredQty)", " BilllineNo='" + rowIndex + "' and pkgLineNo='" + packagingIndex + "'"))
                If resultbaseQtyV > 0 Then
                    ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                    Exit Sub
                Else
                    updateData = True
                End If
            ElseIf IsHeader = "False" And deliveredQty = 0 Then
                updateData = True
            End If

            If updateData And deliveredQty = 0 Then



                Dim addCondtion As String = String.Empty
                Dim addCondtionforpd As String = String.Empty
                Dim baseAddCondtion As String = String.Empty


                If rowIndex > 0 Then
                    addCondtion = " And  BillLineNo =" & rowIndex
                    addCondtionforpd = " And  BillLineNo ='" & rowIndex & "'"
                End If


                If packagingIndex > 0 AndAlso resultMasterRow.Length = 0 Then
                    addCondtion &= " AND PackagingIndex = " & packagingIndex
                    addCondtionforpd &= " AND pkgLineNo = '" & packagingIndex & "'"
                    baseAddCondtion = addCondtionforpd
                End If
                If deliveryIndex > 0 AndAlso IsHeader = "False" Then
                    addCondtion &= " AND DeliveryIndex = " & deliveryIndex
                    addCondtionforpd &= " AND DeliveryLineNo = '" & deliveryIndex & "'"
                End If
                If IsHeader = "True" Then 'String.IsNullOrEmpty(batchBarcode)
                    dvEditDeleteItems = New DataView(_dsScan.Tables("ItemScanDetails"), "1=1 " & addCondtion, "", DataViewRowState.CurrentRows)

                End If
                If dvEditDeleteItems IsNot Nothing Then
                    If dvEditDeleteItems.Count > 0 Then
                        For Each drView2 As DataRowView In dvEditDeleteItems
                            drView2.Delete()
                        Next
                        If DtSOStr.Rows.Count > 0 Then
                            dvEditDeleteSTRItems = New DataView(DtSOStr, "DeliveryIndex=" & rowIndex, "", DataViewRowState.CurrentRows)
                            For Each drViewSTR As DataRowView In dvEditDeleteSTRItems
                                drViewSTR("Status") = False
                            Next
                            DtSOStr.AcceptChanges()
                            dtSTR = DtSOStr.Copy()
                        End If
                    End If
                End If


                If IsHeader = "True" Then 'String.IsNullOrEmpty(batchBarcode)
                    dvEditDeletePackagingItems = New DataView(_dsPackagingVar.Tables("PackagingMaterial"), "1=1 " & addCondtionforpd, "", DataViewRowState.CurrentRows)

                End If

                dvEditDeletePackagingDeliveryItems = New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "1=1 " & addCondtionforpd, "", DataViewRowState.CurrentRows)

                vtaxIndex = IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("MAX(taxLineNo)", "") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("MAX(taxLineNo)", "")) + 1
                If dvEditDeletePackagingItems IsNot Nothing Then
                    If dvEditDeletePackagingItems.Count > 0 Then
                        dvDeleteTaxOnItem = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "IsDocumentLevel=True", "", DataViewRowState.CurrentRows)
                        If dvDeleteTaxOnItem.Count > 0 Then
                            ' If IsHeader Then
                            dvDeleteTaxOnItem.AllowDelete = True
                            For Each dr As DataRowView In dvDeleteTaxOnItem
                                dr("Status") = False
                            Next
                            dtDocTaxes.Rows.Clear()
                        End If
                    End If
                End If

                dvDeleteTaxOnItemLevelTax = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & vEAN & "' And IsDocumentLevel=False", "", DataViewRowState.CurrentRows)
                If resultMasterRow.Length = 1 Then
                    For Each drView As DataRowView In dvDeleteTaxOnItemLevelTax
                        drView("status") = False
                    Next
                Else
                    If dvEditDeletePackagingItems IsNot Nothing Then
                        Dim totaltaxvaluereults As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("EAN='" & vEAN & "' And IsDocumentLevel=False")
                        If totaltaxvaluereults.Length > 0 Then
                            Dim totaltaxvalue = totaltaxvaluereults(0)("TaxValue")
                            Dim totalquantityreults As DataRow() = _dsPackagingDelivery.Tables(0).Select("EAN='" & vEAN & "' and DeliveryIndex = '" & deliveryIndex & "'") '$$ change By Ketan SO GST Changes  
                            Dim totalQuantity = _dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(Quantity)", "Rowindex=" & rowIndex & "")
                            Dim resulttax = FormatNumber((totaltaxvalue / totalQuantity), 2)
                            Dim totalquantityreduce = totalquantityreults(0)("Quantity")

                            Dim finalTaxonremainingQuantity = resulttax * (totalQuantity - totalquantityreduce)
                            totaltaxvaluereults(0)("TaxValue") = finalTaxonremainingQuantity
                        End If
                    End If

                End If
                If IsHeader = True Then
                    If IsApplyPromotion Then
                        cmdClrAllPromo_Click(Nothing, Nothing)
                    End If
                End If

                If dvEditDeletePackagingItems IsNot Nothing Then
                    For Each drView2 As DataRowView In dvEditDeletePackagingItems
                        'drView2.Delete()
                        'drView2("Status") = False
                        If drView2("IsNew") = False Then
                            drView2("Status") = False
                            drView2("IsStatus") = "Deleted"
                        Else
                            drView2.Delete()
                        End If

                    Next
                End If

                dvEditDeletePackagingDeliveryItems = New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "1=1 " & addCondtionforpd, "", DataViewRowState.CurrentRows)

                If dvEditDeletePackagingDeliveryItems.Count > 0 Then
                    Dim resultPrevQty As DataRow() = _dsPackagingDelivery.Tables(0).Select("1=1 " & addCondtionforpd)
                    Dim resultbaseQty As DataRow() = _dsPackagingDelivery.Tables(0).Select("1=1 And isheader=true and  BillLineNo =" & rowIndex & " AND pkgLineNo = " & packagingIndex) 'to update header quantity if child deleted

                    If resultPrevQty.Length > 0 AndAlso resultbaseQty.Length > 0 Then
                        resultbaseQty(0)("Quantity") = resultbaseQty(0)("Quantity") + resultPrevQty(0)("Quantity")
                        If clsDefaultConfiguration.PackageFiedlsAllowed Then
                            '----Incase Delete Deliverylocation calulate pkgQty
                            If resultbaseQty(0)("UnitOfMeasure") = "KGS" Then
                                If resultbaseQty(0)("PckgSize") > 0 Then
                                    resultbaseQty(0)("PckgQty") = (resultbaseQty(0)("Quantity") - resultbaseQty(0)("DeliveredQty")) / resultbaseQty(0)("PckgSize") & " " & resultbaseQty(0)("PackagingType")
                                End If
                            End If
                        End If
                    End If
                    For Each drView2 As DataRowView In dvEditDeletePackagingDeliveryItems
                        ' drView2.Delete()
                        If drView2("IsNew") = False Then
                            drView2("Status") = False
                        Else
                            drView2.Delete()
                        End If
                    Next


                    _dsPackagingDelivery.AcceptChanges()
                    _dsPackagingVar.AcceptChanges()
                    _dsScan.AcceptChanges()
                    CalculateSalesOrderSummory(dsScan)
                    ' UpdateSODeliveryGridData()
                    BindSOItemGridData(_dsScan.Tables("ItemScanDetails"))
                    BindSODeliveryGridData(_dsPackagingDelivery.Tables(0), True)
                    AddButtonControlInGridW(1)
                    AddButtonControlInDeliveryGrid(1)
                    AddSTRButtonControlInDeliveryGrid(1)
                End If
                '------Added By Prasad for Removing Combo Article if Deleted from Grid
                ''----Delete Bulk Combo Details As Well...
                'If IsHeader = True Then
                '    If DtSoBulkComboHdr.Rows.Count > 0 And IsCombo = "True" Then
                '        DeleteBulkCombo(rowIndex)
                '    End If
                '    '----------Added By Prasad for Delete remarks for combo, if removed from grid

                '    dvRemarks = New DataView(DtSoBulkRemarks, "SrNo='" & rowIndex & "' ", "", DataViewRowState.CurrentRows)
                '    If dvRemarks.Count > 0 Then
                '        For Each drView2 As DataRowView In dvRemarks
                '            drView2.Delete()
                '        Next
                '        DtSoBulkRemarks.AcceptChanges()
                '        ' LoadRemarks(DtSoBulkRemarks, True)
                '    End If
                'End If
                If IsHeader = True And resultMasterRow.Length = 1 Then
                    If DtSoBulkRemarks IsNot Nothing Then
                        dvRemarks = New DataView(DtSoBulkRemarks, "SrNo='" & rowIndex & "' ", "", DataViewRowState.CurrentRows)
                        If dvRemarks.Count > 0 Then
                            For Each drView2 As DataRowView In dvRemarks
                                drView2.Delete()
                            Next
                            DtSoBulkRemarks.AcceptChanges()

                            Dim index As Integer = 1
                            Dim dtTemp = _dsScan.Tables("ItemScanDetails")
                            Dim dataView As New DataView(dtTemp)
                            dataView.Sort = "SrNo ASC"
                            dtTemp = dataView.ToTable()
                            For Each dr As DataRow In dtTemp.Rows
                                If DtSoBulkRemarks.Rows.Count > 0 Then
                                    Dim resultRemark As DataRow() = DtSoBulkRemarks.Select("Articletype='Combo' and SrNo='" + dr("Rowindex").ToString() + "'  ")
                                    If resultRemark.Length > 0 Then
                                        Dim rmkArrary As Array = resultRemark(0)("Articlename").ToString().Split("-")
                                        If rmkArrary.Length > 0 Then
                                            resultRemark(0)("Articlename") = index.ToString() & "-" & rmkArrary(1)
                                        End If
                                    End If
                                End If
                                index += 1
                            Next
                            LoadRemarks(DtSoBulkRemarks, True)
                        End If
                    End If

                    If DtSoBulkComboHdr.Rows.Count > 0 And IsCombo = "True" Then
                        Dim dvCombo = New DataView(DtSoBulkComboHdr, "ComboSrNo='" & rowIndex & "' ", "", DataViewRowState.CurrentRows)
                        If dvCombo.Count > 0 Then
                            DeleteBulkCombo(rowIndex)
                        End If
                        '-----Delete socombodtl and hdr

                        statusforComboHdr = New DataView(dsMain.Tables("SalesOrderBulkComboHdr"), "ComboSrNo='" & rowIndex & "'", "", DataViewRowState.CurrentRows)
                        If statusforComboHdr.Count > 0 Then
                            For Each drView As DataRowView In statusforComboHdr
                                drView("Status") = False
                            Next
                        End If

                        statusforComboDtl = New DataView(dsMain.Tables("SalesOrderBulkComboDtl"), "ComboSrNo='" & rowIndex & "'", "", DataViewRowState.CurrentRows)
                        If statusforComboDtl.Count > 0 Then
                            For Each drView As DataRowView In statusforComboDtl
                                drView("Status") = False
                            Next
                        End If
                    End If

                    '----------Added By Prasad for Delete remarks for combo, if removed from grid

                    'dvRemarks = New DataView(DtSoBulkRemarks, "SrNo='" & rowIndex & "' ", "", DataViewRowState.CurrentRows)
                    'If dvRemarks.Count > 0 Then
                    '    For Each drView2 As DataRowView In dvRemarks
                    '        drView2.Delete()
                    '    Next
                    '    DtSoBulkRemarks.AcceptChanges()
                    '    'LoadRemarks(DtSoBulkRemarks, True)
                    'End If
                End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub
    '---- Commented By Mahesh Write new one 
    'Private Sub grdSOItems_CellButtonClick(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.RowColEventArgs) Handles grdSOItems.CellButtonClick
    '    Try
    '        'commented by rama for bug no 0000563
    '        'If grdSOItems.Item(grdSOItems.Row, "ExpDelDate") >= Format(vCurrentDate, vDateFormat) Then
    '        If MsgBox(getValueByKey("SO011"), MsgBoxStyle.YesNo, "SO011 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
    '            If Not (grdSOItems.Item(grdSOItems.Row, "DeliveredQty") > 0) Then
    '                If IsDBNull(grdSOItems.Item(grdSOItems.Row, "BatchBarcode")) = False Then
    '                    DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), grdSOItems.Item(grdSOItems.Row, "BatchBarcode"))
    '                Else
    '                    DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"))
    '                End If
    '            Else
    '                ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
    '                'ShowMessage("Items cannot deleted.", "Delivery Date Information")
    '            End If
    '        End If

    '        'Else
    '        'ShowMessage(getValueByKey("SO010"), "SO010")
    '        'ShowMessage("Delivery Date of Item cannot be backdated.", "Delivery Date Information")
    '        'End If
    '    Catch ex As Exception
    '        ShowMessage(ex.Message, getValueByKey("CLAE05"))
    '    End Try

    'End Sub

    ''' <summary>
    ''' Delete Selected Article from DataGrid
    ''' </summary>
    ''' <param name="sender">Select Row</param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub grdSOItems_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        Try
            If e.KeyCode = Keys.Delete Then
                '    If grdSOItems.Item(grdSOItems.Row, "ExpDelDate") >= Format(vCurrentDate, vDateFormat) Then
                '        If MsgBox(getValueByKey("SO011"), MsgBoxStyle.YesNo, "SO011 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                '            If Not (grdSOItems.Item(grdSOItems.Row, "DeliveredQty") > 0) Then
                '                If IsDBNull(grdSOItems.Item(grdSOItems.Row, "BatchBarcode")) = False Then
                '                    DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), grdSOItems.Item(grdSOItems.Row, "BatchBarcode"))
                '                Else
                '                    DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"))
                '                End If
                '            Else
                '                ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                '                'ShowMessage("Items cannot deleted.", "Delivery Date Information")
                '            End If
                '        End If
                '    Else
                '        ShowMessage(getValueByKey("SO010"), "SO010 - " & getValueByKey("CLAE04"))
                '        'ShowMessage("Delivery Date of Item cannot be backdated.", "Delivery Date Information")
                '    End If
                'End If

                Dim BulkComboMstId As Int64 = 0
                Dim ComboSrNo = grdSOItems.Item(grdSOItems.Row, "RowIndex")
                'Dim deleteRowNo As Integer = 0
                If DtSoBulkComboHdr.Rows.Count > 0 Then
                    Dim drHdr() = DtSoBulkComboHdr.Select("ComboSrNo=" & ComboSrNo)
                    'If drHdr.Count > 0 Then
                    '    deleteRowNo = ComboSrNo
                    'End If
                End If
                If grdSOItems.Item(grdSOItems.Row, "ExpDelDate") >= Format(vCurrentDate, vDateFormat) Then
                    If MsgBox(getValueByKey("SO011"), MsgBoxStyle.YesNo, "SO011 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                        If Not (grdSOItems.Item(grdSOItems.Row, "DeliveredQty") > 0) Then
                            If IsDBNull(grdSOItems.Item(grdSOItems.Row, "BatchBarcode")) = False Then
                                'DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), grdSOItems.Item(grdSOItems.Row, "BatchBarcode"), deleteRowNo)
                                DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), grdSOItems.Item(grdSOItems.Row, "BatchBarcode"), ComboSrNo)
                            Else
                                'DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), , deleteRowNo)
                                DeleteScanItemInSO(grdSOItems.Item(grdSOItems.Row, "EAN"), , ComboSrNo)
                            End If
                        Else
                            ShowMessage(getValueByKey("SO035"), "SO035 - " & getValueByKey("CLAE04"))
                            'ShowMessage("Items cannot deleted.", "Delivery Date Information")
                        End If
                        ''----Delete Bulk Combo Details As Well...
                        If DtSoBulkComboHdr.Rows.Count > 0 Then
                            DeleteBulkCombo(ComboSrNo)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Sub

    ''' <summary>
    ''' Show the image of the Current Selected Article
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub grdSOItems_RowColChange(ByVal sender As Object, ByVal e As System.EventArgs)
        Try
            If (grdSOItems.Row >= 1) Then

                'grdSOItems.Cols("ArticleCode").Visible = True
                vArticleCode = grdSOItems.Item(grdSOItems.Row, "ArticleCode")
                'grdSOItems.Cols("ArticleCode").Visible = False

                'Dim strUrl As String = objComn.GetArticleImage(vArticleCode, My.Settings.ArticleImageFolder)
                Dim strUrl As String = objComn.GetArticleImage(vArticleCode, ReadSpectrumParamFile("ArticleImageFolder"))
                'PictureBoxImages.ImageLocation = strUrl
                '---abc
                'CtrlProductImage.ShowArticleImage(vArticleCode)
            End If
        Catch ex As Exception
            LogException(ex)
            'MsgBox(ex.Message)
        End Try


    End Sub

    ''' <summary>
    ''' Delete Selected Article from DataGridadm
    ''' </summary>
    ''' <param name="vEAN">Selected EAN</param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function DeleteScanItemInSO(ByVal vEAN As String, Optional batchBarcode As String = "", Optional rowIndex As Integer = 0, Optional userSrNo As String = "0", Optional IsCombo As String = "0", Optional IsHeader As Boolean = False) As Boolean
        Try
            '---Add Condtion by Mahesh incase of combo only one combo need to deleted 
            Dim addCondtion As String = String.Empty
            Dim addPackCondtion As String = String.Empty
            If rowIndex > 0 Then
                addCondtion = " AND RowIndex =" & rowIndex
                addPackCondtion = " AND BillLineNo =" & rowIndex
            End If
            If userSrNo > "0" And Not IsHeader Then
                addCondtion &= " AND PackagingIndex = " & userSrNo
                addPackCondtion &= " AND pkgLineNo =" & userSrNo
            End If

            If IsCombo = "True" Then 'String.IsNullOrEmpty(batchBarcode)
                dvEditDeleteItems = New DataView(_dsScan.Tables("ItemScanDetails"), "1=1 " & addCondtion, "", DataViewRowState.CurrentRows)
            Else
                dvEditDeleteItems = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & vEAN & "' And BatchBarcode IS NULL" & addCondtion, "", DataViewRowState.CurrentRows)
            End If


            If IsCombo = "True" Then 'String.IsNullOrEmpty(batchBarcode)
                dvEditDeletePackagingItems = New DataView(_dsPackagingVar.Tables("PackagingMaterial"), "1=1 " & addPackCondtion, "", DataViewRowState.CurrentRows)
            Else
                dvEditDeletePackagingItems = New DataView(_dsPackagingVar.Tables("PackagingMaterial"), "EAN='" & vEAN & "' And BatchBarcode IS NULL" & addPackCondtion, "", DataViewRowState.CurrentRows)

            End If
            vtaxIndex = IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("MAX(taxLineNo)", "") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("MAX(taxLineNo)", "")) + 1
            dvDeleteTaxOnItem = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "IsDocumentLevel=True", "", DataViewRowState.CurrentRows)
            If dvDeleteTaxOnItem.Count > 0 Then
                ' If IsHeader Then
                dvDeleteTaxOnItem.AllowDelete = True
                For Each dr As DataRowView In dvDeleteTaxOnItem
                    dr("Status") = False
                Next
                dtDocTaxes.Rows.Clear()
            End If
            dvDeleteTaxOnItemLevelTax = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & vEAN & "' And IsDocumentLevel=False", "", DataViewRowState.CurrentRows)
            If IsHeader Then
                For Each drView As DataRowView In dvDeleteTaxOnItemLevelTax
                    drView.Delete()
                Next
            Else
                Dim totaltaxvaluereults As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("EAN='" & vEAN & "' And IsDocumentLevel=False")
                If totaltaxvaluereults.Length > 0 Then
                    Dim totaltaxvalue = totaltaxvaluereults(0)("TaxValue")
                    Dim totalquantityreults As DataRow() = _dsPackagingVar.Tables("PackagingMaterial").Select("EAN='" & vEAN & "'" & addPackCondtion)
                    Dim totalQuantity = _dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(Quantity)", "Rowindex=" & rowIndex & "")
                    Dim resulttax = FormatNumber((totaltaxvalue / totalQuantity), 2)
                    'Dim totalquantityreduce = totalquantityreults(0)("Quantity")
                    Dim totalquantityreduce = 0
                    '' added by ketan issue in delete combo varitaion article 
                    If totalquantityreults.Length > 0 Then
                        totalquantityreduce = totalquantityreults(0)("Quantity")
                    End If
                    Dim finalTaxonremainingQuantity = resulttax * (totalQuantity - totalquantityreduce)
                    totaltaxvaluereults(0)("TaxValue") = finalTaxonremainingQuantity
                End If

            End If
            For Each drView As DataRowView In dvEditDeletePackagingItems

                ' drView.Delete()
                If drView("IsNew") = False Then
                    drView("Status") = False
                    drView("IsStatus") = "Deleted"
                Else
                    drView.Delete()
                End If


            Next


            If Not IsHeader Then
                dvEditDeletePackagingDeliveryItems = New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "1=1 " & addPackCondtion, "", DataViewRowState.CurrentRows)
            Else
                dvEditDeletePackagingDeliveryItems = New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "1=1  AND BillLineNo =" & rowIndex, "", DataViewRowState.CurrentRows)
            End If



            If grdSOItems.Controls.Find("btnPlus" + userSrNo, True).Count() > 0 Then
                For Each c As Control In grdSOItems.Controls.Find("btnPlus" + userSrNo, True)
                    grdSOItems.Controls.Remove(c)
                    Me.Controls.Remove(c)
                Next
                'Me.Batchbarcode.RemoveAll(Function(w) w.userSrNo = userSrNo)

            End If
            If dvEditDeletePackagingDeliveryItems.Count > 0 Then
                For Each drView2 As DataRowView In dvEditDeletePackagingDeliveryItems
                    'drView2.Delete()
                    ' drView2("Status") = False
                    If drView2("IsNew") = False Then
                        drView2("Status") = False
                    Else
                        drView2.Delete()
                    End If
                    '  drView2("IsStatus") = "Deleted"
                Next
                _dsPackagingDelivery.AcceptChanges()
                'CalculateSalesOrderSummary(dsScan)
                'RefreshScanData(dsScan)
                'GridSetting()
            End If
            If dvEditDeleteItems.Count > 0 Then
                dvEditDeleteItems.AllowEdit = True

                For Each drView As DataRowView In dvEditDeleteItems

                    ' drView.Delete()
                    If drView("IsNew") = False Then
                        drView("Status") = False
                        drView("IsStatus") = "Deleted"
                    Else
                        drView.Delete()
                    End If


                Next
                If Me.Batchbarcode.Where(Function(w) w.EAN = vEAN).FirstOrDefault() IsNot Nothing Then
                    Me.Batchbarcode.RemoveAll(Function(w) w.EAN = vEAN)
                End If
                If DtSOStr.Rows.Count > 0 Then
                    dvEditDeleteSTRItems = New DataView(DtSOStr, "DeliveryIndex=" & rowIndex, "", DataViewRowState.CurrentRows)
                    For Each drViewSTR As DataRowView In dvEditDeleteSTRItems
                        drViewSTR("Status") = False
                    Next
                    DtSOStr.AcceptChanges()
                    dtSTR = DtSOStr.Copy()
                End If
            End If
            If IsApplyPromotion Then
                cmdClrAllPromo_Click(Nothing, Nothing)
            End If
            If IsHeader Then
                If DtSoBulkRemarks.Rows.Count > 0 Then
                    dvRemarks = New DataView(DtSoBulkRemarks, "SrNo='" & rowIndex & "' ", "", DataViewRowState.CurrentRows)
                    If dvRemarks.Count > 0 Then
                        For Each drView2 As DataRowView In dvRemarks
                            drView2.Delete()
                        Next
                        DtSoBulkRemarks.AcceptChanges()
                    End If
                End If
            End If
            dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            dsPackagingVar.AcceptChanges()
            _dsPackagingDelivery.AcceptChanges()
            _dsScan.AcceptChanges()
            RefreshLoadSOData()
            CalculateSalesOrderSummory(dsScan)
            GridItemSetting()
            LoadRemarks(DtSoBulkRemarks, True)
            If grdSOItems.Rows.Count = 1 Then
                'CtrlProductImage.ShowArticleImage("")
                'PictureBoxImages.Image = Nothing
                lblOrderQty.Text = 0
                lblPickupQty.Text = 0
                CtrllblBaltoPay.Text = "0.00"
                CtrllblTaxAmt.Text = "0.00"
                CtrllblNetAmt.Text = "0.00"
                CtrllblAmtPaid.Text = "0.00"
                CtrllblTaxAmt.Text = "0.00"
                'CtrllblMinAdv.Text = "0.00"
                CtrllblDiscAmt.Text = "0.00"
                CtrllblDiscAmt.Text = "0.00"
                CtrllblDiscPerc.Text = "0.00"
                CtrllblOtherCharges.Text = "0.00"
                lblOrderQty.Text = "0.00"
                lblPickupQty.Text = "0.00"
                CtrllblGrossAmt.Text = "0.00"
                lblReceivedAmt.Text = strZero
            End If


        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function

    ''' <summary>
    ''' Add Article In Scan DataGrid
    ''' </summary>
    ''' <param name="drItemsRow">Data Row</param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function SetScanItemInSO(ByVal drItemsRow As DataRow) As Boolean
        Dim dtTaxCalc As DataTable
        Dim drAddItem As DataRow
        Dim findkeyTax(4) As Object

        Dim vTotalNetAmt As Double = 0.0
        Dim vIncTaxAmt As Double = 0.0
        Dim vExclTaxAmt As Double = 0.0
        Dim vGetArtilcePrice As Double = 0.0

        Try
            If Not (drItemsRow Is Nothing) Then

                StockQty = objCM.GetStocks(vSiteCode, drItemsRow.Item("EAN"), drItemsRow.Item("ArticleCode"), True, False, IIf(IsDBNull(drItemsRow.Item("BatchBarcode")) = False, drItemsRow.Item("BatchBarcode"), String.Empty))

                'Rakesh:06.11.2013-->7895 : Avoid stock check validation when order place from SO & BL
                'If CDbl(StockQty) <= 0 Then
                '    If clsDefaultConfiguration.NegativeInventoryAllowed = False Then
                '        ShowMessage(getValueByKey("SO001"), "SO001 - " & getValueByKey("CLAE04"))
                '        Exit Function
                '    End If
                'End If

                If IsMRPOpen = True Then
                    Dim objPrompt As New frmSpecialPrompt(getValueByKey("CMR15"))
                    objPrompt.ShowMessage = False
                    objPrompt.ShowTextBox = True
                    objPrompt.AllowDecimal = True
                    objPrompt.ShowDialog()

                    vGetArtilcePrice = objPrompt.GetResult()
                    objPrompt.Dispose()

                    If CDbl(vGetArtilcePrice) <= 0 Then
                        ShowMessage(getValueByKey("SO036"), "SO036 - " & getValueByKey("CLAE04"))
                        'ShowMessage("Article is Removing As no Price found on it.", "Information")
                        Exit Function
                    End If
                Else
                    vGetArtilcePrice = drItemsRow.Item("SELLINGPRICE")
                End If

                ''---- If it is case of combo then need to add new record each time 
                'Dim dr() = DtSoBulkComboHdr.Select("PackagingBoxCode='" & drItemsRow.Item("ArticleCode") & "'")
                'If dr.Count > 1 Then
                '    drAddItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='A00 df sfs000NOT'")
                'Else
                '    If IsDBNull(drItemsRow.Item("BatchBarcode")) = False Then
                '        drAddItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' And BatchBarcode = '" & drItemsRow.Item("BatchBarcode") & "'")
                '    Else
                '        drAddItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' And BatchBarcode IS NULL")
                '    End If
                'End If
                drAddItemExists = fnAnalyzeItem(drItemsRow)

                'If IsDBNull(drItemsRow.Item("BatchBarcode")) = False Then
                '    drAddItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' And BatchBarcode = '" & drItemsRow.Item("BatchBarcode") & "'")
                'Else
                '    drAddItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "'  And BatchBarcode IS NULL")
                'End If
                'drAddItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "'")              

                If clsDefaultConfiguration.IsBatchManagementReq Then

                    If (drAddItemExists.Count > 0 AndAlso Not (StockQty > drAddItemExists(0)("PickUpQty"))) Then
                        If (ArticleScanWithBatchBarcode) Then
                            ShowMessage(getValueByKey("SO001"), "SO001 - " & getValueByKey("CLAE04"))
                            drAddItemExists(0)("Quantity") = drAddItemExists(0)("Quantity") + 1
                            'Exit Function
                        End If
                    End If
                End If

                If IsNewArticle = True Then
                    If drAddItemExists.Length = 0 Then
                        drAddItem = _dsScan.Tables("ItemScanDetails").NewRow
                        drAddItem("Quantity") = 1
                        drAddItem("DeliverySiteCode") = DeliverySiteCode
                        drAddItem("PickUpQty") = 0
                        drAddItem("DeliveredQty") = 0
                        drAddItem("IsStatus") = "Updated"
                        drAddItem("BillLineNo") = vRowIndex
                        drAddItem("SrNo") = vRowIndex
                        drAddItem("PackagingIndex") = vPackagingIndex
                        drAddItem("DeliveryIndex") = vDeliveryIndex
                        drAddItem("IsNew") = True
                        drAddItem("Status") = True
                    Else
                        drAddItem = drAddItemExists(0)
                        vGetArtilcePrice = drAddItem("SELLINGPRICE")
                        drAddItem("IsStatus") = "Updated"
                        'If IsEditItem = False Then
                        If clsDefaultConfiguration.IsBatchManagementReq Then
                            Dim OrderQty As Decimal = Batchbarcode.Where(Function(w) w.EAN = drAddItem("EAN").ToString()).Sum(Function(w) w.Qty) + drAddItem("DeliveredQty")

                            If drAddItem("Quantity") < OrderQty Then
                                drAddItem("Quantity") = drAddItem("Quantity") + 1
                            End If

                            If (Not ArticleScanWithBatchBarcode) Then
                                drAddItem("Quantity") = drAddItem("Quantity") + 1
                            End If
                        Else
                            drAddItem("Quantity") = drAddItem("Quantity") + 1
                        End If

                        '    Else
                        '    drAddItem("Quantity") = grdSOItems.Item(grdSOItems.Row, "Quantity")
                        'End If
                    End If
                Else

                    If drAddItemExists.Length = 0 Or (drAddItemExists.Length > 0 AndAlso drAddItemExists(0).Item("IsStatus") = "Deleted") Then
                        drAddItem = drAddItemExists(0)
                        drAddItem("Quantity") = drAddItem("DeliveredQty") + 1
                        drAddItem("IsStatus") = "Updated"
                    Else
                        drAddItem = drAddItemExists(0)
                        drAddItem("IsStatus") = "Updated"
                        'If IsEditItem = False Then
                        If clsDefaultConfiguration.IsBatchManagementReq Then
                            If drAddItem("Quantity") < (Batchbarcode.Where(Function(w) w.EAN = drAddItem("EAN").ToString()).Sum(Function(w) w.Qty) + drAddItem("DeliveredQty")) Then
                                drAddItem("Quantity") = drAddItem("Quantity") + 1
                            End If

                        Else
                            drAddItem("Quantity") = drAddItem("Quantity") + 1
                        End If


                        'Else
                        '    drAddItem("Quantity") = grdSOItems.Item(grdSOItems.Row, "Quantity")
                        'End If
                    End If
                End If
                drAddItem("UOM") = drItemsRow.Item("UOM")
                drAddItem("Discount") = 0
                drAddItem("ArticleType") = drItemsRow.Item("ArticalTypeCode")
                If drItemsRow.Item("ArticalTypeCode") = "Combo" Then
                    drAddItem("IsCombo") = True
                Else
                    drAddItem("IsCombo") = False
                End If
                drAddItem("IsHeader") = True
                drAddItem("EAN") = drItemsRow.Item("EAN")
                drAddItem("Discription") = drItemsRow.Item("DISCRIPTION")
                drAddItem("BatchBarcode") = drItemsRow.Item("BatchBarcode")
                If drAddItemExists.Length = 0 Then
                    drAddItem("SellingPrice") = FormatNumber(vGetArtilcePrice, 2)
                End If

                drAddItem("LastNodeCode") = drItemsRow.Item("Nodes").ToString()
                If IsCSTApplicable Then
                    dtTaxCalc = objCM.getTax(vSiteCode, String.Empty, "SO201", drAddItem("Quantity"), drAddItem("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
                Else
                    dtTaxCalc = objCM.getTax(vSiteCode, drItemsRow.Item("ARTICLECODE"), "SO201", drAddItem("Quantity"), drAddItem("EAN"))
                End If

                If dtTaxCalc.Rows.Count > 0 AndAlso Not dtTaxCalc Is Nothing Then 'vipin
                    drAddItem("TaxInPer") = dtTaxCalc.Compute("Sum(Value)", "")
                    drAddItem("Taxper") = dtTaxCalc.Compute("Sum(Value)", "") '' added by ketan pC GST UI Changes 
                Else
                    drAddItem("Taxper") = 0
                End If

                objCM.DecimalDigits = clsDefaultConfiguration.DecimalPlaces

                vTotalNetAmt = Math.Round(vGetArtilcePrice * drAddItem("Quantity"), 3)
                If dtTaxCalc.Rows.Count <> 0 Then

                    If IsCSTApplicable Then
                        'vTotalNetAmt = vTotalNetAmt - GetTaxableAmountForCst(drItemsRow.Item("ARTICLECODE"), drItemsRow.Item("EAN"), drAddItem("Quantity"), vTotalNetAmt)
                        'dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                        'objCM.getCalculatedDataSet(dtTaxCalc, drAddItem("Quantity"), True)

                        Dim inctax = GetTaxableAmountForCst(drItemsRow.Item("ARTICLECODE"), drItemsRow.Item("EAN"), drAddItem("Quantity"), vTotalNetAmt)
                        vTotalNetAmt = vTotalNetAmt - inctax
                        dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                        objCM.getCalculatedDataSet(dtTaxCalc)
                        vTotalNetAmt = vTotalNetAmt + dtTaxCalc(0)("TAXAMOUNT")
                        If drAddItemExists.Length = 0 Then
                            drAddItem("SellingPrice") = vGetArtilcePrice - (inctax / dtTaxCalc(0)("ITEMQTY"))
                        End If



                    Else
                        dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                        objCM.getCalculatedDataSet(dtTaxCalc)
                    End If

                    'dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                    'objCM.getCalculatedDataSet(dtTaxCalc, drAddItem("Quantity"))

                    For iRowTax = 0 To dtTaxCalc.Rows.Count - 1

                        If CDbl(dtTaxCalc.Rows(iRowTax)("VALUE").ToString) <> 0 Then
                            If dtTaxCalc.Rows(iRowTax)("INCLUSIVE") = True Then
                                vIncTaxAmt = vIncTaxAmt + CDbl(dtTaxCalc.Rows(iRowTax)("TAXAMOUNT"))
                            Else
                                vExclTaxAmt = vExclTaxAmt + CDbl(dtTaxCalc.Rows(iRowTax)("TAXAMOUNT"))
                            End If
                        End If
                    Next

                    vIncTaxAmt = Math.Round(vIncTaxAmt, 3)
                    vExclTaxAmt = Math.Round(vExclTaxAmt, 3)

                    Dim drRowTax As DataRow
                    If dtTaxCalc.Rows.Count <> 0 Then

                        Dim vTaxLineNo As Integer = 0

                        For Each drRowTax In dtTaxCalc.Rows
                            vTaxLineNo += 1

                            findkeyTax(0) = vSiteCode
                            findkeyTax(1) = vfinancialYear
                            '---abc
                            findkeyTax(2) = CtrlTxtOrderNo.Text
                            findkeyTax(3) = drAddItem("EAN")
                            findkeyTax(4) = vTaxLineNo

                            drTax = dsMain.Tables("SalesOrderTaxDtls").Rows.Find(findkeyTax)

                            If drTax Is Nothing Then
                                drTax = dsMain.Tables("SalesOrderTaxDtls").NewRow

                                drTax("SiteCode") = vSiteCode
                                drTax("FinYear") = vfinancialYear
                                '---abc
                                'drTax("SaleOrderNumber") = CtrlSalesInfo.CtrlTxtOrderNo.Text
                                drTax("SaleOrderNumber") = CtrlTxtOrderNo.Text
                                drTax("EAN") = drAddItem("EAN")
                                drTax("TaxLineNo") = vTaxLineNo
                                drTax("TaxLabel") = drRowTax("TaxCode")
                                drTax("TaxValue") = drRowTax("TaxAmount")

                                dsMain.Tables("SalesOrderTaxDtls").Rows.Add(drTax)
                            Else
                                drTax("SiteCode") = vSiteCode
                                '---abc
                                'drTax("SaleOrderNumber") = CtrlSalesInfo.CtrlTxtOrderNo.Text
                                drTax("SaleOrderNumber") = CtrlTxtOrderNo.Text
                                drTax("EAN") = drAddItem("EAN")
                                drTax("TaxLineNo") = vTaxLineNo
                                drTax("TaxLabel") = drRowTax("TaxCode")
                                drTax("TaxValue") = drRowTax("TaxAmount")
                            End If
                        Next
                    End If

                    drAddItem("ExclTaxAmt") = vExclTaxAmt
                    drAddItem("IncTaxAmt") = vIncTaxAmt
                    'TotalTaxAmt
                    drAddItem("TotalTaxAmt") = vIncTaxAmt + vExclTaxAmt
                Else
                    drAddItem("ExclTaxAmt") = 0
                    drAddItem("IncTaxAmt") = 0
                    drAddItem("TotalTaxAmt") = 0
                End If

                drAddItem("NetAmount") = FormatNumber(vTotalNetAmt + vExclTaxAmt, 2)
                '---abc
                'drAddItem("ExpDelDate") = CtrlSalesInfo.CtrlDtExpDelDate.Value
                drAddItem("Stock") = StockQty
                drAddItem("IsCLP") = True

                drAddItem("ArticleCode") = drItemsRow.Item("ARTICLECODE")
                drAddItem("GrossAmt") = Math.Round(drAddItem("SellingPrice") * drAddItem("Quantity"), 3)
                'drAddItem("ReservedQty") = 0
                drAddItem("CLPPoints") = 0
                drAddItem("CLPDiscount") = 0

                TotalSalesQty = drAddItem("PickUpQty") + drAddItem("DeliveredQty")
                NetArticleRate = drAddItem("NetAmount") / drAddItem("Quantity")
                drAddItem("MinPayAmt") = Math.Round(((drAddItem("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)

                drAddItem("PromotionId") = 0
                drAddItem("PckgSize") = 0
                drAddItem("PckgQty") = 0
                drAddItem("LineDiscount") = 0
                drAddItem("TotalDiscPercentage") = 0
                drAddItem("FirstLevel") = String.Empty
                drAddItem("TopLevel") = String.Empty
                drAddItem("CostAmount") = drItemsRow.Item("CostAmt")
                'Rakesh-01.10.2013:8006--> Allow to add new article in sales order
                If Not (drAddItem("NetAmount") = 0.0) Then
                    If drAddItemExists.Length = 0 Then
                        drAddItem("RowIndex") = vRowIndex
                        'Change by Ashish on 29 Nov 2010
                        'Commenting the below line since it was adding rows one below other in the grid
                        'instead of adding the recent scanned item on top of the grid
                        _dsScan.Tables("ItemScanDetails").Rows.Add(drAddItem)
                        '_dsScan.Tables("ItemScanDetails").Rows.InsertAt(drAddItem, 0)
                        'end of change
                        SetPackagingBaseVarionInSO(drAddItem)

                        vRowIndex = vRowIndex + 1
                        vPackagingIndex = vPackagingIndex + 1
                        vDeliveryIndex = vDeliveryIndex + 1

                        '---- New Row Added can Generate STR 
                        IsStrGenerateApplicable = True
                        If Batchbarcode IsNot Nothing AndAlso Batchbarcode.Select(Function(w) w.EAN = drAddItem("EAN").ToString()).Count() > 0 Then
                            drAddItem("PickUpQty") = Batchbarcode.Where(Function(w) w.EAN = drAddItem("EAN").ToString()).Sum(Function(w) w.Qty)
                            grdSOItems_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(grdSOItems.RowSel, grdSOItems.Cols("PickUpQty").Index))
                        End If
                    Else
                        Dim result As DataRow() = _dsPackagingVar.Tables("PackagingMaterial").Select("RowIndex='" + drAddItem("RowIndex").ToString() + "' and PkgLineNo='" + drAddItem("PackagingIndex").ToString() + "'")
                        If result.Length > 0 Then
                            result(0)("Quantity") = drAddItem("Quantity")
                            result(0)("GrossAmt") = drAddItem("GrossAmt")
                            result(0)("NetAmount") = drAddItem("NetAmount")
                            result(0)("IncTaxAmt") = drAddItem("IncTaxAmt")
                            result(0)("ExclTaxAmt") = drAddItem("ExclTaxAmt")
                            result(0)("TotalTaxAmount") = drAddItem("TotalTaxAmt")
                            result(0)("TaxInPer") = drAddItem("TaxInPer")   'vipin
                            result(0)("TaxPer") = drAddItem("TaxInPer")   ' added by ketan GST UI chnages 


                        End If
                        _dsPackagingVar.AcceptChanges()
                        If Batchbarcode IsNot Nothing AndAlso Batchbarcode.Select(Function(w) w.EAN = drAddItem("EAN").ToString()).Count() > 0 Then

                            If (ArticleScanWithBatchBarcode AndAlso StockQty > drAddItem("PickUpQty")) Then
                                drAddItem("PickUpQty") = Batchbarcode.Where(Function(w) w.EAN = drAddItem("EAN").ToString()).Sum(Function(w) w.Qty)
                            ElseIf (ArticleScanWithBatchBarcode AndAlso drAddItem("ReservedQty")) Then
                                ShowMessage(getValueByKey("SO001"), "SO001 - " & getValueByKey("CLAE04"))
                            End If

                            grdSOItems_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(grdSOItems.RowSel, grdSOItems.Cols("PickUpQty").Index))
                        End If

                        'If IsDBNull(drAddItem("BatchBarcode")) = False Then
                        '    'If drAddItem("PickUpQty") > 0 Then
                        '    drAddItem("PickUpQty") = drAddItem("Quantity")
                        '    grdSOItems.Col = grdSOItems.Cols("PickUpQty").Index
                        '    Dim _index As Integer = 0
                        '    For i As Integer = 0 To dsScan.Tables("ItemScanDetails").Rows.Count - 1 Step 1
                        '        If If(dsScan.Tables("ItemScanDetails").Rows(i)("BatchBarcode") Is DBNull.Value, String.Empty, dsScan.Tables("ItemScanDetails").Rows(i)("BatchBarcode")) = drAddItem("BatchBarcode") AndAlso dsScan.Tables("ItemScanDetails").Rows(i)("ArticleCode") = drAddItem("ArticleCode") Then
                        '            _index = i + 1
                        '            Exit For
                        '        End If
                        '    Next
                        '    grdSOItems.Row = _index
                        '    grdSOItems_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(_index, grdSOItems.Cols("PickUpQty").Index))
                        '    'End If
                        'End If
                    End If
                Else
                    ShowMessage(getValueByKey("SO004"), "SO004 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Article Tax Details does not Found. ", "Tax Details")
                End If
                'If Batchbarcode IsNot Nothing AndAlso Batchbarcode.Select(Function(w) w.EAN = drAddItem("EAN").ToString()).Count() > 0 Then
                '    drAddItem("PickUpQty") = Batchbarcode.Where(Function(w) w.EAN = drAddItem("EAN").ToString()).Sum(Function(w) w.Qty)
                '    'grdSOItemss_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(1, grdSOItems.Cols("PickUpQty").Index))
                '    grdSOItems_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(grdSOItems.RowSel, grdSOItems.Cols("PickUpQty").Index))
                'End If

                RefreshLoadSOData()
            End If
            CalculateSalesOrderSummory(dsScan)
            IsEditItem = False
            IsNewArticle = False

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

        Return True
    End Function

#End Region
#Region "Search Sales Order"

    ''' <summary>
    ''' Search Old Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub BtnSearchSalesOrder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnSearchSalesOrder.Click 'Handles BtnSearchSalesOrder.Click
        Try
            'Commented by rama on 1-jul-2009
            'Dim objSearchSO As New frmSearchSO
            'objSearchSO.ShowDialog()
            'vSalesNo = SearchSalesOrderCustomer(clsAdmin.SiteCode)
            'Dim tempsaleorderNo As String = SearchSalesOrderCustomer(clsAdmin.SiteCode)
            'added by khusrao adil 
            'merged on 6-11-2017 for pc sprint 4
            Dim tempsaleorderNo As String = ""
            If EditCallFromOrderPackagingScreen = True AndAlso SalesORderNumberFromOrderPackagingScreen <> "" AndAlso vSalesNo = "" Then
                tempsaleorderNo = SalesORderNumberFromOrderPackagingScreen
            Else
                tempsaleorderNo = SearchSalesOrderCustomer(clsAdmin.SiteCode)
            End If
            IsPromotionApplyFromFrontEnd = False
            If Not (tempsaleorderNo = "" Or tempsaleorderNo = String.Empty) Then
                vSalesNo = tempsaleorderNo
                If boolIsReturn = True Then
                    CtrlBtnReturn.Tag = "Cancel Return"
                    CtrlBtnReturn_Click(sender, e)
                End If
                CtrlTxtOrderNo.Text = vSalesNo
                ResetSalesOrder()
                dtSTRFactoryRemark = objPCSO.GetFactoryRemarks(vSalesNo)
                SetSalesOrderInForm(vSalesNo)
                'CtrlSalesPerson.CtrlTxtBox.Focus()
                CtrlSalesPerson.AndroidSearchTextBox.Focus()
                IsStrGenerateApplicable = False
                ItemScan.Visible = True
                CtrlSalesPerson.CtrlTxtBox.Visible = True
                BtnSearchItem.Visible = True
                BtnSOSave.Enabled = True
                BtnSOPrint.Enabled = True
                rbnGrpCMPromotion.Enabled = True
                BtnSOAcceptPayment.Enabled = True
                BtnSOOtherCharges.Enabled = True
                'BtnSOReturn.Enabled = True
                BtnSOStockCheck.Enabled = True
                BtnSOCalculater.Enabled = True
            Else
                Exit Sub
            End If
            dtSTRFactoryRemark = objPCSO.GetFactoryRemarks(vSalesNo)
            GridInvoiceSetting()
            GridItemSetting()
            GridDeliverdSetting()
            IssuingCV = False
            TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetails")
            'CtrlSalesPerson.CtrlTxtBox.TabIndex = 8
            'fnGridColAutoSize(grdSOItems)
            'CtrlSalesPerson.CtrlTxtBox.Focus()
            CtrlSalesPerson.AndroidSearchTextBox.Focus()
            '---abc
            'CtrlSalesInfo.CtrlDtExpDelDate.Enabled = True

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub
    Private Sub FillSalesOrder(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        Try
            '---abc
            'vSalesNo = CtrlSalesInfo.CtrlTxtOrderNo.Text
            If e.KeyCode = Keys.Enter AndAlso vSalesNo <> "" Then
                ResetSalesOrder()
                SetSalesOrderInForm(vSalesNo)
                'CtrlSalesPerson.CtrlTxtBox.Focus()
                CtrlSalesPerson.AndroidSearchTextBox.Focus()

                ItemScan.Visible = True
                CtrlSalesPerson.CtrlTxtBox.Visible = True
                BtnSearchItem.Visible = True

                BtnSOSave.Enabled = True
                BtnSOPrint.Enabled = True
                rbnGrpCMPromotion.Enabled = True
                BtnSOAcceptPayment.Enabled = True
                BtnSOOtherCharges.Enabled = True
                'BtnSOReturn.Enabled = True
                BtnSOStockCheck.Enabled = True
                BtnSOCalculater.Enabled = True
                GridInvoiceSetting()
                GridItemSetting()
                GridDeliverdSetting()
                IssuingCV = False
                TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetails")
                'CtrlSalesPerson.CtrlTxtBox.Focus()
                CtrlSalesPerson.AndroidSearchTextBox.Focus()

            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub

    ''' <summary>
    ''' Search Old Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub txtSalesNo_Leave(ByVal sender As Object, ByVal e As System.EventArgs) 'Handles CtrlSalesInfo.CtrlTxtOrderNo.Leave
        Try
            '---abc
            'If Not (CtrlSalesInfo.CtrlTxtOrderNo.Text = String.Empty) AndAlso CtrlSalesInfo.CtrlTxtOrderNo.Text.Length > 2 Then
            '    ResetSalesOrder()

            '    SetSalesOrderInForm(CtrlSalesInfo.CtrlTxtOrderNo.Text)
            '    grdSOItems.Select(grdSOItems.Rows.Count - 1, 1, True)
            '    If dsMain.Tables.Count > 0 Then
            '        If vSOStatus = "Closed" Or vSOStatus = "Return" Or vSOStatus = "Cancel" Then
            '            ItemScan.Visible = False
            '            CtrlSalesPerson.CtrlTxtBox.Visible = False
            '            BtnSearchItem.Visible = False

            '            BtnSOSave.Enabled = False
            '            BtnSOPrint.Enabled = False
            '            rbnGrpCMPromotion.Enabled = False
            '            BtnSOAcceptPayment.Enabled = False

            '            'BtnSOReturn.Enabled = False
            '            BtnSOOtherCharges.Enabled = False
            '            BtnSOStockCheck.Enabled = False
            '            BtnSOCalculater.Enabled = False
            '        Else
            '            CtrlSalesPerson.CtrlTxtBox.Visible = True
            '            BtnSearchItem.Visible = True

            '            BtnSOSave.Enabled = True
            '            BtnSOPrint.Enabled = True
            '            rbnGrpCMPromotion.Enabled = True
            '            BtnSOAcceptPayment.Enabled = True

            '            'BtnSOReturn.Enabled = True
            '            BtnSOOtherCharges.Enabled = True
            '            BtnSOStockCheck.Enabled = True
            '            BtnSOCalculater.Enabled = True
            '        End If
            '        'Open   Closed  Return  Cancel
            '    End If
            'Else
            '    ResetSalesOrder()
            'End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

        CtrlSalesPerson.CtrlTxtBox.TabIndex = 8
        'CtrlSalesPerson.CtrlTxtBox.Focus()
        CtrlSalesPerson.AndroidSearchTextBox.Focus()
    End Sub

    ''' <summary>
    ''' Search Old Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub txtSalesNo_PreviewKeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.PreviewKeyDownEventArgs) 'Handles CtrlSalesInfo.CtrlTxtOrderNo.PreviewKeyDown
        If (e.KeyCode = Keys.Enter) Then
            txtSalesNo_Leave(sender, New System.EventArgs)

            CtrlSalesPerson.CtrlTxtBox.TabIndex = 8
            'CtrlSalesPerson.CtrlTxtBox.Focus()
            CtrlSalesPerson.AndroidSearchTextBox.Focus()
        End If
    End Sub

    ''' <summary>
    ''' Load Old Sales Order in window
    ''' </summary>
    ''' <param name="vSalesNo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function SetSalesOrderInForm(ByVal vSalesNo As String) As Boolean
        Try
            '---abc
            ' CtrlSalesInfo.CtrlTxtRemarks.Enabled = True
            If Not (vSalesNo > "0" Or vSalesNo = String.Empty) Then
                Exit Function
            Else
                Dim Dstemp = objPCSO.GetSOBulkComboTableStructForPC(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                DtSoBulkComboHdr = Dstemp.Tables("DtSoBulkComboHdr")
                DtSoBulkComboDtl = Dstemp.Tables("DtSoBulkComboDtl")

                Dim balAmt As Decimal = 0
                Dim findKey(2) As Object
                Dim drSearchHdr As DataRow
                Dim dvAddsInfo As New DataView
                _dsMain = objPCSO.GetSOTableStructEdit(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo), "Cancel")

                '''--- Add By Mahesh Nagar IF Pick Up Qty is >0 then stock Transfer disabled ---
                IsSTRGenerate = False
                'Dim dr() = dsMain.Tables("SalesOrderDtl").Select("DeliveredQty>0")
                'If dr.Length > 0 Then
                '    cmdGenerateSTR.Enabled = False
                'Else
                '    cmdGenerateSTR.Enabled = True
                'End If
                cmdGenerateSTR.Enabled = True
                If Not (dsMain Is Nothing) AndAlso dsMain.Tables("SalesOrderHDR").Rows.Count > 0 Then
                    If dsMain.Tables("SalesOrderHDR").Rows(0)("SOStatus").ToString.ToUpper() = "CLOSED" Then
                        ShowMessage(getValueByKey("SO082"), "SO082 - " & getValueByKey("CLAE04"))
                        'this is allowed populate for historical data.
                        rbgrpSaveNprint.Enabled = False
                        ' C1Sizer2.Enabled = False
                        CtrlSalesPerson.Enabled = False
                        CtrlRbn1.DgrpPayments.Enabled = False
                        grdSOItems.Enabled = False
                    ElseIf dsMain.Tables("SalesOrderHDR").Rows(0)("SOStatus").ToString.ToUpper() = "CANCEL" Then
                        ShowMessage(getValueByKey("SO082"), "SO082 - " & getValueByKey("CLAE04"))
                        'this is allowed populate for historical data.
                        rbgrpSaveNprint.Enabled = False
                        '  C1Sizer2.Enabled = False
                        CtrlSalesPerson.Enabled = False
                        CtrlRbn1.DgrpPayments.Enabled = False
                        grdSOItems.Enabled = False
                    Else
                        rbgrpSaveNprint.Enabled = True
                        cmdPrint.Enabled = True
                        ' C1Sizer2.Enabled = True
                        CtrlSalesPerson.Enabled = True
                        CtrlRbn1.DgrpPayments.Enabled = True
                        grdSOItems.Enabled = True
                        'End this is allowed populate for historical data.
                        'Exit Function
                    End If
                End If

                If Not (dsMain Is Nothing) AndAlso dsMain.Tables("SalesOrderHDR").Rows.Count > 0 Then

                    '---abc
                    'CtrlSalesInfo.CtrlTxtOrderNo.Text = vSalesNo
                    BtnSearchItem.Enabled = True
                    vfinancialYear = dsMain.Tables("SalesOrderHDR").Rows(0)("FinYear")
                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear
                    findKey(2) = vSalesNo
                    drSearchHdr = dsMain.Tables("SalesOrderHDR").Rows.Find(findKey)
                    vSalesOrderCreationDate = dsMain.Tables("SalesOrderHDR").Rows(0)("CREATEDON")
                    balAmt = dsMain.Tables("SalesOrderHDR").Rows(0)("BalanceAmount")

                    vIsDelvery = dsMain.Tables("SalesOrderHDR").Rows(0)("IsDelivery")
                    vIsMultiDelvery = dsMain.Tables("SalesOrderHDR").Rows(0)("IsMultiDelivery")
                    vIsMultiPickup = dsMain.Tables("SalesOrderHDR").Rows(0)("IsMultiPickup")
                    Dim delDateTime As DateTime
                    If Not dsMain Is Nothing AndAlso dsMain.Tables.Count > 0 Then
                        If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count > 0 Then
                            Dim delDate As DateTime = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows(0)("DeliveryDate")
                            Dim delTime As DateTime = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows(0)("DeliveryTime")
                            delDateTime = delDate.Date & Space(1) & delTime.ToLongTimeString
                        End If
                    End If
                    If vIsDelvery = True Then
                        rdDelYes.Checked = True
                        deliveryTimer.Start()
                        CtrlLblDelivery.Visible = True
                        lblMultiPickupDel.Text = "Multi Delivery"
                        If vIsMultiDelvery Then
                            rbDPYes.Checked = True
                        Else
                            rbDPNo.Checked = True
                            dgDeliveryLocation.Cols("DeliveryDate").AllowEditing = False
                            dgDeliveryLocation.Cols("DeliveryTime").AllowEditing = False
                            isEditLoad = True
                            ctrlDtDeliveryDate.Value = delDateTime
                            isEditLoad = False
                        End If
                    Else
                        rdDelNo.Checked = True
                        lblMultiPickupDel.Text = "Multi Pickup"
                        If vIsMultiPickup Then
                            rbDPYes.Checked = True
                        Else
                            rbDPNo.Checked = True
                            dgDeliveryLocation.Cols("DeliveryDate").AllowEditing = False
                            dgDeliveryLocation.Cols("DeliveryTime").AllowEditing = False
                            isEditLoad = True
                            ctrlDtDeliveryDate.Value = delDateTime
                            isEditLoad = False
                        End If
                        'deliveryTimer.Stop()
                        'CtrlLblDelivery.Visible = False
                    End If

                    IsStrTabEnabled = IIf(dsMain.Tables("SalesOrderHDR").Rows(0)("IsSTRRaised") Is DBNull.Value, DateTime.Now, dsMain.Tables("SalesOrderHDR").Rows(0)("IsSTRRaised"))
                    If IsStrTabEnabled Then

                        TabSalesOrder.TabPages("TabPageItemSTRDetails").Enabled = True
                        lblStrRaised.Text = "Yes"
                    Else
                        TabSalesOrder.TabPages("TabPageItemSTRDetails").Enabled = False
                        lblStrRaised.Text = "-"
                    End If
                    IsResetRequired = objPCSO.GetSaleOrderCreationTime(clsAdmin.SiteCode, vSalesNo) ''wheen sale order is booked and it is one hour old

                    vSalesOrderExpectedDeliveryDate = IIf(drSearchHdr("ActualDeliveryDate") Is DBNull.Value, "", drSearchHdr("ActualDeliveryDate"))
                    'vSalesOrderExpectedDeliveryDate = IIf(CtrlSalesInfo.CtrlDtExpDelDate.Value Is DBNull.Value, DateTime.Now, CtrlSalesInfo.CtrlDtExpDelDate.Value)
                    If Not (drSearchHdr Is Nothing) Then
                        '---abc
                        'CtrlSalesInfo.CtrldtOrderDt.Value = Format(IIf(drSearchHdr("CREATEDON") Is DBNull.Value, "", drSearchHdr("CREATEDON")), vDateFormat)
                        'CtrlSalesInfo.CtrlDtExpDelDate.Visible = True

                        consDeliveryDate = IIf(drSearchHdr("ActualDeliveryDate") Is DBNull.Value, "", drSearchHdr("ActualDeliveryDate"))
                        vBalanceAmount = IIf(drSearchHdr("BalanceAmount") Is DBNull.Value, "", drSearchHdr("BalanceAmount"))
                        vAdvanceAmount = IIf(drSearchHdr("AdvanceAmt") Is DBNull.Value, "", drSearchHdr("AdvanceAmt"))

                        '---abc
                        'CtrlSalesInfo.CtrlDtExpDelDate.DisplayFormat.CustomFormat = DateFormat.ShortDate
                        'CtrlSalesInfo.CtrlDtExpDelDate.EditFormat.CustomFormat = DateFormat.ShortDate
                        'CtrlSalesInfo.CtrlDtExpDelDate.Value = consDeliveryDate

                        vSOStatus = drSearchHdr("SOStatus").ToString
                        '---abc
                        'CtrlSalesInfo.CtrlTxtRemarks.Text = IIf(drSearchHdr("Remarks") Is DBNull.Value, "", drSearchHdr("Remarks"))
                        'CtrlSalesInfo.CtrlTxtCustOrdRef.Text = IIf(drSearchHdr("CustomerOrderRef") Is DBNull.Value, "", drSearchHdr("CustomerOrderRef"))
                        'CtrlSalesInfo.CtrlTxtInvoice.Text = IIf(drSearchHdr("InvoiceCustName") Is DBNull.Value, "", drSearchHdr("InvoiceCustName"))

                        vSalesPerson = IIf(drSearchHdr("SalesExecutiveCode") Is DBNull.Value, "", drSearchHdr("SalesExecutiveCode"))
                        vCustomerNo = IIf(drSearchHdr("CustomerNo") Is DBNull.Value, "", drSearchHdr("CustomerNo"))
                        '---abc
                        'CtrlCustDtls1.lblCustTypeValue.Text = drSearchHdr("CustomerType")
                        If vSalesPerson <> "" Then
                            CtrlSalesPerson.CtrlSalesPersons.SelectedValue = vSalesPerson
                        End If

                        '----------
                        dtCustmInfo = objCustm.GetCustomerInformation("CLP", vSiteCode, clsAdmin.CLPProgram, vCustomerNo, CustFormat:=clsDefaultConfiguration.DetailedCustomerCreationformat, IsNewSalesOrder:=clsDefaultConfiguration.IsNewSalesOrder)

                        Dim custName As String
                        CustomerNo = dtCustmInfo.Rows(0)("CustomerNo")
                        If dtCustmInfo.Rows(0)("FIRSTNAME") <> String.Empty Then
                            custName = dtCustmInfo.Rows(0)("FIRSTNAME")
                        End If
                        If dtCustmInfo.Rows(0)("SURNAME") <> String.Empty Then
                            custName &= " " & dtCustmInfo.Rows(0)("SURNAME")
                        End If
                        If custName.Trim = String.Empty Then
                            CtrltxrCust.Text = "NA"
                        Else
                            CtrltxrCust.Text = custName
                            tooltip.SetToolTip(CtrltxrCust, CtrltxrCust.Text)
                        End If
                        If dtCustmInfo.Rows(0)("CardType").ToString() <> String.Empty Then
                            vCardType = dtCustmInfo.Rows(0)("CardType")
                            CLPCardType = dtCustmInfo.Rows(0)("CardType")
                        End If
                        If dtCustmInfo.Rows(0)("CompanyName") <> String.Empty Then
                            lblCompName.Text = dtCustmInfo.Rows(0)("CompanyName")
                        Else
                            lblCompName.Text = "-"
                        End If
                        tooltip.SetToolTip(lblCompName, lblCompName.Text)
                        If dtCustmInfo.Rows(0)("Department") <> String.Empty Then
                            CtrlLabel18.Text = dtCustmInfo.Rows(0)("Department")
                        Else
                            CtrlLabel18.Text = "-"
                        End If
                        tooltip.SetToolTip(CtrlLabel18, CtrlLabel18.Text)

                        '    ----  vipin added GST IN no IN So Form
                        If dtCustmInfo.Rows(0)("CHSN") = "-" Then
                            dtCustmInfo.Rows(0)("CHSN") = "Not Available"
                        End If
                        If dtCustmInfo.Rows(0)("CHSN") <> String.Empty Then
                            CgstIN.Font = New Font("Neo Sans", 9, FontStyle.Bold)
                            CgstIN.Text = dtCustmInfo.Rows(0)("CHSN")
                        Else
                            CgstIN.Text = "-"
                        End If

                        tooltip.SetToolTip(CgstIN, CgstIN.Text)

                        'If CtrlCustDtls1.CustmType = "CLP" Then
                        '    CtrlCustDtls1.rbCLPMember.Checked = True
                        'Else
                        '    CtrlCustDtls1.rbOtherCust.Checked = True
                        'End If

                        vAddressType = IIf(drSearchHdr("DeliveryAtCustAddressType") Is DBNull.Value, "", drSearchHdr("DeliveryAtCustAddressType"))

                        If vAddressType = "" Then
                            vCAddress = IIf(drSearchHdr("OtherDeliveryAdd") Is DBNull.Value, "", drSearchHdr("OtherDeliveryAdd"))
                        End If
                    End If

                    'Dim dt As DataTable
                    'dt = objCM.GetSalesPerson(vSiteCode, vSalesPerson)
                    'If Not (dt Is Nothing) AndAlso dt.Rows.Count > 0 Then
                    '    CtrlSalesPerson.CtrlSalesPersons.SelectedValue = dt.Rows(0).Item("SalesPersonName").ToString
                    'End If
                    _dsPackagingVar.Tables("PackagingMaterial").Clear()
                    _dsPackagingDelivery.Tables("PackagingDelivery").Clear()
                    dsScanTemp = objPCSO.SetSalesOrderInSOCancel(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                    _dsPackagingVar = objPCSO.SetSalesOrderPackVariationInSO(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                    dsPackagingDelivery = objPCSO.SetSalesOrderDeliveryInSO(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                    dtPickUpDisc = objPCSO.GetSOPickUpDiscount(IIf(vSalesNo = String.Empty, 0, vSalesNo), vSiteCode)
                    dtPickUpTaxAmt = objPCSO.GetSOPickUpTax(IIf(vSalesNo = String.Empty, 0, vSalesNo), vSiteCode)
                    dtPickUpDiscBillLineWise = objPCSO.GetSOPickUpDiscountBillLineWise(IIf(vSalesNo = String.Empty, 0, vSalesNo), vSiteCode) '$$ added by KETAN SO GST Changes 
                    dtPickUpDiscGrid = objPCSO.GetSalesOrderPickUpDisc(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                    dtPickUpTax = objPCSO.GetSalesOrderPickUpTax(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo)) '$$ added by KETAN SO GST Changes 
                    dtPickUpTaxAmtBillLineWise = objPCSO.GetSOPickUpTaxOnBillLineNo(IIf(vSalesNo = String.Empty, 0, vSalesNo), vSiteCode)
                    DTComboTaxPer = objPCSO.GetSOComboTaxPer(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))

                    'If result(0)("IsCombo") Then
                    '    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & drScanTemp("BillLineNo") & "'")
                    '    If discription.Length > 0 Then
                    '        drScan("Discription") = discription(0)("PackagingBoxName")
                    '    Else
                    '        drScan("Discription") = drScanTemp("Discription")
                    '    End If
                    'Else
                    '    drScan("Discription") = drScanTemp("Discription")
                    'End If

                    'Dim iTemp As Integer = 1
                    'For Each drscans As DataRow In dsPackagingDelivery.Tables(0).Rows
                    '    Dim billlineno = drscans("BillLineNo")
                    '    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & billlineno & "'")
                    '    If discription.Length > 0 Then
                    '        drscans("Discription") = "Order " & iTemp & ":" & discription(0)("PackagingBoxName")
                    '    Else
                    '        drscans("Discription") = "Order " & iTemp & ":" & drscans("Discription")
                    '    End If
                    '    iTemp += 1

                    'Next
                    '------
                    Dim dtPkg = New DataView(_dsPackagingVar.Tables(0), "status=true", "BillLineNo ASC", DataViewRowState.CurrentRows)
                    If dtPkg.Count > 0 Then
                        For Each drView As DataRowView In dtPkg
                            Dim billlineno = drView("BillLineNo")

                            If drView("BillLineNo") Then
                                Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & billlineno & "'")
                                If discription.Length > 0 Then
                                    drView("Discription") = discription(0)("PackagingBoxName")
                                Else
                                    drView("Discription") = drView("Discription")
                                End If
                            End If
                        Next
                    End If

                    Dim iTemp As Integer = 1
                    Dim dtTemp = New DataView(dsPackagingDelivery.Tables(0), "status=true", "BillLineNo ASC", DataViewRowState.CurrentRows)
                    If dtTemp.Count > 0 Then
                        For Each drView As DataRowView In dtTemp
                            Dim billlineno = drView("BillLineNo")

                            If drView("BillLineNo") Then
                                Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & billlineno & "'")
                                If discription.Length > 0 Then
                                    drView("Discription") = discription(0)("PackagingBoxName") '"Order " & iTemp & ":" & discription(0)("PackagingBoxName")
                                Else
                                    drView("Discription") = drView("Discription") '"Order " & iTemp & ":" & drView("Discription")
                                End If
                                iTemp += 1
                            End If
                        Next
                    End If

                    If Not IsResetRequired Then
                        If dsMain.Tables("SOPackagingBoxDeliveryTempDtl").Rows.Count > 0 Then
                            For Each drTempDeliverys As DataRow In dsMain.Tables("SOPackagingBoxDeliveryTempDtl").Rows
                                Dim resulDelivet As DataRow() = dsPackagingDelivery.Tables(0).Select("pkgLineno ='" & drTempDeliverys("pkgLineno") & "' and deliveryLineno ='" & drTempDeliverys("deliveryLineno") & "'")
                                If resulDelivet.Length > 0 Then
                                    resulDelivet(0)("PickUpQty") = drTempDeliverys("PickUpQty")
                                    'resulDelivet(0)("DeliveredQty") = drTempDeliverys("DeliveredQty")
                                End If
                                Dim resulpackVar As DataRow() = _dsPackagingVar.Tables(0).Select("pkgLineno ='" & drTempDeliverys("pkgLineno") & "' and BillLineno ='" & drTempDeliverys("BillLineno") & "'")
                                If resulpackVar.Length > 0 Then
                                    resulpackVar(0)("PickUpQty") += drTempDeliverys("PickUpQty")
                                    'resulpackVar(0)("DeliveredQty") = drTempDeliverys("DeliveredQty")
                                End If
                            Next

                            'For Each drscans As DataRow In dsScanTemp.Tables(0).Rows
                            '    Dim pickUpQty = drscans("PickupQty")
                            '    Dim deliveredQty = drscans("deliveredQty")
                            '    drscans("PickupQty") = deliveredQty
                            '    drscans("deliveredQty") = pickUpQty

                            'Next
                            'For Each drPacks As DataRow In _dsPackagingVar.Tables(0).Rows
                            '    Dim pickUpQty = drPacks("PickupQty")
                            '    Dim deliveredQty = drPacks("deliveredQty")
                            '    drPacks("PickupQty") = deliveredQty
                            '    drPacks("deliveredQty") = pickUpQty

                            'Next
                            'For Each drDeliverys As DataRow In dsPackagingDelivery.Tables(0).Rows
                            '    Dim pickUpQty = drDeliverys("PickupQty")
                            '    Dim deliveredQty = drDeliverys("deliveredQty")
                            '    drDeliverys("PickupQty") = deliveredQty
                            '    drDeliverys("deliveredQty") = pickUpQty
                            'Next
                        End If
                    End If

                    '-------Added By Prasad for Deleting Address if selected Delivery as No 
                    'If rdDelNo.Checked = True Then
                    '    dtOrderAddresses = objComn.GetSOAddresses(vCustomerNo, clsAdmin.CLPProgram, False)
                    '    If dtOrderAddresses.Rows.Count > 0 Then
                    '        Dim drTo() As DataRow = dtOrderAddresses.Select("AddressValue='To Be Decided'")

                    '        If Not drTo.Length > 0 Then
                    '            Dim NewRow As DataRow = dtOrderAddresses.NewRow()
                    '            NewRow(0) = 0
                    '            NewRow(1) = "To Be Decided"
                    '            NewRow(2) = "Address"
                    '            ' dtOrderAddresses.Rows.Add(NewRow)
                    '            dtOrderAddresses.Rows.InsertAt(NewRow, 0)
                    '        End If
                    '    End If
                    '    For Each dr1 As DataRow In dsPackagingDelivery.Tables(0).Rows
                    '        Dim result As DataRow() = dtOrderAddresses.Select("AddressKey ='" & dr1("DeliveryAddress") & "'")
                    '        If result.Length = 0 Then
                    '            dr1("DeliveryAddress") = ""
                    '        End If
                    '    Next
                    '    dsPackagingDelivery.AcceptChanges()
                    '    'If _dtCustmInfo.Rows.Count > 0 Then

                    '    '    '------Added by Prasad if Delivery selected 'yes' load customer address else store names 
                    '    '    'If Not dtTempOrderAddresses Is Nothing AndAlso dtTempOrderAddresses.Rows.Count > 0 Then
                    '    '    '    dtOrderAddresses = objComn.GetSOAddresses(_dtCustmInfo.Rows(0)("CUSTOMERNO"), _dtCustmInfo.Rows(0)("CLPPROGRAMID"), True, True)
                    '    '    '    dtTempOrderAddresses = dtOrderAddresses.Copy
                    '    '    'End If
                    '    '    isCustSelected = True
                    '    '    DeliveryPickupChange()
                    '    'End If
                    'End If
                    isCustSelected = True
                    DeliveryPickupChange()
                    For Each dr1 As DataRow In dsPackagingDelivery.Tables(0).Rows
                        Dim result As DataRow() = dtTempOrderAddresses.Select("AddressKey ='" & dr1("DeliveryAddress") & "'")
                        If result.Length = 0 Then
                            dr1("DeliveryAddress") = ""
                        End If
                    Next
                    dsPackagingDelivery.AcceptChanges()
                    _dsScan.Tables("ItemScanDetails").Clear()
                    dsScantempPackVar = _dsPackagingVar.Copy()
                    If dsMain.Tables("SOPackagingDiscDtl") IsNot Nothing Then
                        If dsMain.Tables("SOPackagingDiscDtl").Rows.Count > 0 Then
                            MaxDiscNo = dsMain.Tables("SOPackagingDiscDtl").Compute("Max(SrNo)", "") + 1
                            dsMain.Tables("SOPackagingDiscDtl").Clear()
                        End If
                    End If
                    If dsMain.Tables("SOPackagingTaxDtl") IsNot Nothing Then
                        If dsMain.Tables("SOPackagingTaxDtl").Rows.Count > 0 Then
                            MaxTaxNo = dsMain.Tables("SOPackagingTaxDtl").Compute("Max(SrNo)", "") + 1
                            dsMain.Tables("SOPackagingTaxDtl").Clear()
                        End If
                    End If
                    If dsMain.Tables("SalesOrderStrDetails") IsNot Nothing Then
                        'DtSOStr = dsMain.Tables("SalesOrderStrDetails")
                        'Dim rowAddress As DataRow
                        dtSTR = objPCSO.GetCollectionOfSTR()
                        If Not (dtSTR Is Nothing) Then
                            dtSTR.Clear()
                        End If
                        For Each drSTR As DataRow In dsMain.Tables("SalesOrderStrDetails").Rows
                            Dim rowAddress As DataRow = dtSTR.NewRow
                            rowAddress("SiteCode") = clsAdmin.SiteCode
                            rowAddress("SaleOrderNumber") = vSalesNo
                            rowAddress("FinYear") = clsAdmin.Financialyear
                            'rowAddress("SrNo") = indexGrd
                            rowAddress("EAN") = drSTR("EAN")
                            rowAddress("ArticleCode") = drSTR("ArticleCode")
                            rowAddress("Discription") = drSTR("ArticleDiscription")
                            rowAddress("STRUOM") = drSTR("STRUOM")
                            rowAddress("QtyPerBox") = drSTR("QtyPerBox")
                            rowAddress("WtPerPiece") = drSTR("WtPerPiece")
                            rowAddress("WtPerBox") = drSTR("WtPerBox")

                            If drSTR("IsHeader") Then
                                rowAddress("IsImageReq") = "1"
                            Else
                                rowAddress("IsImageReq") = "0"
                            End If
                            rowAddress("IsCombo") = drSTR("IsCombo")
                            rowAddress("StrIndex") = drSTR("strindex")
                            rowAddress("STRQty") = drSTR("STRQuantity")
                            rowAddress("STRDate") = drSTR("STRDate")
                            rowAddress("STRTime") = drSTR("STRTime")
                            rowAddress("SrNo") = drSTR("SrNo")
                            rowAddress("DeliveryIndex") = drSTR("deliveryindex")
                            rowAddress("SortIndex") = drSTR("deliveryindex")
                            rowAddress("Status") = drSTR("Status")

                            dtSTR.Rows.Add(rowAddress)
                        Next

                        DtSOStr = dtSTR.Copy()
                        dtBaseStr = dsMain.Tables("SalesOrderStrDetails").Copy
                    End If
                    vEANList = ""
                    CtrldtOrderDt.ReadOnly = False
                    '  CtrldtOrderDt.FormatType = C1.Win.C1Input.FormatTypeEnum.ShortDateShortTime
                    CtrldtOrderDt.FormatType = C1.Win.C1Input.FormatTypeEnum.CustomFormat
                    CtrldtOrderDt.EditFormat.FormatType = C1.Win.C1Input.FormatTypeEnum.CustomFormat
                    CtrldtOrderDt.DisplayFormat.FormatType = C1.Win.C1Input.FormatTypeEnum.CustomFormat
                    CtrldtOrderDt.DisplayFormat.CustomFormat = "dd-MM-yy HH:mm"
                    CtrldtOrderDt.EditFormat.CustomFormat = " dd-MM-yy HH:mm"

                    ctrlDtDeliveryDate.FormatType = C1.Win.C1Input.FormatTypeEnum.CustomFormat
                    ctrlDtDeliveryDate.EditFormat.FormatType = C1.Win.C1Input.FormatTypeEnum.CustomFormat
                    ctrlDtDeliveryDate.DisplayFormat.FormatType = C1.Win.C1Input.FormatTypeEnum.CustomFormat
                    ctrlDtDeliveryDate.DisplayFormat.CustomFormat = "dd-MM-yy HH:mm"
                    ctrlDtDeliveryDate.EditFormat.CustomFormat = " dd-MM-yy HH:mm"
                    vCurrentSODateTime = objComn.GetCurrentDate
                    CtrldtOrderDt.Value = vSalesOrderCreationDate
                    CtrldtOrderDt.ReadOnly = True
                    For Each drDelivery As DataRow In dsPackagingDelivery.Tables(0).Rows
                        Dim s As String() = drDelivery("SrNo").ToString().Split(".")
                        'Dim resultDelivery As DataRow() = dsPackagingVar.Tables(0).Select("BilllineNo='" + drDelivery("BilllineNo").ToString() + "' and pkglineNo='" + drDelivery("pkglineNo").ToString() + "'")
                        'If resultDelivery.Length > 0 Then
                        If s.Length > 1 Then
                            drDelivery("IsImageReq") = False
                        Else
                            drDelivery("IsImageReq") = True
                        End If


                        ' End If
                        If s.Length > 1 Then
                            If s.Length = 2 Then
                                If Char.IsLetter(s(1).ToString()) = True Then
                                    drDelivery("DispSrNo") = Convert.ToDecimal(s(0).ToString())
                                Else
                                    drDelivery("DispSrNo") = Convert.ToDecimal(drDelivery("SrNo"))
                                End If
                            End If
                            If s.Length = 3 Then
                                If Char.IsLetter(s(2).ToString()) = True Then
                                    drDelivery("DispSrNo") = Convert.ToDecimal(s(0).ToString() & "." & s(1).ToString())
                                Else
                                    drDelivery("DispSrNo") = Convert.ToDecimal(drDelivery("SrNo"))
                                End If
                            End If

                        Else
                            drDelivery("DispSrNo") = Convert.ToDecimal(drDelivery("SrNo"))
                        End If

                    Next

                    DtSoBulkRemarks = objPCSO.SetSalesOrderRemarks(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))


                    'Dim dtDelivery As DataTable
                    'If dsScantempDelivery.Tables(0).Rows.Count > 0 Then
                    '    dtDelivery = New DataTable
                    '    dtDelivery = dsScantempDelivery.Tables(0).Select("", "BillLineNo").CopyToDataTable
                    '    Dim lastBillNo As Integer = 0
                    '    Dim lastPackNo As Integer = 1
                    '    For Each drScanTemp As DataRow In dtDelivery.Rows
                    '        Dim drScan As DataRow = dsPackagingDelivery.Tables("PackagingDelivery").NewRow
                    '        If lastBillNo = 0 Then
                    '            drScan("DispSrNo") = drScanTemp("BillLineNo")
                    '        Else
                    '            If drScanTemp("BillLineNo") <> lastBillNo Then
                    '                lastPackNo = 1
                    '                drScan("DispSrNo") = drScanTemp("BillLineNo")
                    '            Else
                    '                If lastPackNo <> drScanTemp("pkgLineNo") Then
                    '                    drScan("DispSrNo") = drScanTemp("BillLineNo")
                    '                Else
                    '                    drScan("DispSrNo") = drScanTemp("BillLineNo") & "." & lastPackNo
                    '                    lastPackNo = lastPackNo + 1
                    '                End If

                    '            End If
                    '        End If

                    '        lastBillNo = drScanTemp("BillLineNo")
                    '        'lastPackNo = drScanTemp("pkgLineNo")
                    '    Next


                    'End If

                    For Each drScanTemp As DataRow In _dsPackagingVar.Tables("PackagingMaterial").Rows
                        If drScanTemp("IsHeader") Then
                            Dim dtdelvry As DataTable

                            Dim drScan As DataRow = _dsScan.Tables("ItemScanDetails").NewRow
                            drScan("EAN") = drScanTemp("EAN")
                            drScan("SrNo") = drScanTemp("BillLineNo")
                            Dim result As DataRow() = dsScanTemp.Tables(0).Select("BilllineNo='" + drScanTemp("BilllineNo").ToString() + "' ")
                            Dim resultDelivery As DataRow() = _dsPackagingDelivery.Tables(0).Select("BilllineNo='" + drScanTemp("BilllineNo").ToString() + "' and pkglineNo='" + drScanTemp("pkglineNo").ToString() + "'")
                            If resultDelivery.Length > 0 Then
                                '
                                dtdelvry = _dsPackagingDelivery.Tables(0).Select("BilllineNo='" + drScanTemp("BilllineNo").ToString() + "' and pkglineNo='" + drScanTemp("pkglineNo").ToString() + "'").CopyToDataTable()
                            End If

                            'Dim Quantity = dsScanTemp.Tables(0).Compute("Sum(Quantity)", " BilllineNo='" + drScanTemp("BillLineNo").ToString() + "' and isHeader=False")
                            If result(0)("IsCombo") Then
                                drScan("ArticleType") = "Combo"
                                drScan("IsCombo") = True
                            Else
                                drScan("ArticleType") = "Single"
                                drScan("IsCombo") = False
                            End If
                            drScan("IsHeader") = True
                            drScan("IsImageReq") = True
                            drScan("Status") = True
                            'Dim Quantity = dsScantempPackVar.Tables(0).Compute("Sum(Quantity)", " BilllineNo='" + drScanTemp("BillLineNo").ToString() + "' and isHeader=False")
                            'Dim DeliveredQuantity = dsScantempPackVar.Tables(0).Compute("Sum(DeliveredQty)", " BilllineNo='" + drScanTemp("BillLineNo").ToString() + "' and isHeader=False")
                            If result(0)("IsCombo") Then
                                Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & drScanTemp("BillLineNo") & "'")
                                If discription.Length > 0 Then
                                    drScan("Discription") = discription(0)("PackagingBoxName")
                                Else
                                    drScan("Discription") = drScanTemp("Discription")
                                End If
                            Else
                                drScan("Discription") = drScanTemp("Discription")
                            End If
                            drScan("SellingPrice") = FormatNumber(drScanTemp("SellingPrice"), 2)
                            drScan("Quantity") = drScanTemp("Quantity") '- Quantity
                            drScan("BatchBarcode") = drScanTemp("BatchBarcode")
                            drScan("DeliverySiteCode") = drScanTemp("DeliverySiteCode")


                            '- DeliveredQuantity
                            If dtdelvry IsNot Nothing Then
                                If dtdelvry.Rows.Count > 0 Then
                                    drScan("DeliveredQty") = dtdelvry.Compute("Sum(DeliveredQty)", "")
                                    'IIf(drScanTemp("DeliveredQty") Is DBNull.Value, 0, drScanTemp("DeliveredQty")) '- DeliveredQuantity
                                Else
                                    drScan("DeliveredQty") = 0
                                End If
                            Else
                                drScan("DeliveredQty") = 0
                            End If
                            'If dtdelvry IsNot Nothing Then
                            '    If dtdelvry.Rows.Count > 0 Then
                            '        If IsResetRequired Then
                            '            drScan("DeliveredQty") = dtdelvry.Compute("Sum(DeliveredQty)", "")
                            '        Else
                            '            drScan("DeliveredQty") = 0
                            '        End If
                            '        'IIf(drScanTemp("DeliveredQty") Is DBNull.Value, 0, drScanTemp("DeliveredQty")) '- DeliveredQuantity
                            '    Else
                            '        drScan("DeliveredQty") = 0
                            '    End If
                            'Else
                            '    drScan("DeliveredQty") = 0
                            'End If
                            drScan("PickupQty") = drScanTemp("PickupQty")
                            'If IsResetRequired Then
                            '    drScan("PickupQty") = drScanTemp("PickupQty")
                            'Else
                            '    drScan("PickupQty") = dtdelvry.Compute("Sum(DeliveredQty)", "")
                            'End If
                            drScan("Discount") = Math.Round(IIf(IsDBNull(drScanTemp("DiscountAmount")), 0, drScanTemp("DiscountAmount")), 2)
                            drScan("NetAmount") = FormatNumber(drScanTemp("NetAmount"), 2)
                            'drScan("ExpDelDate") = drScanTemp("ExpDelDate")
                            drScan("BillLineNo") = drScanTemp("BillLineNo")
                            '---Apply Row Index by Mahesh because need to mapping for Combo ....
                            drScan("rowIndex") = drScanTemp("BillLineNo")
                            drScan("lastnodecode") = drScanTemp("lastnodecode")
                            drScan("PackagingIndex") = drScanTemp("PkgLineNo")
                            'drScan("PackagingBoxCode") = drScanTemp("PackagingBoxCode")

                            If resultDelivery.Length > 0 Then
                                drScan("DeliveryIndex") = resultDelivery(0)("DeliveryLineNo")
                            End If

                            drScan("PckgSize") = drScanTemp("PckgSize")
                            drScan("PckgQty") = drScanTemp("PckgQty")
                            drScan("PackagingType") = drScanTemp("PckgType")
                            drScan("PackagingMaterial") = drScanTemp("PckgMaterial")
                            Dim Stock As Double = objCM.GetStocks(vSiteCode, drScanTemp("EAN"), drScanTemp("Articlecode"), True, False, IIf(IsDBNull(drScanTemp.Item("BatchBarcode")) = False, drScanTemp.Item("BatchBarcode"), String.Empty))
                            drScan("Stock") = Stock
                            drScan("IsCLP") = IIf(drScanTemp("IsCLPApplicable") Is DBNull.Value, False, drScanTemp("IsCLPApplicable"))
                            drScan("ClpPoints") = IIf(drScanTemp("ClpPoints") Is DBNull.Value, 0, drScanTemp("ClpPoints"))
                            drScan("ClpDiscount") = IIf(drScanTemp("ClpDiscount") Is DBNull.Value, 0, drScanTemp("ClpDiscount"))

                            'this is comment because not found any use of rowindex
                            'drScan("RowIndex") = drScanTemp("ArticleCode")

                            drScan("ArticleCode") = drScanTemp("ArticleCode")
                            drScan("UOM") = drScanTemp("UnitOfMeasure")
                            drScan("GrossAmt") = drScanTemp("GrossAmount") '+ drScanTemp("ExclTaxAmt")
                            If drScanTemp("ReservedQty") Is DBNull.Value Then
                                drScanTemp("ReservedQty") = False
                            End If
                            drScan("ReservedQty") = IIf(drScanTemp("ReservedQty") > 0, True, False)
                            drScan("Reserved") = IIf(drScanTemp("ReservedQty") > 0, True, False)

                            TotalSalesQty = IIf(drScanTemp("PickUpQty") Is DBNull.Value, 0, drScanTemp("PickUpQty")) + IIf(drScanTemp("DeliveredQty") Is DBNull.Value, 0, drScanTemp("DeliveredQty"))
                            NetArticleRate = drScanTemp("NetAmount") / drScanTemp("Quantity")
                            If IsResetRequired Then
                                drScan("MinPayAmt") = Math.Round(((drScanTemp("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                                drScan("TotalPickUpAmt") = 0
                            Else
                                drScan("MinPayAmt") = 0
                                drScan("TotalPickUpAmt") = Math.Round(((drScanTemp("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                            End If
                            drScan("IsNew") = False
                            drScan("FreezeSB") = drScanTemp("FreezeSB")
                            drScan("FreezeOB") = drScanTemp("FreezeOB")
                            drScan("ExclTaxAmt") = drScanTemp("ExclTaxAmt")
                            drScan("TotalTaxAmt") = IIf(drScanTemp("TotalTaxAmount") Is DBNull.Value, 0, drScanTemp("TotalTaxAmount"))
                            drScan("TaxPer") = Math.Round((drScan("TotalTaxAmt") / (drScan("GrossAmt") - drScanTemp("LineDiscount"))) * 100, 2) '' added by ketan PC GST UI Changes
                            drScan("TaxInPer") = Math.Round((drScan("TotalTaxAmt") / (drScan("GrossAmt") - drScanTemp("LineDiscount"))) * 100, 2)

                            drScan("IncTaxAmt") = 0.0
                            drScan("PromotionId") = result(0)("OfferNo")
                            drScan("LineDiscount") = drScanTemp("LineDiscount")
                            drScan("TotalDiscPercentage") = drScanTemp("DiscountPercentage")
                            drScan("FirstLevel") = 0
                            'drScan("FirstLevelDesc") = 0
                            drScan("TopLevel") = 0
                            drScan("CostAmount") = drScanTemp("CostAmount")
                            drScan("IsStatus") = IIf(drScanTemp("Status") = False, "Deleted", "Inserted")
                            drScan("SalesStaffID") = drScanTemp("SalesStaffID")
                            vEANList = vEANList & "'" & drScanTemp("EAN") & "', "

                            _dsScan.Tables("ItemScanDetails").Rows.Add(drScan)
                        End If
                    Next
                    Dim x As Integer = grdSOItems.Rows.Count
                    _dsScan.AcceptChanges()
                    _dsPackagingVar.Clear()


                    For Each drScanTemp As DataRow In dsScantempPackVar.Tables(0).Rows



                        Dim drScan As DataRow = _dsPackagingVar.Tables("PackagingMaterial").NewRow
                        Dim resultDelivery As DataRow() = _dsPackagingDelivery.Tables(0).Select("BilllineNo='" + drScanTemp("BilllineNo").ToString() + "' and pkglineNo='" + drScanTemp("pkglineNo").ToString() + "'")
                        drScan("EAN") = drScanTemp("EAN")
                        drScan("sitecode") = drScanTemp("sitecode")
                        drScan("finyear") = drScanTemp("finyear")
                        drScan("saleordernumber") = drScanTemp("saleordernumber")
                        drScan("BillLineNo") = drScanTemp("BillLineNo")
                        drScan("PackagingBoxCode") = drScanTemp("PackagingBoxCode")
                        '---Apply Row Index by Mahesh because need to mapping for Combo ....
                        drScan("rowIndex") = drScanTemp("BillLineNo")
                        drScan("PkgLineNo") = drScanTemp("PkgLineNo")
                        If drScanTemp("IsCombo") Then
                            drScan("ArticleType") = "Combo"
                        Else
                            drScan("ArticleType") = "Single"
                        End If
                        If resultDelivery.Length > 0 Then
                            drScan("DeliveryIndex") = resultDelivery(0)("DeliveryLineNo")
                        End If
                        drScan("IncTaxAmt") = 0.0
                        drScan("articlecode") = drScanTemp("articlecode")
                        drScan("lastnodecode") = drScanTemp("lastnodecode")
                        drScan("packagingboxcode") = drScanTemp("packagingboxcode")
                        drScan("PckgSize") = drScanTemp("PckgSize")
                        drScan("PckgQty") = drScanTemp("PckgQty")
                        drScan("Pckgtype") = drScanTemp("Pckgtype")
                        drScan("PckgMaterial") = drScanTemp("PckgMaterial")
                        drScan("DeliveredQty") = IIf(drScanTemp("DeliveredQty") Is DBNull.Value, 0, drScanTemp("DeliveredQty")) '- DeliveredQuantity
                        drScan("ReservedQty") = IIf(drScanTemp("ReservedQty") > 0, True, False)
                        drScan("CREATEDAT") = drScanTemp("CREATEDAT")
                        drScan("CREATEDBY") = drScanTemp("CREATEDBY")
                        drScan("CREATEDON") = drScanTemp("CREATEDON")
                        drScan("UPDATEDAT") = drScanTemp("UPDATEDAT")
                        drScan("UPDATEDBY") = drScanTemp("UPDATEDBY")
                        drScan("UPDATEDON") = drScanTemp("UPDATEDON")
                        drScan("STATUS") = drScanTemp("STATUS")
                        drScan("promotionId") = drScanTemp("promotionId")
                        drScan("FirstLevel") = drScanTemp("FirstLevel")
                        drScan("FIRSTLEVELDISC") = drScanTemp("FIRSTLEVELDISC")
                        drScan("TopLevel") = drScanTemp("TopLevel")
                        drScan("TotalDiscPercentage") = drScanTemp("TotalDiscPercentage")
                        drScan("IsImageReq") = False
                        drScan("Quantity") = drScanTemp("Quantity")
                        drScan("Discount") = drScanTemp("Discount")
                        drScan("Packagebaseuom") = drScanTemp("Packagebaseuom")
                        drScan("isheader") = drScanTemp("isheader")
                        drScan("SellingPrice") = FormatNumber(drScanTemp("SellingPrice"), 2)
                        drScan("NetAmount") = FormatNumber(drScanTemp("NetAmount"), 2)
                        drScan("GrossAmount") = drScanTemp("GrossAmount") '+ drScanTemp("ExclTaxAmt")
                        drScan("GrossAmt") = drScanTemp("GrossAmount")
                        drScan("CostAmount") = drScanTemp("CostAmount")
                        drScan("ArticleStatus") = drScanTemp("ArticleStatus")
                        drScan("OfferNo") = drScanTemp("OfferNo")
                        drScan("IsCLPApplicable") = drScanTemp("IsCLPApplicable")
                        drScan("ClpPoints") = IIf(drScanTemp("ClpPoints") Is DBNull.Value, 0, drScanTemp("ClpPoints"))
                        drScan("ClpDiscount") = IIf(drScanTemp("ClpDiscount") Is DBNull.Value, 0, drScanTemp("ClpDiscount"))
                        drScan("LineDiscount") = drScanTemp("LineDiscount")
                        drScan("DiscountAmount") = drScanTemp("DiscountAmount")
                        drScan("DiscountPercentage") = drScanTemp("DiscountPercentage")
                        drScan("ExclTaxAmt") = drScanTemp("ExclTaxAmt")

                        drScan("TotalTaxAmount") = IIf(drScanTemp("TotalTaxAmount") Is DBNull.Value, 0, drScanTemp("TotalTaxAmount"))
                        '' added by ketan GST PC UI Changes
                        drScan("TaxPer") = Math.Round((drScan("TotalTaxAmount") / (drScan("GrossAmount") - drScanTemp("LineDiscount"))) * 100, 2)
                        drScan("TaxInPer") = Math.Round((drScan("TotalTaxAmount") / (drScan("GrossAmount") - drScanTemp("LineDiscount"))) * 100, 2)

                        drScan("UnitOfMeasure") = drScanTemp("UnitOfMeasure")
                        drScan("TransactionCode") = drScanTemp("TransactionCode")
                        drScan("returnsaleorderno") = drScanTemp("returnsaleorderno")
                        drScan("returnsaleorderdt") = drScanTemp("returnsaleorderdt")
                        drScan("returnqty") = drScanTemp("returnqty")
                        drScan("salesreturnreasoncode") = drScanTemp("salesreturnreasoncode")
                        drScan("SalesStaffID") = drScanTemp("SalesStaffID")
                        drScan("BatchBarcode") = drScanTemp("BatchBarcode")
                        drScan("DeliverySiteCode") = drScanTemp("DeliverySiteCode")
                        drScan("IsCombo") = drScanTemp("IsCombo")
                        drScan("PickupQty") = drScanTemp("PickupQty")
                        drScan("FreezeSB") = drScanTemp("FreezeSB")
                        drScan("FreezeOB") = drScanTemp("FreezeOB")
                        drScan("Discription") = drScanTemp("Discription")
                        drScan("IsStatus") = drScanTemp("IsStatus")
                        drScan("IsNew") = False
                        TotalSalesQty = IIf(drScanTemp("PickUpQty") Is DBNull.Value, 0, drScanTemp("PickUpQty")) + IIf(drScanTemp("DeliveredQty") Is DBNull.Value, 0, drScanTemp("DeliveredQty"))
                        NetArticleRate = drScanTemp("NetAmount") / drScanTemp("Quantity")
                        If IsResetRequired Then
                            drScan("MinPayAmt") = Math.Round(((drScanTemp("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                            drScan("TotalPickUpAmt") = 0
                        Else
                            TotalSalesQty = IIf(drScanTemp("DeliveredQty") Is DBNull.Value, 0, drScanTemp("DeliveredQty"))
                            drScan("MinPayAmt") = Math.Round(((drScanTemp("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                            If dsMain.Tables("SalesInvoice").Rows.Count > 0 Then

                                drScan("TotalPickUpAmt") = IIf(drScanTemp("PickUpQty") Is DBNull.Value, 0, drScanTemp("PickUpQty")) * NetArticleRate
                            Else
                                drScan("TotalPickUpAmt") = IIf(drScanTemp("PickUpQty") Is DBNull.Value, 0, drScanTemp("PickUpQty")) * NetArticleRate ' Math.Round(((drScanTemp("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                            End If

                        End If

                        'drScan("MinPayAmt") = Math.Round(((drScanTemp("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                        'drScan("TotalPickUpAmt") = 0


                        _dsPackagingVar.Tables("PackagingMaterial").Rows.Add(drScan)

                    Next
                    'For Each drScanTemp As DataRow In dsScantempDelivery.Tables(0).Rows



                    '    Dim drScan As DataRow = _dsPackagingDelivery.Tables("PackagingDelivery").NewRow
                    'Next
                    ''doc taxes''
                    Dim dtDocSaleOrderTaxes As New DataTable
                    dtDocTaxes = objPCSO.GetSalesOrderDocTaxes(clsAdmin.SiteCode, vSalesNo)

                    ''

                    Dim i As Integer = grdSOItems.Rows.Count
                    If _dsScan.Tables("ItemScanDetails").Rows.Count > 0 Then
                        vRowIndex = _dsScan.Tables("ItemScanDetails").Compute("MAX(rowIndex)", "") + 1
                    End If
                    If dsPackagingVar.Tables("PackagingMaterial").Rows.Count > 0 Then
                        vPackagingIndex = _dsPackagingVar.Tables("PackagingMaterial").Compute("MAX(pkgLineNo)", "") + 1
                    End If
                    If _dsPackagingDelivery.Tables("PackagingDelivery").Rows.Count > 0 Then
                        vDeliveryIndex = _dsPackagingDelivery.Tables("PackagingDelivery").Compute("MAX(DeliveryLineNo)", "") + 1
                    End If
                    If dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
                        vtaxIndex = _dsMain.Tables("SalesOrderTaxDtls").Compute("MAX(TaxLineNo)", "") + 1
                    End If
                    dsScanReturn.Tables(0).Rows.Clear()

                    For Each drReturn As DataRow In dsScan.Tables(0).Select("DeliveredQty>0")
                        Dim drAddReturn As DataRow = dsScanReturn.Tables(0).NewRow()
                        Dim col As DataColumn
                        'For Each col In dsScan.Tables(0).Columns
                        '    drAddReturn(col.ColumnName) = drReturn(col.ColumnName)
                        'Next
                        For ColumnNo As Integer = 1 To drReturn.ItemArray.Count - 1
                            Try
                                drAddReturn(ColumnNo) = drReturn(ColumnNo)
                            Catch ex As Exception
                            End Try
                        Next
                        dsScanReturn.Tables(0).Rows.Add(drAddReturn)
                        'AddButtonControlInGrid(dsScanReturn.Tables(0).Rows.Count, "SalesReturn")

                    Next

                    Dim returnBtn = dsPackagingDelivery.Tables(0).Select("DeliveredQty>0")

                    If (returnBtn.Count > 0) Then

                        If Not IsResetRequired Then
                            CtrlBtnReturn.Enabled = False
                        Else
                            CtrlBtnReturn.Enabled = True
                        End If
                    Else
                        CtrlBtnReturn.Enabled = False
                    End If
                    If IsBookingEdit Then
                        CtrlBtnReturn.Enabled = False
                    End If
                    'If rdDelYes.Checked = True Then
                    '    dtOrderAddresses = objComn.GetSOAddresses(vCustomerNo, clsAdmin.CLPProgram, True)
                    'Else
                    '    dtOrderAddresses = objComn.GetSOAddresses(vCustomerNo, clsAdmin.CLPProgram, False)
                    'End If
                    'If dtOrderAddresses.Rows.Count > 0 Then
                    '    Dim drTo() As DataRow = dtOrderAddresses.Select("AddressValue='To Be Decided'")

                    '    If Not drTo.Length > 0 Then
                    '        Dim NewRow As DataRow = dtOrderAddresses.NewRow()
                    '        NewRow(0) = 0
                    '        NewRow(1) = "To Be Decided"
                    '        NewRow(2) = "Address"
                    '        ' dtOrderAddresses.Rows.Add(NewRow)
                    '        dtOrderAddresses.Rows.InsertAt(NewRow, 0)
                    '    End If
                    'End If
                    'dsScanReturn.Merge(dsScan)
                    RefreshLoadSOData()
                    dtOtherCharges = dsMain.Tables("SalesOrderOthercharges").Copy()
                    setoldvalue = True
                    dtDiscUsed = objPCSO.GetDiscUsedData(vSalesNo, clsAdmin.SiteCode)
                    dtWriteOffAmt = objPCSO.GetWriteOffAmt(vSalesNo, clsAdmin.SiteCode)
                    CalculateSalesOrderSummory(_dsScan)
                    GridDeliverdSetting()
                    dsInvoice = objPCSO.SetInvoiceInSOCancel(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                    If dsInvoice.Tables(0).Rows.Count > 0 Then
                        TabSalesOrder.TabPages("TabPageInvoiceDetails").Enabled = True
                    Else
                        TabSalesOrder.TabPages("TabPageInvoiceDetails").Enabled = False

                    End If
                    RefreshLoadInvcData()
                    StrIndex = 1
                    If IsStrTabEnabled Then
                        Dim dtStr As New DataTable
                        dtStr = objPCSO.GetSalesOrderSTR(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                        If dtStr.Rows.Count > 0 Then
                            For Each dr1 As DataRow In dtStr.Rows
                                Dim strtime As Array = dr1("StrTime").ToString().Split(",")
                                Dim strtimes As String = ""
                                If strtime.Length > 0 Then
                                    For i = 0 To strtime.Length - 1
                                        If Not strtime(i).ToString().Trim = "" Then
                                            If Not strTimesNumbers.Contains(strtime(i)) Then
                                                strTimesNumbers.Add((strtime(i)))

                                                strtimes = strtimes & strtime(i) & ","
                                            End If
                                        End If

                                    Next
                                End If
                                If strtimes.Length > 0 Then
                                    dr1("StrTime") = strtimes.Substring(0, strtimes.Length - 1)
                                Else
                                    dr1("StrTime") = ""
                                End If
                                strTimesNumbers.Clear()
                            Next
                        End If
                        grdSTRDetails.DataSource = dtStr
                        StrIndex = objPCSO.GetMaxSTRNo(IIf(vSalesNo = String.Empty, 0, vSalesNo), clsAdmin.SiteCode)
                        GridSTRSetting()
                    End If
                    If clsDefaultConfiguration.IsCstTaxRequired AndAlso dsMain.Tables("SalesOrderhdr").Rows.Count > 0 AndAlso CBool(If(dsMain.Tables("SalesOrderhdr").Rows(0)("IsCSTApplied") Is DBNull.Value, False, dsMain.Tables("SalesOrderhdr").Rows(0)("IsCSTApplied"))) = True Then
                        MessageBox.Show(getValueByKey("CST002"), getValueByKey("CLAE04"))
                        IsCSTApplicable = True
                        clsDefaultConfiguration.CSTTaxCode = dsMain.Tables("SalesOrderhdr").Rows(0)("CSTTaxCode")
                    Else
                        IsCSTApplicable = False
                        clsDefaultConfiguration.CSTTaxCode = ""
                    End If
                    '---abc

                    'dtCustmInfo = objCustm.GetCustomerInformation("CLP", vSiteCode, clsAdmin.CLPProgram, vCustomerNo, CustFormat:=clsDefaultConfiguration.DetailedCustomerCreationformat)
                    'Dim custName As String
                    'CustomerNo = dtCustmInfo.Rows(0)("CustomerNo")
                    'If dtCustmInfo.Rows(0)("FIRSTNAME") <> String.Empty Then
                    '    custName = dtCustmInfo.Rows(0)("FIRSTNAME")
                    'End If
                    'If dtCustmInfo.Rows(0)("SURNAME") <> String.Empty Then
                    '    custName &= " " & dtCustmInfo.Rows(0)("SURNAME")
                    'End If
                    'If custName.Trim = String.Empty Then
                    '    CtrltxrCust.Text = "NA"
                    'Else
                    '    CtrltxrCust.Text = custName
                    'End If
                    'If dtCustmInfo.Rows(0)("CardType") <> String.Empty Then
                    '    vCardType = dtCustmInfo.Rows(0)("CardType")
                    '    CLPCardType = dtCustmInfo.Rows(0)("CardType")
                    'End If
                    'If dtCustmInfo.Rows(0)("CompanyName") <> String.Empty Then
                    '    lblCompName.Text = dtCustmInfo.Rows(0)("CompanyName")
                    '    tooltip.SetToolTip(lblCompName, lblCompName.Text)
                    'Else
                    '    lblCompName.Text = "-"
                    'End If
                    'If dtCustmInfo.Rows(0)("Department") <> String.Empty Then
                    '    CtrlLabel18.Text = dtCustmInfo.Rows(0)("Department")
                    'Else
                    '    CtrlLabel18.Text = "-"
                    'End If
                    'CtrlCustDtls1.rbCLPMember.Enabled = False
                    'CtrlCustDtls1.rbOtherCust.Enabled = False
                    '---abc
                    'CtrlCustDtls1.pDisplayDtls(dtCustmInfo)
                    ' CtrlCustDtls1.cboAddrType.SelectedValue = vAddressType
                    If dsMain.Tables("SalesOrderdtl").Rows.Count > 0 Then
                        DeliverySiteCode = dsMain.Tables("SalesOrderdtl").Rows(0)("DeliverySiteCode").ToString()
                    End If

                    IsNextInvoiceNo = False
                    IsApplyPromotion = True
                End If

                'Dim Dstemp = objPCSO.GetSOBulkComboTableStructForPC(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                'DtSoBulkComboHdr = Dstemp.Tables("DtSoBulkComboHdr")
                'DtSoBulkComboDtl = Dstemp.Tables("DtSoBulkComboDtl")
                If balAmt <= 0 Then
                    ' rbnGrpCMPromotion1.Enabled = False
                Else
                    rbnGrpCMPromotion1.Enabled = True
                End If
                'If SoCancel Then
                '    CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = False
                '    CtrlBtnReturn.Enabled = False
                '    CtrlBtnAddExtraCost.Enabled = False
                '    cmdGenerateSTR.Enabled = False
                '    For Each Control In TabSalesOrder.Controls
                '        For Each Ctrl In Control.Controls
                '            If TypeOf (Ctrl) Is C1.Win.C1Sizer.C1Sizer Then
                '                For Each innerctrl In Ctrl.Controls
                '                    If TypeOf (innerctrl) Is Spectrum.CtrlGrid Then
                '                        innerctrl.Enabled = True
                '                        DirectCast(innerctrl, Spectrum.CtrlGrid).AllowEditing = True
                '                    Else
                '                        innerctrl.Enabled = True
                '                    End If
                '                Next
                '            ElseIf TypeOf (Ctrl) Is Spectrum.CtrlGrid Then
                '                Ctrl.Enabled = True
                '                DirectCast(Ctrl, Spectrum.CtrlGrid).AllowEditing = True
                '            Else
                '                Ctrl.Enabled = True
                '            End If
                '        Next
                '    Next
                'End If
                If SoCancel Then
                    CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = False
                    CtrlBtnReturn.Enabled = False
                    CtrlBtnAddExtraCost.Enabled = False
                    cmdGenerateSTR.Enabled = False
                    For Each Control In TabSalesOrder.Controls
                        For Each Ctrl In Control.Controls
                            If TypeOf (Ctrl) Is C1.Win.C1Sizer.C1Sizer Then
                                For Each innerctrl In Ctrl.Controls
                                    If TypeOf (innerctrl) Is Spectrum.CtrlGrid Then
                                        innerctrl.Enabled = True
                                        DirectCast(innerctrl, Spectrum.CtrlGrid).AllowEditing = False
                                    Else
                                        innerctrl.Enabled = False
                                    End If
                                Next
                            ElseIf TypeOf (Ctrl) Is Spectrum.CtrlGrid Then
                                Ctrl.Enabled = True
                                DirectCast(Ctrl, Spectrum.CtrlGrid).AllowEditing = False
                            Else
                                Ctrl.Enabled = False
                            End If
                        Next
                    Next
                End If
            End If

        Catch ex As Exception
            ShowMessage(getValueByKey("NC0003"), getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function

#End Region
#Region "Refresh Data Load "

    ''' <summary>
    ''' Refresh Article Scan Data in DataGrid
    ''' </summary>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function RefreshLoadSOData() As Boolean
        Dim rowStyle As C1.Win.C1FlexGrid.CellStyle
        rowStyle = grdSOItems.Styles.Add("RowBackColorItemDelete")
        rowStyle.BackColor = Color.DarkGray

        Dim rowStylefullQty As C1.Win.C1FlexGrid.CellStyle
        rowStylefullQty = grdSOItems.Styles.Add("RowBackColorfullQty")
        rowStylefullQty.BackColor = Color.LightSteelBlue

        Try

            '_dvDisplayItem = New DataView(dsScan.Tables("ItemScanDetails"), "", "RowIndex Desc", DataViewRowState.CurrentRows)
            'grdSOItems.DataSource = dvDisplayItem.ToTable(False, "DEL", "EAN", "Discription", "SellingPrice", "Quantity", "PickUpQty", "DeliveredQty", "Discount", "NetAmount", "ExpDelDate", "Stock", "IsCLP", "ReservedQty", "ArticleCode", "IsStatus")
            'to get article code in grid.
            Dim objSiteInfo As New clsSiteInfo
            Dim dt1 = objSiteInfo.GetAllSitesForDelivery()
            Dim hash As New System.Collections.Hashtable
            For Each row In dt1.Rows
                hash.Add(row("SiteCode"), row("SiteShortName"))
            Next

            Dim dtSource As DataTable = dsScan.Tables("ItemScanDetails") 'dvDisplayItem.ToTable(False, "DEL", "ArticleCode", "Discription", "SellingPrice", "Quantity", "PickUpQty", "DeliveredQty", "Discount", "NetAmount", "ExpDelDate", "Stock", "IsCLP", "ReservedQty", "EAN", "IsStatus")

            If Not dtSource.Columns.Contains("Blankclm") Then
                AddBlankColumn(dtSource)
            End If
            BindSOItemGridData(dtSource)
            AddButtonControlInGridW(1)
            BindSODeliveryGridData(dsPackagingDelivery.Tables(0))
            AddButtonControlInDeliveryGrid(1)
            AddSTRButtonControlInDeliveryGrid(1)
            GridItemSetting()
            GridDeliverdSetting()
            Dim x = lblminadvancepaid.Text
            If clsDefaultConfiguration.IsNewSalesOrder Then  '' added on 24/07/17
                'BindTextValue() '$$ added by KETAN SO GST Changes 
            End If

            '        GridInvoiceSetting()
            'grdSOItems.DataSource = dtSource

            grdSOItems.Cols("DeliverySiteCode").DataMap = hash


            grdSOItems.Cols("DeliverySiteCode").AllowEditing = False
            If DtSoBulkRemarks.Rows.Count > 0 Then
                LoadRemarks(DtSoBulkRemarks, False)
            End If
            'For Each drGridRow As C1.Win.C1FlexGrid.Row In grdSOItems.Rows
            '    If Not (drGridRow.Index = 0) Then

            '        If Not (vEANList.IndexOf(drGridRow.Item("EAN")) = -1) Then
            '            'If drGridRow.Item("IsStatus") = "Deleted" Then
            '            '    grdSOItems.Rows(drGridRow.Index).Style = grdSOItems.Styles("RowBackColorItemDelete")
            '            '    grdSOItems.Rows(drGridRow.Index).AllowEditing = False
            '            'End If
            '            'If drGridRow.Item("Quantity") = drGridRow.Item("DeliveredQty") Then
            '            '    grdSOItems.Rows(drGridRow.Index).Style = grdSOItems.Styles("RowBackColorfullQty")
            '            '    grdSOItems.Rows(drGridRow.Index).AllowEditing = False
            '            'End If
            '        End If

            '        'AddButtonControlInGrid(drGridRow.Index, "Sales")
            '    End If
            'Next
            '    lblminadvancepaid.Text
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    Public Function AddButtonControlInDeliveryGrid(ByVal rowIndex As Integer) As Boolean
        Try
            'controlList.RemoveRange(0, controlList.Count)
            'If controlList.Count > 0 Then
            '    'controlList.RemoveRange(0, controlList.Count - 1)
            '    controlList.Clear()
            'End If

            For Each drGridRow As C1.Win.C1FlexGrid.Row In dgDeliveryLocation.Rows

                If Not (drGridRow.Index = 0) Then

                    If dgDeliveryLocation.Rows(drGridRow.Index)("IsHeader").ToString() = "True" Then



                        Dim getColumnType As String = String.Empty

                        'Create styles with data types, formats, etc
                        Dim cellStyle As C1.Win.C1FlexGrid.CellStyle

                        cellStyle = dgDeliveryLocation.Styles.Add("CellImageType")
                        cellStyle.DataType = Type.GetType("System.String")
                        cellStyle.TextAlign = TextAlignEnum.LeftCenter
                        cellStyle.WordWrap = True

                        'Assign styles to editable cells
                        Dim assignCellStyles As CellRange
                        dgDeliveryLocation.Rows(drGridRow.Index).HeightDisplay = 16

                        Dim ButtonX As Integer = dgDeliveryLocation.Cols("PLUS").WidthDisplay

                        'Create some new controls
                        Dim btnBrowse As New Button
                        btnBrowse.Tag = dgDeliveryLocation.Rows(drGridRow.Index)("DeliveryIndex").ToString()
                        btnBrowse.MaximumSize = New System.Drawing.Size(18, 28)
                        btnBrowse.Anchor = AnchorStyles.None
                        Dim s As Size = New System.Drawing.Size(8, 7)
                        Dim img As Image
                        'btn.imageLayout = Nothing

                        img = Image.FromFile(Application.StartupPath & "\images\yes.png")






                        btnBrowse.Image = New Bitmap(img, s)
                        btnBrowse.ImageAlign = ContentAlignment.MiddleLeft
                        'btnBrowse.SetRowIndex = rowIndex
                        'btnBrowse.Text = "Barcode"
                        'btnBrowse.Name = "btnPlus" + grdSOItems.Rows(drGridRow.Index)("EAN").ToString()
                        btnBrowse.Name = "btnPlus" + dgDeliveryLocation.Rows(drGridRow.Index)("DeliveryIndex").ToString()
                        'Insert hosted control into grid
                        btnBrowse.TabStop = False
                        dgDeliveryLocation.Controls.Add(btnBrowse)

                        'host them in the C1FlexGrid
                        controlList.Add(New HostedControl(dgDeliveryLocation, btnBrowse, drGridRow.Index, dgDeliveryLocation.Cols("PLUS").Index, ButtonX, ButtonX))

                        'ImagePathRowIndex = rowIndex
                        assignCellStyles = dgDeliveryLocation.GetCellRange(drGridRow.Index, dgDeliveryLocation.Cols("PLUS").Index)
                        ' assignCellStyles.Style = dgDeliveryLocation.Styles("CellImageType")
                        AddHandler btnBrowse.Click, AddressOf BrowseImageDeliveryPath
                        'Else
                        '    controlList.Remove(New HostedControl(grdSOItems, btnBrowse, drGridRow.Index, grdSOItems.Cols("PLUS").Index, ButtonX, ButtonX))
                    End If
                End If
            Next


            ' AddHandler btnBrowse.Click, AddressOf BrowseImagePath



        Catch ex As Exception
            MessageBox.Show(ex.Message)
            LogException(ex)
        End Try
    End Function
    Public Function AddSTRButtonControlInDeliveryGrid(ByVal rowIndex As Integer) As Boolean
        Try
            'controlList.RemoveRange(0, controlList.Count)
            'If controlList.Count > 0 Then
            '    'controlList.RemoveRange(0, controlList.Count - 1)
            '    controlList.Clear()
            'End If

            For Each drGridRow As C1.Win.C1FlexGrid.Row In dgDeliveryLocation.Rows

                If Not (drGridRow.Index = 0) Then

                    If dgDeliveryLocation.Rows(drGridRow.Index)("IsImageReq").ToString() = "True" Then



                        Dim getColumnType As String = String.Empty

                        'Create styles with data types, formats, etc
                        Dim cellStyle As C1.Win.C1FlexGrid.CellStyle

                        cellStyle = dgDeliveryLocation.Styles.Add("CellImageType")
                        cellStyle.DataType = Type.GetType("System.String")
                        cellStyle.TextAlign = TextAlignEnum.LeftCenter
                        cellStyle.WordWrap = True

                        'Assign styles to editable cells
                        Dim assignCellStyles As CellRange
                        dgDeliveryLocation.Rows(drGridRow.Index).HeightDisplay = 16

                        Dim ButtonX As Integer = dgDeliveryLocation.Cols("STR").WidthDisplay

                        'Create some new controls
                        Dim btnBrowse As New CtrlBtn()
                        btnBrowse.Tag = dgDeliveryLocation.Rows(drGridRow.Index)("DeliveryIndex").ToString()
                        btnBrowse.MaximumSize = New System.Drawing.Size(ButtonX, 25)

                        Dim s As Size
                        Dim img As Image
                        'btn.imageLayout = Nothing

                        ' img = Image.FromFile("D:\spectrumMain\Spectrum\Resources\yes.gif")

                        s.Height = btnBrowse.Height
                        s.Width = btnBrowse.Width

                        btnBrowse.TextAlign = ContentAlignment.MiddleCenter
                        btnBrowse.ImageAlign = ContentAlignment.MiddleCenter




                        ' btnBrowse.Image = New Bitmap(img, s)
                        'btnBrowse.ImageAlign = ContentAlignment.MiddleLeft
                        'btnBrowse.SetRowIndex = rowIndex
                        btnBrowse.Text = "Details"
                        ' btnBrowse.TextAlign = ContentAlignment.MiddleCenter
                        'btnBrowse.Name = "btnPlus" + grdSOItems.Rows(drGridRow.Index)("EAN").ToString()
                        btnBrowse.Name = "btnSTR" + dgDeliveryLocation.Rows(drGridRow.Index)("DeliveryIndex").ToString()
                        'Insert hosted control into grid
                        'btnBrowse.ImageAlign = ContentAlignment.MiddleCenter
                        ' btnBrowse.Padding = New Padding(4)
                        btnBrowse.BackgroundImage = Nothing
                        btnBrowse.BackColor = Color.AliceBlue
                        'btnBrowse.
                        'Insert hosted control into grid
                        btnBrowse.TabStop = False
                        dgDeliveryLocation.Controls.Add(btnBrowse)

                        'host them in the C1FlexGrid
                        controlList.Add(New HostedControl(dgDeliveryLocation, btnBrowse, drGridRow.Index, dgDeliveryLocation.Cols("STR").Index, ButtonX, ButtonX))

                        'ImagePathRowIndex = rowIndex
                        assignCellStyles = dgDeliveryLocation.GetCellRange(drGridRow.Index, dgDeliveryLocation.Cols("STR").Index)
                        'assignCellStyles.Style = dgDeliveryLocation.Styles("CellImageType")
                        AddHandler btnBrowse.Click, AddressOf BrowseSTRDeliveryPath
                        'Else
                        '    controlList.Remove(New HostedControl(grdSOItems, btnBrowse, drGridRow.Index, grdSOItems.Cols("PLUS").Index, ButtonX, ButtonX))
                    End If
                End If
            Next


            ' AddHandler btnBrowse.Click, AddressOf BrowseImagePath



        Catch ex As Exception
            MessageBox.Show(ex.Message)
            LogException(ex)
        End Try
    End Function
    Public Function AddButtonControlInGridW(ByVal rowIndex As Integer) As Boolean
        Try
            'controlList.RemoveRange(0, controlList.Count)
            'If controlList.Count > 0 Then
            '    'controlList.RemoveRange(0, controlList.Count - 1)
            '    controlList.Clear()
            'End If

            For Each drGridRow As C1.Win.C1FlexGrid.Row In grdSOItems.Rows

                If Not (drGridRow.Index = 0) Then
                    If grdSOItems.Rows(drGridRow.Index)("IsImageReq").ToString() = "1" Then


                        Dim getColumnType As String = String.Empty

                        'Create styles with data types, formats, etc
                        Dim cellStyle As C1.Win.C1FlexGrid.CellStyle

                        cellStyle = grdSOItems.Styles.Add("CellImageType")
                        cellStyle.DataType = Type.GetType("System.String")
                        cellStyle.TextAlign = TextAlignEnum.LeftCenter
                        cellStyle.WordWrap = True

                        'Assign styles to editable cells
                        Dim assignCellStyles As CellRange
                        grdSOItems.Rows(drGridRow.Index).HeightDisplay = 16

                        Dim ButtonX As Integer = grdSOItems.Cols("PLUS").WidthDisplay

                        'Create some new controls
                        Dim btnBrowse As New Button
                        btnBrowse.Tag = grdSOItems.Rows(drGridRow.Index)("rowindex").ToString()
                        btnBrowse.MaximumSize = New System.Drawing.Size(18, 28)
                        btnBrowse.Anchor = AnchorStyles.None
                        Dim s As Size = New System.Drawing.Size(8, 7)
                        Dim img As Image
                        'btn.imageLayout = Nothing

                        img = Image.FromFile(Application.StartupPath & "\images\yes.png")




                        btnBrowse.Image = New Bitmap(img, s)
                        btnBrowse.ImageAlign = ContentAlignment.MiddleLeft
                        'btnBrowse.SetRowIndex = rowIndex
                        'btnBrowse.Text = "Barcode"
                        'btnBrowse.Name = "btnPlus" + grdSOItems.Rows(drGridRow.Index)("EAN").ToString()
                        btnBrowse.Name = "btnPlus" + grdSOItems.Rows(drGridRow.Index)("PackagingIndex").ToString()
                        'Insert hosted control into grid
                        btnBrowse.ImageAlign = ContentAlignment.MiddleCenter
                        btnBrowse.Padding = New Padding(4)
                        btnBrowse.BackgroundImage = Nothing
                        btnBrowse.BackColor = Color.AliceBlue
                        'btnBrowse.
                        'Insert hosted control into grid
                        btnBrowse.TabStop = False
                        grdSOItems.Controls.Add(btnBrowse)

                        'host them in the C1FlexGrid
                        controlList.Add(New HostedControl(grdSOItems, btnBrowse, drGridRow.Index, grdSOItems.Cols("PLUS").Index, ButtonX, ButtonX))

                        'ImagePathRowIndex = rowIndex
                        assignCellStyles = grdSOItems.GetCellRange(drGridRow.Index, grdSOItems.Cols("PLUS").Index)
                        assignCellStyles.Style = grdSOItems.Styles("CellImageType")
                        AddHandler btnBrowse.Click, AddressOf BrowseImagePath
                        'Else
                        '    controlList.Remove(New HostedControl(grdSOItems, btnBrowse, drGridRow.Index, grdSOItems.Cols("PLUS").Index, ButtonX, ButtonX))
                    End If
                End If
            Next


            ' AddHandler btnBrowse.Click, AddressOf BrowseImagePath



        Catch ex As Exception
            MessageBox.Show(ex.Message)
            LogException(ex)
        End Try
    End Function
    Public Sub BindSOItemGridData(ByVal dt As DataTable)
        Try
            'Dim dataView As New DataView(dt)
            'dataView.Sort = "SrNo ASC"
            'dt = dataView.ToTable()
            grdSOItems.SuspendLayout()
            If grdSOItems.Rows.Count > 1 Then
                grdSOItems.Rows.RemoveRange(1, grdSOItems.Rows.Count - 1)
            End If
            dtPackagingcopiedfrom.Rows.Clear()
            If dt.Rows.Count > 0 Then
                dt = dt.Select("", "BillLineNo").CopyToDataTable()

            End If
            Dim index As Integer = 1
            Dim indexP As Integer = 1
            For Each dr As DataRow In dt.Rows
                If dr("STATUS") = "True" Then
                    grdSOItems.Rows.Add()
                    grdSOItems.Rows(indexP)("SrNo") = index

                    If DtSoBulkRemarks IsNot Nothing Then
                        If DtSoBulkRemarks.Rows.Count > 0 Then
                            Dim resultRemark As DataRow() = DtSoBulkRemarks.Select("Articletype='Combo' and SrNo='" + dr("Rowindex").ToString() + "'  ")
                            If resultRemark.Length > 0 Then
                                Dim rmkArrary As Array = resultRemark(0)("Articlename").ToString().Split("-")
                                If rmkArrary.Length > 0 Then
                                    resultRemark(0)("Articlename") = index.ToString() & "-" & rmkArrary(1)
                                End If
                            End If
                        End If
                    End If
                    '---bind copy from datatable
                    If dr("ArticleType").ToString() = "Combo" Then
                        Dim result As DataRow() = DtSoBulkComboDtl.Select("ComboSrNo='" + dr("Rowindex").ToString() + "' ")
                        'Dim result1 As DataRow() = DtSoBulkComboHdr.Select("ComboSrNo='" + dr("Rowindex").ToString() + "' ")
                        Dim rowDeliveryAddr = dtPackagingcopiedfrom.NewRow()
                        rowDeliveryAddr("ComboSrNo") = dr("Rowindex").ToString()
                        rowDeliveryAddr("PackagingBoxPrintName") = index & "-" & dr("DISCRIPTION").ToString() & " (" & result.Length & ")"
                        dtPackagingcopiedfrom.Rows.Add(rowDeliveryAddr)
                    End If

                    grdSOItems.Rows(indexP)("ArticleType") = dr("ArticleType").ToString()
                    grdSOItems.Rows(indexP)("ArticleCode") = dr("ArticleCode").ToString()
                    grdSOItems.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()
                    If dr("ArticleType").ToString() = "Combo" Then
                        grdSOItems.Rows(indexP)("UOM") = "NOS"
                    Else
                        grdSOItems.Rows(indexP)("UOM") = dr("UOM").ToString()
                    End If

                    grdSOItems.Rows(indexP)("Quantity") = dr("Quantity").ToString()
                    grdSOItems.Rows(indexP)("DeliveredQty") = dr("DeliveredQty")
                    grdSOItems.Rows(indexP)("SellingPrice") = dr("SellingPrice").ToString()

                    Dim dscResult = CDbl(IIf(dtPickUpDiscGrid.Compute("SUM(DiscountAmount)", "BillLineNo='" & dr("Rowindex").ToString() & "' and pkgLineNo='" & dr("packagingindex").ToString() & "'") Is DBNull.Value, 0, dtPickUpDiscGrid.Compute("SUM(DiscountAmount)", "BillLineNo='" & dr("Rowindex").ToString() & "' and pkgLineNo='" & dr("packagingindex").ToString() & "'")))

                    If QtyChange = True And IsComboDoubleClicked = True Then '##
                        grdSOItems.Rows(indexP)("Discount") = dscResult
                    Else
                        If IsPromotionApplyFromFrontEnd Then
                            grdSOItems.Rows(indexP)("Discount") = dr("LineDiscount")
                        Else
                            grdSOItems.Rows(indexP)("Discount") = dscResult + (((dr("LineDiscount") * ((dr("Quantity") - dr("DeliveredQty")) / dr("Quantity"))))) ' dr("Discount").ToString()
                        End If                 ' 
                    End If
                    'added by vipin
                    'For Each UpdateDsPackVar In _dsPackagingVar.Tables(0).Select("BillLineNo='" & dr("RowIndex").ToString() & "' and Status=true")
                    '    UpdateDsPackVar("DiscountAmount") = grdSOItems.Rows(indexP)("Discount")
                    'Next
                    '_dsPackagingVar.AcceptChanges()
                    '    grdSOItems.Rows(indexP)("Discount") = dscResult + dr("Discount").ToString() '##



                    'If QtyChange = True And IsComboDoubleClicked = True Then  'vipin  ##
                    '    grdSOItems.Rows(indexP)("Discount") = 0
                    '    dr("Discount") = 0
                    'End If

                    grdSOItems.Rows(indexP)("NetAmount") = dr("NetAmount").ToString()
                    If dr("PckgSize").ToString() = "" Then
                        grdSOItems.Rows(indexP)("PckgSize") = 0
                    Else
                        grdSOItems.Rows(indexP)("PckgSize") = dr("PckgSize").ToString()
                    End If
                    If dr("PckgQty").ToString() = "" Then
                        grdSOItems.Rows(indexP)("PckgQty") = 0
                    Else
                        grdSOItems.Rows(indexP)("PckgQty") = dr("PckgQty").ToString()
                    End If
                    ' grdSOItems.Rows(indexP)("PckgQty") = dr("PckgQty").ToString()
                    grdSOItems.Rows(indexP)("PackagingType") = dr("PackagingType").ToString()
                    grdSOItems.Rows(indexP)("PackagingMaterial") = dr("PackagingMaterial").ToString()
                    Dim pkQty = CDbl(IIf(dsPackagingDelivery.Tables(0).Compute("SUM(PickupQty)", "BillLineNo='" & dr("Rowindex").ToString() & "' and pkgLineNo='" & dr("packagingindex").ToString() & "'") Is DBNull.Value, 0, dsPackagingDelivery.Tables(0).Compute("SUM(PickupQty)", "BillLineNo='" & dr("Rowindex").ToString() & "' and pkgLineNo='" & dr("packagingindex").ToString() & "'")))
                    grdSOItems.Rows(indexP)("PickUpQty") = pkQty 'dr("PickUpQty").ToString()
                    grdSOItems.Rows(indexP)("TotalTaxAmt") = Math.Round(dr("TotalTaxAmt"), 2).ToString()
                    grdSOItems.Rows(indexP)("TaxPer") = CInt(dr("TaxPer").ToString()) '' added by ketan pC GST UI chnages
                    grdSOItems.Rows(indexP)("IsCLP") = dr("IsCLP").ToString()
                    grdSOItems.Rows(indexP)("ReservedQty") = dr("ReservedQty").ToString()
                    grdSOItems.Rows(indexP)("DeliverySiteCode") = dr("DeliverySiteCode").ToString()
                    grdSOItems.Rows(indexP)("EAN") = dr("EAN").ToString()
                    grdSOItems.Rows(indexP)("RowIndex") = dr("RowIndex").ToString()
                    grdSOItems.Rows(indexP)("PackagingIndex") = dr("PackagingIndex").ToString()
                    grdSOItems.Rows(indexP)("DeliveryIndex") = dr("DeliveryIndex").ToString()
                    grdSOItems.Rows(indexP)("BatchBarcode") = dr("BatchBarcode").ToString()
                    grdSOItems.Rows(indexP)("IsImageReq") = "1"
                    grdSOItems.Rows(indexP)("IsHeader") = True
                    grdSOItems.Rows(indexP)("IsCombo") = dr("IsCombo")
                    grdSOItems.Rows(indexP)("NetAmt") = (grdSOItems.Rows(indexP)("Quantity") * grdSOItems.Rows(indexP)("SellingPrice")) - grdSOItems.Rows(indexP)("Discount") 'vipin
                    indexP = indexP + 1
                    Dim dtPackageVar As New DataTable
                    If _dsPackagingVar.Tables("PackagingMaterial").Rows.Count > 0 Then
                        Dim res As DataRow() = _dsPackagingVar.Tables("PackagingMaterial").Select("BillLineNo='" & dr("RowIndex").ToString() & "' and IsHeader=False and Status=true")
                        If res.Length > 0 Then
                            dtPackageVar = _dsPackagingVar.Tables("PackagingMaterial").Select("BillLineNo='" & dr("RowIndex").ToString() & "' and IsHeader=False and Status=true").CopyToDataTable()
                        End If

                    End If
                    If dtPackageVar.Rows.Count > 0 Then
                        Dim x As Integer = 1
                        For Each drPAckVar As DataRow In dtPackageVar.Rows

                            'If drPAckVar("SrNo").ToString().IndexOf(".") = -1 Then
                            '    'x is an Integer!'
                            'Else

                            grdSOItems.Rows.Add()
                            grdSOItems.Rows(indexP)("SrNo") = index & "." & x
                            grdSOItems.Rows(indexP)("ArticleType") = dr("ArticleType").ToString()
                            grdSOItems.Rows(indexP)("ArticleCode") = dr("ArticleCode").ToString()
                            grdSOItems.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()
                            Dim dscResultPack = CDbl(IIf(dtPickUpDiscGrid.Compute("SUM(DiscountAmount)", "BillLineNo='" & drPAckVar("BillLineNo").ToString() & "' and pkgLineNo='" & drPAckVar("PkgLineno").ToString() & "'") Is DBNull.Value, 0, dtPickUpDiscGrid.Compute("SUM(DiscountAmount)", "BillLineNo='" & drPAckVar("BillLineNo").ToString() & "' and pkgLineNo='" & drPAckVar("PkgLineno").ToString() & "'")))

                            If QtyChange = True And IsComboDoubleClicked = True Then '## 'vipin
                                grdSOItems.Rows(indexP)("Discount") = dscResultPack
                            Else
                                If IsPromotionApplyFromFrontEnd Then
                                    grdSOItems.Rows(indexP)("Discount") = drPAckVar("LineDiscount")
                                Else
                                    grdSOItems.Rows(indexP)("Discount") = dscResultPack + (((drPAckVar("LineDiscount") * ((drPAckVar("Quantity") - drPAckVar("DeliveredQty")) / drPAckVar("Quantity"))))) ' drPAckVar("LineDiscount").ToString()
                                End If
                            End If
                            'added by vipin
                            'For Each UpdateDsPackVar In _dsPackagingVar.Tables(0).Select("BillLineNo='" & dr("RowIndex").ToString() & "' and Status=true")
                            '    UpdateDsPackVar("DiscountAmount") = grdSOItems.Rows(indexP)("Discount")
                            'Next
                            '_dsPackagingVar.AcceptChanges()
                            '   grdSOItems.Rows(indexP)("Discount") = dscResultPack + (((drPAckVar("LineDiscount") * ((drPAckVar("Quantity") - drPAckVar("DeliveredQty")) / drPAckVar("Quantity"))))) ' drPAckVar("LineDiscount").ToString()
                            grdSOItems.Rows(indexP)("UOM") = dr("UOM").ToString()
                            grdSOItems.Rows(indexP)("Quantity") = drPAckVar("Quantity").ToString()
                            grdSOItems.Rows(indexP)("SellingPrice") = drPAckVar("SellingPrice").ToString()
                            '  grdSOItems.Rows(indexP)("Discount") = drPAckVar("DiscountAmount").ToString()
                            grdSOItems.Rows(indexP)("UOM") = dr("UOM").ToString()
                            grdSOItems.Rows(indexP)("NetAmount") = drPAckVar("NetAmount").ToString()
                            grdSOItems.Rows(indexP)("PckgSize") = drPAckVar("PckgSize").ToString()
                            grdSOItems.Rows(indexP)("PckgQty") = drPAckVar("PckgQty").ToString()
                            grdSOItems.Rows(indexP)("PackagingType") = drPAckVar("PckgType").ToString()
                            grdSOItems.Rows(indexP)("PackagingMaterial") = drPAckVar("PckgMaterial").ToString()
                            grdSOItems.Rows(indexP)("PickUpQty") = drPAckVar("PickUpQty").ToString()
                            grdSOItems.Rows(indexP)("TotalTaxAmt") = Math.Round(drPAckVar("TotalTaxAmount"), 2).ToString()
                            grdSOItems.Rows(indexP)("TaxPer") = CInt(drPAckVar("TaxPer").ToString()) '' added by ketan PC GST UI Changes 

                            grdSOItems.Rows(indexP)("IsCLP") = drPAckVar("IsCLPApplicable").ToString()
                            grdSOItems.Rows(indexP)("ReservedQty") = drPAckVar("ReservedQty").ToString()
                            grdSOItems.Rows(indexP)("DeliverySiteCode") = dr("DeliverySiteCode").ToString()
                            grdSOItems.Rows(indexP)("EAN") = dr("EAN").ToString()
                            grdSOItems.Rows(indexP)("DeliveredQty") = drPAckVar("DeliveredQty")
                            grdSOItems.Rows(indexP)("RowIndex") = dr("RowIndex").ToString()
                            grdSOItems.Rows(indexP)("PackagingIndex") = drPAckVar("PkgLineno").ToString()
                            Dim resultDelivery As DataRow() = _dsPackagingDelivery.Tables(0).Select("BilllineNo='" + dr("BilllineNo").ToString() + "' and pkglineNo='" + dr("BilllineNo").ToString() + "'")
                            If resultDelivery.Length > 0 Then
                                grdSOItems.Rows(indexP)("DeliveryIndex") = resultDelivery(0)("DeliveryLineNo")
                            End If

                            grdSOItems.Rows(indexP)("BatchBarcode") = drPAckVar("BatchBarcode").ToString()
                            grdSOItems.Rows(indexP)("IsCombo") = dr("IsCombo").ToString()
                            grdSOItems.Rows(indexP)("IsImageReq") = "0"
                            grdSOItems.Rows(indexP)("IsHeader") = False
                            grdSOItems.Rows(indexP)("NetAmt") = (grdSOItems.Rows(indexP)("Quantity") * grdSOItems.Rows(indexP)("SellingPrice")) - grdSOItems.Rows(indexP)("Discount") 'vipin
                            'If QtyChange = True And IsComboDoubleClicked = True Then  '##vipin
                            '    grdSOItems.Rows(indexP)("Discount") = 0
                            '    drPAckVar("Discount") = 0
                            'End If

                            indexP = indexP + 1
                            x = x + 1
                            ' End If

                        Next

                    End If
                    index = index + 1
                    'dgTax.Rows((dgTax.Rows.Count - 1))(CType(enumTax.TaxName, Integer)) = item.TaxName.ToString
                    'dgTax.Rows((dgTax.Rows.Count - 1))(CType(enumTax.TaxValue, Integer)) = Convert.ToDecimal(item.Value)
                    'dgTax.Rows((dgTax.Rows.Count - 1))(CType(enumTax.TaxValueType, Integer)) = item.Type.ToString
                End If

            Next
            If QtyChange = True Then   '## vipin
                QtyChange = False
            End If

            grdSOItems.ResumeLayout()
        Catch ex As Exception
            LogException(ex)
        End Try


    End Sub
    Public Sub BindSODeliveryGridData(ByVal dt As DataTable, Optional ByVal isDeleted As Boolean = False)
        Try
            dgDeliveryLocation.SuspendLayout()
            isDeleted = True
            'Dim dataView As New DataView(dt)
            'dataView.Sort = "SrNo ASC"
            'dt = dataView.ToTable()
            If dgDeliveryLocation.Rows.Count > 1 Then
                dgDeliveryLocation.Rows.RemoveRange(1, dgDeliveryLocation.Rows.Count - 1)
            End If

            If dt.Rows.Count > 0 Then
                dt = dt.Select("", "DispSrNo").CopyToDataTable()

            End If
            Dim indexS As Integer = 0
            Dim index As Integer = 1
            Dim indexP As Integer = 1
            ''update display serial no
            Dim isFirstRow = True
            Dim Ean As String
            Dim del As Integer = 1
            Dim status As Boolean
            For drindex = 0 To dt.Rows.Count - 1

                If dt.Rows(drindex)("Status") Is DBNull.Value Then
                    status = True
                ElseIf dt.Rows(drindex)("Status") = "True" Then
                    status = True
                Else
                    status = False
                End If

                If status Then
                    If dt.Rows(drindex)("SrNo").ToString().IndexOf(".") <> -1 Then
                        ' If Ean = dt.Rows(drindex)("Ean").ToString() Then  ' vipin If we delete article then in DeliveryDetail grid Section Sequence go wrong 
                        Dim s As String() = dt.Rows(drindex)("SrNo").ToString().Split(".")
                        If s.Length > 1 And dt.Rows(drindex)("IsHeader").ToString() = "False" Then
                            If isDeleted Then
                                If s.Length = 2 Then
                                    If Char.IsLetter(s(1).ToString()) = True Then
                                        dt.Rows(drindex)("SrNo") = indexS & "." & Chr(64 + del).ToString()
                                        del = del + 1
                                    Else
                                        dt.Rows(drindex)("SrNo") = indexS & "." & indexP
                                        indexP = indexP + 1
                                    End If

                                End If
                                If s.Length = 3 Then
                                    dt.Rows(drindex)("SrNo") = indexS & "." & s(1).ToString() & "." & Chr(64 + del).ToString()
                                    del = del + 1
                                End If

                            Else
                                If s.Length = 2 Then
                                    If Char.IsLetter(s(1).ToString()) = True Then
                                        dt.Rows(drindex)("SrNo") = indexS & "." & s(1).ToString()
                                    Else
                                        dt.Rows(drindex)("SrNo") = indexS & "." & indexP
                                        indexP = indexP + 1
                                    End If

                                End If
                                If s.Length = 3 Then
                                    dt.Rows(drindex)("SrNo") = indexS & "." & s(1).ToString() & "." & s(2).ToString()
                                End If
                            End If

                        Else

                            dt.Rows(drindex)("SrNo") = indexS & "." & indexP
                            indexP = indexP + 1
                            del = 1
                        End If

                        '    End If


                    Else
                        dt.Rows(drindex)("SrNo") = index
                        Ean = dt.Rows(drindex)("Ean").ToString()
                        index = index + 1
                        indexP = 1
                        indexS = indexS + 1
                        del = 1
                    End If
                End If


            Next


            dt.AcceptChanges()
            index = 1
            indexP = 1
            For Each dr As DataRow In dt.Rows
                If dr("STATUS") Is DBNull.Value Then
                    status = True
                ElseIf dr("STATUS") = "True" Then
                    status = True
                Else
                    status = False
                End If
                If status Then

                    dgDeliveryLocation.Rows.Add()

                    Dim resultDelivery As DataRow() = _dsPackagingVar.Tables(0).Select("BilllineNo='" + dr("BilllineNo").ToString() + "' and pkglineNo='" + dr("pkglineNo").ToString() + "'")



                    dgDeliveryLocation.Rows(indexP)("SrNo") = dr("SrNo")
                    dgDeliveryLocation.Rows(indexP)("DispSrNo") = dr("DispSrNo")
                    If dr("IsCombo").ToString() = "False" Then
                        dgDeliveryLocation.Rows(indexP)("ArticleType") = "Single"
                    Else
                        dgDeliveryLocation.Rows(indexP)("ArticleType") = "Combo"
                    End If
                    '------serial number
                    'Dim rmkArrary As Array = dr("DISCRIPTION").ToString().Split(":")
                    'If rmkArrary.Length > 0 Then
                    'If dr("IsImageReq") Is DBNull.Value Then
                    '    dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()
                    'Else
                    '    If dr("IsImageReq") Then
                    '        dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = "Order " & dr("SrNo") & ":" & dr("DISCRIPTION").ToString()
                    '    Else
                    '        dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()
                    '    End If
                    'End If
                    'Else
                    '    dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()
                    'End If
                    'If rmkArrary.Length > 0 Then
                    '    dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = "Order " & index & ":" & rmkArrary(1)
                    'Else
                    '    dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()
                    'End If
                    'dgDeliveryLocation.Rows(indexP)("ArticleCode") = dr("ArticleCode").ToString()

                    dgDeliveryLocation.Rows(indexP)("DISCRIPTION") = dr("DISCRIPTION").ToString()



                    dgDeliveryLocation.Rows(indexP)("Quantity") = dr("Quantity").ToString()
                    dgDeliveryLocation.Rows(indexP)("UOM") = dr("UnitofMeasure").ToString()
                    'grdSOItems.Rows(indexP)("SellingPrice") = dr("SellingPrice").ToString()
                    dgDeliveryLocation.Rows(indexP)("DeliveryDate") = dr("DeliveryDate")
                    dgDeliveryLocation.Rows(indexP)("DeliveryTime") = dr("DeliveryTime") ' Now.Date() 'dr("DeliveryTime").ToString()


                    Dim resultAddr As DataRow() = dtTempOrderAddresses.Select("AddressKey='" + dr("DeliveryAddress").ToString() + "'  ")
                    'If resultAddr.Length > 0 Then
                    '    result(0)("IsCustAddress") = "1"
                    '    result(0)("DeliveryAddress") = resultAddr(0)("AddressKey") 'dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress")
                    'Else
                    '    Dim resultAddr1 As DataRow() = dtOrderAddresses.Select("AddressValue='" + dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress").ToString() + "' and addresstype='Address' ")
                    '    result(0)("IsCustAddress") = "2"  ''2=cust address,1=store,''=NA
                    '    result(0)("DeliveryAddress") = resultAddr1(0)("AddressKey")
                    'End If

                    If resultAddr.Length > 0 Then
                        dgDeliveryLocation.Rows(indexP)("DeliveryAddress") = resultAddr(0)("AddressValue").ToString()
                    Else
                        dgDeliveryLocation.Rows(indexP)("DeliveryAddress") = ""
                    End If
                    '-Added By Prasad if resultDelivery Length >0
                    'dgDeliveryLocation.Rows(indexP)("PackagingMaterial") = resultDelivery(0)("pckgMaterial")
                    If resultDelivery.Length > 0 Then
                        dgDeliveryLocation.Rows(indexP)("PackagingMaterial") = resultDelivery(0)("pckgMaterial")
                    End If
                    If clsDefaultConfiguration.PackageFiedlsAllowed Then
                        '----
                        dgDeliveryLocation.Rows(indexP)("PckgSize") = dr("PckgSize").ToString()
                        dgDeliveryLocation.Rows(indexP)("PckgQty") = IIf(dr("PckgQty").ToString() = "", "          -", dr("PckgQty").ToString())
                        dgDeliveryLocation.Rows(indexP)("PackagingType") = dr("PackagingType").ToString()
                        '--------------
                        If dr("UnitofMeasure").ToString() = "KGS" Then
                            dgDeliveryLocation.Rows(indexP)("PickUpQty") = dr("PickUpQty")
                            If dr("PckgSize") = String.Empty Then
                                dgDeliveryLocation.Rows(indexP)("PickUp") = 0
                            Else
                                dgDeliveryLocation.Rows(indexP)("PickUp") = dr("PickUpQty") / dr("PckgSize")
                            End If

                        Else
                            dgDeliveryLocation.Rows(indexP)("PickUpQty") = dr("PickUpQty").ToString()
                            dgDeliveryLocation.Rows(indexP)("PickUp") = dr("PickUpQty").ToString()
                        End If
                    Else
                        dgDeliveryLocation.Rows(indexP)("PickUpQty") = dr("PickUpQty").ToString()
                        dgDeliveryLocation.Rows(indexP)("PickUp") = dr("PickUpQty").ToString()
                    End If


                    ' dgDeliveryLocation.Rows(indexP)("PickUpQty") = dr("PickUpQty")
                    dgDeliveryLocation.Rows(indexP)("DeliveredQty") = dr("DeliveredQty")
                    'If dr("PendingQty").ToString() = "0" Then
                    '    dgDeliveryLocation.Rows(indexP)("PendingQty") = dr("Quantity").ToString()
                    '
                    If dr("DeliveredQty").ToString() = "" Then
                        dgDeliveryLocation.Rows(indexP)("PendingQty") = dr("Quantity") - dr("PickUpQty")
                    Else
                        dgDeliveryLocation.Rows(indexP)("PendingQty") = dr("Quantity") - dr("PickUpQty") - dr("DeliveredQty")
                    End If

                    'End If
                    If dr("DeliveredQty") <> 0 Then
                        dgDeliveryLocation.Rows(indexP)("LastPickDate") = dr("LastPickUpDateTime").ToString()
                    End If

                    'dgDeliveryLocation.Rows(indexP)("PendingQty") = dr("IsCLP").ToString()
                    dgDeliveryLocation.Rows(indexP)("RowIndex") = dr("BillLineNo").ToString()
                    dgDeliveryLocation.Rows(indexP)("DeliveryIndex") = dr("DeliveryLineNo").ToString()
                    dgDeliveryLocation.Rows(indexP)("PackagingIndex") = dr("PkgLineNo").ToString()
                    dgDeliveryLocation.Rows(indexP)("IsHeader") = dr("IsHeader").ToString()
                    dgDeliveryLocation.Rows(indexP)("IsCombo") = dr("IsCombo").ToString()
                    dgDeliveryLocation.Rows(indexP)("IsImageReq") = dr("IsImageReq").ToString()

                    indexP = indexP + 1




                    'dgTax.Rows((dgTax.Rows.Count - 1))(CType(enumTax.TaxName, Integer)) = item.TaxName.ToString
                    'dgTax.Rows((dgTax.Rows.Count - 1))(CType(enumTax.TaxValue, Integer)) = Convert.ToDecimal(item.Value)
                    'dgTax.Rows((dgTax.Rows.Count - 1))(CType(enumTax.TaxValueType, Integer)) = item.Type.ToString

                End If
                index = index + 1
            Next


            dgDeliveryLocation.ResumeLayout()
        Catch ex As Exception
            LogException(ex)
        End Try


    End Sub
    Private Sub BrowseSTRDeliveryPath(ByVal sender As Object, ByVal e As EventArgs)
        Try
            If SoCancel Then
                Exit Sub
            End If
            Dim isPartialStr As Boolean = False
            Dim STRArticles As String = ""
            Dim NotSTRArticles As String = ""
            If dsScan.Tables(0).Rows.Count > 0 Then

                Dim resulArticle As DataRow() = dsScan.Tables(0).Select("rowindex='" + DirectCast(sender, Button).Tag.ToString() + "'")
                If resulArticle.Length > 0 Then
                    If Not resulArticle(0)("IsCombo") Then
                        Dim resultoldFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + resulArticle(0)("articlecode").ToString() + "'")
                        If resultoldFactorynodecode.Length > 0 Then
                            Dim resultoldFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultoldFactorynodecode(0)("lastnodecode").ToString() + "'")
                            If resultoldFactorynodecodecheck.Length = 0 Then
                                ShowMessage("Factory is not mapped for the item, you cannot add STR details for this item", getValueByKey("CLAE04"))
                                Exit Sub
                            End If
                        End If
                    Else
                        Dim resulComboArticle As DataRow() = DtSoBulkComboDtl.Select("Combosrno='" + DirectCast(sender, Button).Tag.ToString() + "' AND Status=True")
                        If resulComboArticle.Length > 0 Then


                            For i As Integer = 0 To resulComboArticle.Length - 1
                                Dim resultoldFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + resulComboArticle(i)("articlecode").ToString() + "'")
                                If resultoldFactorynodecode.Length > 0 Then
                                    Dim resultnewFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultoldFactorynodecode(0)("lastnodecode").ToString() + "'")
                                    If resultnewFactorynodecodecheck.Length > 0 Then
                                        STRArticles &= resulComboArticle(i)("articlecode").ToString() & ","
                                        isPartialStr = True
                                    Else
                                        NotSTRArticles &= resulComboArticle(i)("articlecode").ToString() & ","
                                    End If
                                End If
                            Next
                            If Not isPartialStr Then
                                ShowMessage("Factory is not mapped for the item, you cannot add STR details for this item", getValueByKey("CLAE04"))
                                Exit Sub
                            Else
                                If STRArticles <> "" Then
                                    STRArticles = STRArticles.Substring(0, STRArticles.Length - 1)
                                End If
                                If NotSTRArticles <> "" Then
                                    NotSTRArticles = NotSTRArticles.Substring(0, NotSTRArticles.Length - 1)
                                End If
                                Dim MesStr As String
                                If NotSTRArticles <> "" Then
                                    MesStr = MesStr & "Factory is not mapped to Item " & NotSTRArticles & " ,you cannot add STR details for this items, " & vbCrLf
                                End If
                                If STRArticles <> "" Then
                                    MesStr = MesStr & " you can add STR details for Item " & STRArticles
                                End If
                                If NotSTRArticles <> "" Then
                                    ShowBigMessagewithOK(MesStr, getValueByKey("CLAE04"))
                                End If

                            End If
                        End If
                    End If
                End If

            End If
            Dim objStr As New frmPCAddSTRDetails
            objStr.DtFactoryRemarks = dtSTRFactoryRemark
            objStr.dsPackagingDeliverySTR = dsPackagingDelivery
            objStr.dtCombo = DtSoBulkComboDtl
            objStr.filter = DirectCast(sender, Button).Tag
            objStr.comboNonSTrArticles = NotSTRArticles
            objStr.SONumber = CtrlTxtOrderNo.Text
            objStr.IsEdit = True
            objStr.dtSTR = dtSTR
            objStr.dtFinalSTR = DtSOStr
            objStr.StrIndex = StrIndex
            If (objStr.ShowDialog() = Windows.Forms.DialogResult.OK) Then
                StrIndex = objStr.StrIndex
                If (objStr.dtFinalSTR IsNot Nothing AndAlso objStr.dtFinalSTR.Rows.Count > 0) Then
                    IsStrGenerateApplicable = True
                    DtSOStr = objStr.dtFinalSTR
                    dtSTR = DtSOStr.Copy()
                End If
            Else
                dtSTR = DtSOStr.Copy()
                StrIndex = objStr.StrIndex
            End If
            objStr.Dispose()


        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub BrowseImageDeliveryPath(ByVal sender As Object, ByVal e As EventArgs)
        Try
            If Not EditCallFromOrderPackagingScreen Then

                If SoCancel Then
                    Exit Sub
                End If
                Dim leadDispIndex As String
                Dim leadIndex As Double = 0
                Dim rowindex As Integer
                drDeliveryVariation = _dsPackagingDelivery.Tables("PackagingDelivery").Select("deliverylineno='" & DirectCast(sender, Button).Tag & "'")(0)
                Dim drPackgVariationCount As DataRow()
                drPackgVariationCount = _dsPackagingDelivery.Tables("PackagingDelivery").Select("deliverylineno='" & DirectCast(sender, Button).Tag & "'")
                Dim dtAscii As New DataTable
                dtAscii = _dsPackagingDelivery.Tables("PackagingDelivery").Select("deliverylineno='" & DirectCast(sender, Button).Tag & "'").CopyToDataTable()
                If dtAscii.Rows.Count > 0 Then
                    dtAscii = _dsPackagingDelivery.Tables("PackagingDelivery").Select("pkglineno='" & dtAscii.Rows(0)("pkglineno") & "'").CopyToDataTable()
                End If
                Dim i As Integer = 64 + dtAscii.Rows.Count 'Asc("A") ' Convert to ASCII integer.
                Dim x As String = Chr(i)

                'Dim result As DataRow() = dsPackagingDelivery.Tables(0).Select("RowIndex='" + dr("RowIndex").ToString() + "'  and PackagingIndex ='" + dr("PackagingIndex").ToString() + "'")


                If dsPackagingDelivery.Tables(0).Rows.Count > 0 Then
                    If drPackgVariationCount.Count > 0 Then
                        Dim c As DataRow = _dsPackagingDelivery.Tables("PackagingDelivery").Select("deliverylineno='" & DirectCast(sender, Button).Tag & "'")(0)
                        rowindex = dsPackagingDelivery.Tables("PackagingDelivery").Rows.IndexOf(c) + 1
                    End If
                End If
                If drPackgVariationCount.Length > 0 Then
                    leadDispIndex = drPackgVariationCount(0)("SrNo") & "." & x
                    leadIndex = drPackgVariationCount(0)("DispSrNo") ' Convert.ToDouble(DirectCast(sender, Button).Tag)
                End If
                SetDeliveryBaseVariationInSO(drDeliveryVariation, leadIndex, leadDispIndex, rowindex, True)
                'If drPackgVariationCount.Length > 0 Then
                vDeliveryIndex = vDeliveryIndex + 1
                'End If
                BindSODeliveryGridData(dsPackagingDelivery.Tables(0))
                AddButtonControlInDeliveryGrid(1)
                AddSTRButtonControlInDeliveryGrid(1)

            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub

    ''' <summary>
    ''' Refresh Invoice Details Data in DataGrid
    ''' </summary>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function RefreshLoadInvcData() As Boolean
        Try
            Dim dvDisplayInvc As New DataView(dsInvoice.Tables("InvoiceDetails"))
            Dim dtSource As DataTable = dvDisplayInvc.ToTable(False, "SalesNo", "InvoiceNo", "DocumentType", "TerminalID", "TenderType", "InvoiceAmt", "UserName", "InvoiceDate")
            AddBlankColumn(dtSource)
            grdSOInvoice.DataSource = dtSource
            dvDisplayInvc.Dispose()
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function



    ''' <summary>
    ''' Calculate Sales Order Summary and Show in Screen
    ''' </summary>
    ''' <param name="dsScanTemp"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    'Private Function CalculateSalesOrderSummory1(ByVal dsScanTemp As DataSet) As Boolean
    '    Try
    '        If Not (dsScan.Tables("ItemScanDetails") Is Nothing) AndAlso dsScan.Tables("ItemScanDetails").Rows.Count > 0 Then

    '            lbltotalitem.Text = dsScan.Tables("ItemScanDetails").Rows.Count & " Items"
    '            '  old      'lblOrderQty.Text = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '            '                           dsScan.Tables("ItemScanDetails").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "")))
    '            lblOrderQty.Text = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '                                      dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "")))
    '            'old        lblPickupQty.Text = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '            '                            dsScan.Tables("ItemScanDetails").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "")))
    '            lblPickupQty.Text = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '                                        dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "")))
    '            'lbldeliveredqty.Text = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(DeliveredQty)", "") Is DBNull.Value, 0, _
    '            '                            dsScan.Tables("ItemScanDetails").Compute("SUM(DeliveredQty)", "")))
    '            lbldeliveredqty.Text = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(DeliveredQty)", "") Is DBNull.Value, 0, _
    '                                        dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(DeliveredQty)", "")))
    '            'If Not dsScan.Tables("ItemScanDetails").Compute("SUM(GrossAmt)", "IsStatus In " & vFilterValue & "") Is DBNull.Value Then
    '            '    vGrossAmount = CDbl(dsScan.Tables("ItemScanDetails").Compute("SUM(GrossAmt)", "IsStatus In " & vFilterValue & ""))
    '            'Else
    '            '    vGrossAmount = 0
    '            'End If
    '            If CtrllblAmtPaid.Text = "" Then
    '                CtrllblAmtPaid.Text = "0"
    '            End If

    '            If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value Then
    '                vGrossAmount = CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & ""))
    '            Else
    '                vGrossAmount = 0
    '            End If

    '            lblgrossamt1.Text = FormatNumber(vGrossAmount, 2)
    '            '---abc
    '            ' CtrlCashSummary1.lbltxt1 = FormatNumber(vGrossAmount, 2)

    '            'vDiscAmount = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '            '                                 dsScan.Tables("ItemScanDetails").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "")))
    '            vDiscAmount = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '                                             dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "")))
    '            '---abc
    '            ' CtrlCashSummary1.lbltxt2 = FormatNumber(vDiscAmount, 2)
    '            vOtherChargesOld = 0 '0000196
    '            vOtherChargesNew = 0 '0000196

    '            'Start==========Get OtherCharges from database===============
    '            'If Not (dsMain.Tables("SalesOrderOtherCharges") Is Nothing) AndAlso dsMain.Tables("SalesOrderOtherCharges").Rows.Count > 0 Then
    '            '    Dim vChargeAmountOld As String = IIf((dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(ChargeAmount)", "") Is DBNull.Value), 0, dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(ChargeAmount)", ""))
    '            '    Dim vTaxAmountOld As String = IIf((dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(TaxAmt)", "") Is DBNull.Value), 0, dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(TaxAmt)", ""))

    '            '    vOtherChargesOld = CDbl(CDbl(vChargeAmountOld) + CDbl(vTaxAmountOld))
    '            'End If

    '            If Not (dtOtherCharges Is Nothing) AndAlso dtOtherCharges.Rows.Count > 0 Then
    '                Dim vChargeAmountOld As String = IIf((dtOtherCharges.Compute("Sum(ChargeAmount)", "") Is DBNull.Value), 0, dtOtherCharges.Compute("Sum(ChargeAmount)", ""))
    '                Dim vTaxAmountOld As String = IIf((dtOtherCharges.Compute("Sum(TaxAmt)", "") Is DBNull.Value), 0, dtOtherCharges.Compute("Sum(TaxAmt)", ""))

    '                vOtherChargesOld = CDbl(CDbl(vChargeAmountOld) + CDbl(vTaxAmountOld))
    '            End If

    '            vTotalOtherCharges = CDbl(vOtherChargesOld + vOtherChargesNew)
    '            CtrllblOtherCharges.Text = FormatNumber(vTotalOtherCharges, 2)
    '            'End============Get OtherCharges from Application============
    '            Dim AdvanceAmt As Double = 0
    '            If vTotalOtherCharges > 0.0 Then
    '                CtrllblGrossAmt.Text = FormatNumber((vGrossAmount + vTotalOtherCharges), 2)
    '                If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
    '                    AdvanceAmt = vTotalOtherCharges
    '                Else
    '                    AdvanceAmt = (vTotalOtherCharges * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100))
    '                End If
    '            End If
    '            If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(NetAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value Then
    '                CtrllblNetAmt.Text = Format((CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(NetAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
    '                                              dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(NetAmount)", "IsStatus In " & vFilterValue & "") + vTotalOtherCharges))), "0.00")
    '            Else
    '                CtrllblNetAmt.Text = 0
    '            End If




    '            'Start==========Calculate Min Advance Paid===================
    '            If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(MinPayAmt)", "IsStatus<> 'Deleted'") Is DBNull.Value Then
    '                vCurrMinAdvanceAmt = CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(MinPayAmt)", "IsStatus<> 'Deleted'"))
    '            Else
    '                vCurrMinAdvanceAmt = 0
    '            End If

    '            vCurrMinAdvanceAmt = MyRound(vCurrMinAdvanceAmt, clsDefaultConfiguration.BillRoundOffAt)
    '            If AdvanceAmt > 0 Then
    '                vCurrMinAdvanceAmt = CDbl(vCurrMinAdvanceAmt) + AdvanceAmt
    '            End If
    '            If vCurrMinAdvanceAmt > vAdvanceAmount Then
    '                lblminadvancepaid.Text = FormatNumber(vCurrMinAdvanceAmt - vAdvanceAmount, 2)
    '            Else
    '                lblminadvancepaid.Text = strZero
    '            End If

    '            'End============Calculate Min Advance Paid===================
    '            If clsDefaultConfiguration.RoundOffRequired = True Then
    '                CtrllblNetAmt.Text = MyRound(CtrllblNetAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
    '                CtrllblAmtPaid.Text = MyRound(CtrllblAmtPaid.Text, clsDefaultConfiguration.BillRoundOffAt)
    '            End If

    '            CtrllblBaltoPay.Text = FormatNumber((CDbl(CtrllblNetAmt.Text) - vAdvanceAmount), 2)

    '            If dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
    '                If Not dsPayment.Tables("MSTRecieptType").Compute("Sum(Amount)", "") Is DBNull.Value Then
    '                    vReceivedAmt = FormatNumber(CDbl(dsPayment.Tables("MSTRecieptType").Compute("Sum(Amount)", "")), 2)
    '                End If

    '                If CDbl(CtrllblBaltoPay.Text) < 0 Then
    '                    lblReceivedAmt.Text = FormatNumber(vReceivedAmt, 2)
    '                Else
    '                    lblReceivedAmt.Text = FormatNumber(vReceivedAmt, 2)
    '                End If
    '            Else
    '                lblReceivedAmt.Text = strZero
    '            End If
    '            If clsDefaultConfiguration.RoundOffRequired = True Then
    '                CtrllblNetAmt.Text = MyRound(CtrllblNetAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
    '                CtrllblAmtPaid.Text = MyRound(CtrllblAmtPaid.Text, clsDefaultConfiguration.BillRoundOffAt)
    '                'CtrlCashSummary1.lbltxt6 = MyRound(CtrlCashSummary1.lbltxt6, clsDefaultConfiguration.BillRoundOffAt)
    '            End If
    '            Dim crdsale As Double = 0.0
    '            Dim crdsaleadjustamount As Double = 0
    '            Dim salesordernumber As String = ""
    '            Dim NetCrdSale As Double = 0
    '            Dim AmtPaid As Double = 0
    '            If dsMain.Tables("SalesInvoice").Rows.Count > 0 AndAlso Not dsMain.Tables("SalesInvoice") Is Nothing Then
    '                If dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").Length > 0 Then
    '                    Dim dt As DataTable = dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").CopyToDataTable
    '                    If dt.Rows.Count > 0 AndAlso Not dt Is Nothing Then
    '                        For Each x In dt.Rows
    '                            crdsale += x("AmountTendered")
    '                            salesordernumber = x("DocumentNumber")
    '                        Next
    '                    End If
    '                Else
    '                    'SwipeBckDefaultPosition(CtrlCashSummary1)
    '                End If
    '            End If
    '            AmtPaid = vAdvanceAmount
    '            If crdsale > 0 Then
    '                'vAdvanceAmount = vAdvanceAmount - crdsale
    '                AmtPaid = AmtPaid - crdsale '- crdsaleadjustamount
    '            End If
    '            Dim dtCreditSaleData As New DataTable
    '            Dim objclsReturn As New clsCashMemoReturn
    '            dtCreditSaleData = objclsReturn.getCreditSaleBillData("'" + salesordernumber + "'")
    '            If dtCreditSaleData.Rows.Count > 0 AndAlso Not dtCreditSaleData Is Nothing Then
    '                For Each y In dtCreditSaleData.Rows
    '                    crdsaleadjustamount += y("CreditSaleAdjustment")
    '                Next
    '            End If
    '            If crdsaleadjustamount > 0 Or crdsale > 0 Then
    '                NetCrdSale = crdsale - crdsaleadjustamount
    '                'vAdvanceAmount = vAdvanceAmount + crdsaleadjustamount
    '                AmtPaid = AmtPaid + crdsaleadjustamount
    '            End If
    '            If NetCrdSale = 0 Then
    '                'CtrlCashSummary1.lblVisible10 = False
    '                'CtrlCashSummary1.lbltxtVisible10 = False
    '            Else
    '                ' SwipePosition(CtrlCashSummary1)
    '            End If
    '            CtrllblCreditSale.Text = FormatNumber(NetCrdSale, 2)
    '            CtrllblAmtPaid.Text = FormatNumber(AmtPaid, 2)
    '        End If
    '    Catch ex As Exception
    '        ShowMessage(ex.Message, getValueByKey("CLAE05"))
    '    End Try

    'End Function

    Private Function CalculateSalesOrderSummory(ByVal dsScanTemp As DataSet) As Boolean
        Try

            If Not (dsScan.Tables("ItemScanDetails") Is Nothing) AndAlso dsScan.Tables("ItemScanDetails").Rows.Count > 0 Then

                lbltotalitem.Text = dsScan.Tables("ItemScanDetails").Rows.Count & " Items"
                '  old      'lblOrderQty.Text = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                '                           dsScan.Tables("ItemScanDetails").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "")))
                lblOrderQty.Text = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                                          dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(Quantity)", "IsStatus In " & vFilterValue & "")))
                'old        lblPickupQty.Text = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                '                            dsScan.Tables("ItemScanDetails").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "")))
                lblPickupQty.Text = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                                            dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(PickUpQty)", "IsStatus In " & vFilterValue & "")))
                'lbldeliveredqty.Text = CDbl(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(DeliveredQty)", "") Is DBNull.Value, 0, _
                '                            dsScan.Tables("ItemScanDetails").Compute("SUM(DeliveredQty)", "")))
                lbldeliveredqty.Text = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(DeliveredQty)", "") Is DBNull.Value, 0, _
                                            dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(DeliveredQty)", "")))
                'If Not dsScan.Tables("ItemScanDetails").Compute("SUM(GrossAmt)", "IsStatus In " & vFilterValue & "") Is DBNull.Value Then
                '    vGrossAmount = CDbl(dsScan.Tables("ItemScanDetails").Compute("SUM(GrossAmt)", "IsStatus In " & vFilterValue & ""))
                'Else
                '    vGrossAmount = 0
                'End If
                If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value Then
                    vGrossAmount = CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & ""))
                Else
                    vGrossAmount = 0
                End If

                lblgrossamt1.Text = FormatNumber(vGrossAmount, 2)
                '   CtrllblGrossAmt.Text = FormatNumber(vGrossAmount, 0)
                CtrllblGrossAmt.Text = FormatNumber(vGrossAmount, 2)

                'vDiscAmount = CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                '                                 dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "")))
                vDiscAmount = 0
                '     For Each drScanTemp As DataRow In _dsPackagingVar.Tables("PackagingMaterial").Select("Status=True")
                For Each drScanTemp As DataRow In _dsPackagingVar.Tables("PackagingMaterial").Select("Status=True and IsStatus In " & vFilterValue & "")  'added by vipin
                    '$$ added by KETAN SO GST Changes 
                    If (drScanTemp("Quantity") - drScanTemp("DeliveredQty")) > 0 Then
                        vDiscAmount = vDiscAmount + ((drScanTemp("LineDiscount") * ((drScanTemp("Quantity") - drScanTemp("DeliveredQty")) / (drScanTemp("Quantity") - drScanTemp("DeliveredQty")))))
                    Else
                        vDiscAmount = vDiscAmount + ((drScanTemp("LineDiscount") * ((drScanTemp("Quantity") - drScanTemp("DeliveredQty")) / (drScanTemp("Quantity")))))
                    End If

                    '+ CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount*(Quantity-DeliveredQty/Quantity))", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                    '                             dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount*(Quantity-DeliveredQty/Quantity))", "IsStatus In " & vFilterValue & "")))


                Next
                '$$ added by KETAN SO GST Changes 
                'vDiscAmount = vDiscAmount '+ Math.Round(IIf(dtPickUpDisc.Compute("SUM(DiscountAmount)", "") Is DBNull.Value, 0, dtPickUpDisc.Compute("SUM(DiscountAmount)", "")), 2)
                If vDiscAmount > 0 Then
                    vDiscAmount = vDiscAmount '+ Math.Round(IIf(dtPickUpDisc.Compute("SUM(DiscountAmount)", "") Is DBNull.Value, 0, dtPickUpDisc.Compute("SUM(DiscountAmount)", "")), 2)
                Else
                    vDiscAmount = vDiscAmount + Math.Round(IIf(dtPickUpDisc.Compute("SUM(DiscountAmount)", "") Is DBNull.Value, 0, dtPickUpDisc.Compute("SUM(DiscountAmount)", "")), 2)
                End If

                CtrllblDiscAmt.Text = FormatNumber(vDiscAmount, 2)
                If vDiscAmount > 0 Then
                    CtrllblDiscPerc.Text = FormatNumber((vDiscAmount * 100) / vGrossAmount, 2)
                Else
                    CtrllblDiscPerc.Text = 0
                End If
                vOtherChargesOld = 0 '0000196
                vOtherChargesNew = 0 '0000196

                'Start==========Get OtherCharges from database===============
                'If Not (dsMain.Tables("SalesOrderOtherCharges") Is Nothing) AndAlso dsMain.Tables("SalesOrderOtherCharges").Rows.Count > 0 Then
                '    Dim vChargeAmountOld As String = IIf((dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(ChargeAmount)", "") Is DBNull.Value), 0, dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(ChargeAmount)", ""))
                '    Dim vTaxAmountOld As String = IIf((dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(TaxAmt)", "") Is DBNull.Value), 0, dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(TaxAmt)", ""))

                '    vOtherChargesOld = CDbl(CDbl(vChargeAmountOld) + CDbl(vTaxAmountOld))
                'End If

                If Not (dtOtherCharges Is Nothing) AndAlso dtOtherCharges.Rows.Count > 0 Then
                    Dim vChargeAmountOld As String = IIf((dtOtherCharges.Compute("Sum(ChargeAmount)", "") Is DBNull.Value), 0, dtOtherCharges.Compute("Sum(ChargeAmount)", ""))
                    Dim vTaxAmountOld As String = IIf((dtOtherCharges.Compute("Sum(TaxAmt)", "") Is DBNull.Value), 0, dtOtherCharges.Compute("Sum(TaxAmt)", ""))

                    vOtherChargesOld = CDbl(CDbl(vChargeAmountOld) + CDbl(vTaxAmountOld))
                End If

                vTotalOtherCharges = CDbl(vOtherChargesOld + vOtherChargesNew)
                CtrllblOtherCharges.Text = FormatNumber(vTotalOtherCharges, 0)
                'End============Get OtherCharges from Application============
                Dim AdvanceAmt As Double = 0
                If vTotalOtherCharges > 0.0 Then
                    '-Commented By Prasad TicketId No. GCCCE1600000034
                    '  CtrllblGrossAmt.Text = FormatNumber((vGrossAmount + vTotalOtherCharges), 0)
                    ' CtrllblGrossAmt.Text = FormatNumber((vGrossAmount), 0)
                    CtrllblGrossAmt.Text = FormatNumber((vGrossAmount), 2)
                    '-------------------------------------------------)
                    If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                        AdvanceAmt = vTotalOtherCharges
                    Else
                        AdvanceAmt = (vTotalOtherCharges * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100))
                    End If
                End If
                If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(NetAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value Then
                    'CtrllblNetAmt.Text = Format((CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, _
                    '                              dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & "") + vTotalOtherCharges))), 0) + Math.Round(IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(TaxValue)", "isdocumentlevel=true and status=1") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(taxValue)", " isdocumentlevel=true and status=1")) - vDiscAmount, 2)
                    ''Change By ketan GST Changes 
                    'CtrllblNetAmt.Text = Format((CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(GrossAmount)", "IsStatus In " & vFilterValue & "") + vTotalOtherCharges))), 0) - _
                    '    IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(LineDiscount)", "IsStatus In " & vFilterValue & "")) + _
                    'CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", ""))
                    CtrllblNetAmt.Text = Format((CDbl(IIf(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(NetAmount)", "IsStatus In " & vFilterValue & "") Is DBNull.Value, 0, dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(NetAmount)", "IsStatus In " & vFilterValue & "") + vTotalOtherCharges))), 0)  'un commited by vipin
                    CtrllblTaxAmt.Text = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "IsStatus In " & vFilterValue & "")), 0) + Math.Round(IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(TaxValue)", "IsDocumentLevel=1 and status=1") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(taxValue)", "IsDocumentLevel=1 and status=1")), 2) 'addedby vipin
                    '$$ added by KETAN SO GST Changes 


                Else
                    CtrllblNetAmt.Text = 0
                End If
                '  CtrllblTaxAmt.Text = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "")), 0) + Math.Round(IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(TaxValue)", "IsDocumentLevel=1 and status=1") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(taxValue)", "IsDocumentLevel=1 and status=1")), 2)
                ' CtrllblTaxAmt.Text = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "IsStatus In " & vFilterValue & "")), 0) + Math.Round(IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(TaxValue)", "IsDocumentLevel=1 and status=1") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(taxValue)", "IsDocumentLevel=1 and status=1")), 2) ' vipin
                'Dim taxamt As Decimal = CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "IsStatus In " & vFilterValue & ""))
                Dim taxamt As Decimal = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "IsStatus In " & vFilterValue & "")), 2) 'vipin
                CtrllblTaxAmt.Text = taxamt
                Dim crdsale As Double = 0.0
                Dim crdsaleadjustamount As Double = 0
                Dim salesordernumber As String = CtrlTxtOrderNo.Text
                Dim NetCrdSale As Double = 0
                Dim AmtPaid As Double = 0

                'Start==========Calculate Min Advance Paid===================

                '---- Calculate item level Min Pay Amount

                'Step: 1  - Calculate Previous Min Advance Pay
                Dim totalPreviousMinAdvPay As Double
                For Each dr As DataRow In dsMain.Tables("SalesOrderDtl").Rows
                    'Dim DiscPreAmt = Math.Round(IIf(dtPickUpDisc.Compute("SUM(DiscountAmount)", "articlecode='" & dr("articlecode") & "'") Is DBNull.Value, 0, dtPickUpDisc.Compute("SUM(DiscountAmount)", "articlecode='" & dr("articlecode") & "'")), 2)
                    'Dim ArticlePreviousMinAdvPay As Double = Math.Round((dr("SellingPrice") * dr("DeliveredQty")) + ((dr("TotalTaxAmount") * dr("DeliveredQty") / dr("Quantity"))) - DiscPreAmt, 3)

                    Dim DiscPreAmt As Decimal = IIf(dtPickUpDiscBillLineWise.Compute("SUM(DiscountAmount)", "BillLineNo='" & dr("BillLineNo") & "'") Is DBNull.Value, 0, dtPickUpDiscBillLineWise.Compute("SUM(DiscountAmount)", "BillLineNo='" & dr("BillLineNo") & "'"))
                    '-----Added By Prasad for Calculating Tax PickupWise of Savoy Client and Calculation of Previous AdvancePayment
                    Dim TaxPreAmt As Decimal = IIf(dtPickUpTaxAmtBillLineWise.Compute("SUM(TaxAmount)", "BillLineNo='" & dr("BillLineNo") & "'") Is DBNull.Value, 0, dtPickUpTaxAmtBillLineWise.Compute("SUM(TaxAmount)", "BillLineNo='" & dr("BillLineNo") & "'"))
                    Dim ArticlePreviousMinAdvPay As Double
                    If clsDefaultConfiguration.IsSavoy Then
                        ArticlePreviousMinAdvPay = (dr("SellingPrice") * dr("DeliveredQty")) + ((dr("TotalTaxAmount") * dr("DeliveredQty") / dr("Quantity"))) - DiscPreAmt + TaxPreAmt
                    Else
                        'ArticlePreviousMinAdvPay = (dr("SellingPrice") * dr("DeliveredQty")) + ((dr("TotalTaxAmount") * dr("DeliveredQty") / dr("Quantity"))) - DiscPreAmt '+ TaxPreAmt
                        '$$ added by ketan GST SO changes 
                        ArticlePreviousMinAdvPay = (dr("SellingPrice") * dr("DeliveredQty")) + TaxPreAmt - DiscPreAmt '+ TaxPreAmt
                    End If


                    totalPreviousMinAdvPay += ArticlePreviousMinAdvPay
                Next
                If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(MinPayAmt)", "IsStatus<> 'Deleted'") Is DBNull.Value Then
                    'vCurrMinAdvanceAmt = CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(MinPayAmt)", "IsStatus<> 'Deleted'"))
                    'step 2 : Change the min adv pay logic based on previous min adv pay + total pick up 
                    vCurrMinAdvanceAmt = FormatNumber(totalPreviousMinAdvPay, 0)
                    If Not dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(TotalPickupAmt)", "IsStatus<> 'Deleted'") Is DBNull.Value Then
                        vCurrMinAdvanceAmt = CDbl(vCurrMinAdvanceAmt) + CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(TotalPickupAmt)", "IsStatus<> 'Deleted'"))
                    End If
                Else
                    vCurrMinAdvanceAmt = 0
                End If

                vCurrMinAdvanceAmt = MyRound(vCurrMinAdvanceAmt, clsDefaultConfiguration.BillRoundOffAt)
                If lblPickupQty.Text = "0" And IsResetRequired Then
                    vCurrMinAdvanceAmt = 0
                End If
                If AdvanceAmt > 0 Then
                    vCurrMinAdvanceAmt = CDbl(vCurrMinAdvanceAmt) + AdvanceAmt
                End If
                If vCurrMinAdvanceAmt > vAdvanceAmount Then
                    lblminadvancepaid.Text = FormatNumber(vCurrMinAdvanceAmt - vAdvanceAmount, 2) ' CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("SUM(TotalPickupAmt)", "IsStatus<> 'Deleted'")) ' FormatNumber(vCurrMinAdvanceAmt - vAdvanceAmount, 2)
                    vCurrMinAdvanceAmt = lblminadvancepaid.Text
                Else
                    lblminadvancepaid.Text = strZero
                End If
                If dsInvoice.Tables(0).Rows.Count = 0 Then
                    lblminadvancepaid.Text = vCurrMinAdvanceAmt
                End If
                'End============Calculate Min Advance Paid===================
                If clsDefaultConfiguration.RoundOffRequired = True Then
                    CtrllblNetAmt.Text = MyRound(CtrllblNetAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                    CtrllblAmtPaid.Text = MyRound(AmtPaid, clsDefaultConfiguration.BillRoundOffAt)
                End If

                '-------Commented By Prasad
                ' CtrllblBaltoPay.Text = FormatNumber((CDbl(CtrllblNetAmt.Text) - vAdvanceAmount), 0)
                '--------------------------
                If lblOrderQty.Text = lbldeliveredqty.Text Then
                    vCurrMinAdvanceAmt = CtrllblBaltoPay.Text
                    lblminadvancepaid.Text = vCurrMinAdvanceAmt
                End If
                If dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
                    If Not dsPayment.Tables("MSTRecieptType").Compute("Sum(Amount)", "") Is DBNull.Value Then
                        vReceivedAmt = FormatNumber(CDbl(dsPayment.Tables("MSTRecieptType").Compute("Sum(Amount)", "")), 2)
                    End If

                    If CDbl(CtrllblBaltoPay.Text) < 0 Then
                        lblReceivedAmt.Text = FormatNumber(vReceivedAmt, 2)
                    Else
                        lblReceivedAmt.Text = FormatNumber(vReceivedAmt, 2)
                    End If
                Else
                    lblReceivedAmt.Text = strZero
                End If


                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(lblminadvancepaid.Text) Then
                        vCurrMinAdvanceAmt = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                        lblminadvancepaid.Text = vCurrMinAdvanceAmt
                    End If
                End If


                If clsDefaultConfiguration.RoundOffRequired = True Then
                    CtrllblNetAmt.Text = MyRound(CtrllblNetAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                    CtrllblAmtPaid.Text = MyRound(AmtPaid, clsDefaultConfiguration.BillRoundOffAt)
                    'CtrlCashSummary1.lbltxt6 = MyRound(CtrlCashSummary1.lbltxt6, clsDefaultConfiguration.BillRoundOffAt)
                End If

                If dsMain.Tables("SalesInvoice").Rows.Count > 0 AndAlso Not dsMain.Tables("SalesInvoice") Is Nothing Then
                    If dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").Length > 0 Then
                        Dim dt As DataTable = dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").CopyToDataTable
                        If dt.Rows.Count > 0 AndAlso Not dt Is Nothing Then
                            For Each x In dt.Rows
                                crdsale += x("AmountTendered")
                                salesordernumber = x("DocumentNumber")
                            Next
                        End If
                    Else
                        'SwipeBckDefaultPosition(CtrlCashSummary1)
                    End If
                End If
                AmtPaid = vAdvanceAmount
                If crdsale > 0 Then
                    'vAdvanceAmount = vAdvanceAmount - crdsale
                    AmtPaid = AmtPaid - crdsale '- crdsaleadjustamount
                End If
                If CDbl(lblminadvancepaid.Text) > CDbl(CtrllblBaltoPay.Text) Then
                    lblminadvancepaid.Text = CtrllblBaltoPay.Text
                End If

                Dim dtCreditSaleData As New DataTable
                Dim objclsReturn As New clsCashMemoReturn
                dtCreditSaleData = objclsReturn.getCreditSaleBillData("'" + salesordernumber + "'")
                If dtCreditSaleData.Rows.Count > 0 AndAlso Not dtCreditSaleData Is Nothing Then
                    For Each y In dtCreditSaleData.Rows
                        crdsaleadjustamount += y("CreditSaleAdjustment")
                    Next
                End If
                If crdsaleadjustamount > 0 Or crdsale > 0 Then
                    NetCrdSale = crdsale - crdsaleadjustamount
                    'vAdvanceAmount = vAdvanceAmount + crdsaleadjustamount
                    AmtPaid = AmtPaid + crdsaleadjustamount
                End If
                If NetCrdSale = 0 Then
                    'CtrlCashSummary1.lblVisible10 = False
                    'CtrlCashSummary1.lbltxtVisible10 = False
                Else
                    ' SwipePosition(CtrlCashSummary1)
                End If
                '-----Added By Prasad to Minus WriteOff Amt from Credit Sale Amt
                Dim WriteOffAmt = objPCSO.GetWriteOffAmt(CtrlTxtOrderNo.Text, clsAdmin.SiteCode, clsAdmin.Financialyear)
                CtrllblCreditSale.Text = NetCrdSale - WriteOffAmt
                '  CtrllblCreditSale.Text = FormatNumber(NetCrdSale, 0)
                CtrllblCreditSale.Text = FormatNumber(CtrllblCreditSale.Text, 0)
                '------------------------------------------------------------------
                CtrllblAmtPaid.Text = FormatNumber(AmtPaid, 0)
                '--------Added By Prasad for Calculating Balance to Pay
                CtrllblBaltoPay.Text = FormatNumber((CDbl(CtrllblNetAmt.Text) - vAdvanceAmount), 0)
                Dim AmtOtherMode = objPCSO.GetAmtPaidOtherMode(CtrlTxtOrderNo.Text, clsAdmin.SiteCode, clsAdmin.Financialyear)
                CtrllblBaltoPay.Text = (CDbl(CtrllblNetAmt.Text) - crdsaleadjustamount - WriteOffAmt - AmtOtherMode)
                If lblOrderQty.Text = lbldeliveredqty.Text Then
                    ' vCurrMinAdvanceAmt = CtrllblBaltoPay.Text 'vipin 28.02.2018
                    ' When User paid advance amount vai Credit and the n reduce the Qty then BalanceTopay Also contain the Credit Amount so minus that amount.
                    vCurrMinAdvanceAmt = (CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text))
                    lblminadvancepaid.Text = vCurrMinAdvanceAmt
                End If
                CtrllblMinAdv.Text = CDbl(lblminadvancepaid.Text) 'added by sagar 
                CtrllblNetAmt.Text = CDbl(CtrllblNetAmt.Text)
                CtrllblNetAmt.Text = IIf(CtrllblNetAmt.Text = 0, 0, Val(CtrllblNetAmt.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                If CtrllblMinAdv.Text = String.Empty Or CtrllblMinAdv.Text = "0" Then
                    CtrllblMinAdv.Text = 0
                Else
                    CtrllblMinAdv.Text = CDbl(CtrllblMinAdv.Text)
                    CtrllblMinAdv.Text = Val(CtrllblMinAdv.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN"))
                End If
                If dtDiscUsed IsNot Nothing Then
                    If dtDiscUsed.Rows.Count > 0 Then
                        CtrllblDiscUsed.Text = dtDiscUsed.Rows(0)("TotalDiscountAmount")
                        CtrllblDiscUsedPerc.Text = dtDiscUsed.Rows(0)("Percentage")
                    Else
                        CtrllblDiscUsed.Text = 0
                        CtrllblDiscUsedPerc.Text = 0
                    End If
                Else
                    CtrllblDiscUsed.Text = 0
                    CtrllblDiscUsedPerc.Text = 0
                End If
                '' aded By ketan PC WriteOff Changes dislay WriteOff Amount
                If dtWriteOffAmt IsNot Nothing Then
                    If dtWriteOffAmt.Rows.Count > 0 Then
                        CtrlLblWriteOffAmt.Text = dtWriteOffAmt.Rows(0)("WriteOffAmountTender")
                    Else
                        CtrlLblWriteOffAmt.Text = 0
                    End If
                Else
                    CtrlLblWriteOffAmt.Text = 0
                End If

                CtrllblAmtPaid.Text = CDbl(CtrllblAmtPaid.Text)
                CtrllblAmtPaid.Text = IIf(CtrllblAmtPaid.Text = 0, 0, Val(CtrllblAmtPaid.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblBaltoPay.Text = CDbl(CtrllblBaltoPay.Text)
                CtrllblBaltoPay.Text = IIf(CtrllblBaltoPay.Text = 0, 0, Val(CtrllblBaltoPay.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblTaxAmt.Text = CDbl(CtrllblTaxAmt.Text)
                'CtrllblTaxAmt.Text = IIf(CtrllblTaxAmt.Text = 0, 0, Val(CtrllblTaxAmt.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblGrossAmt.Text = CDbl(CtrllblGrossAmt.Text)
                '   CtrllblGrossAmt.Text = IIf(CtrllblGrossAmt.Text = 0, 0, Val(CtrllblGrossAmt.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblOtherCharges.Text = CDbl(CtrllblOtherCharges.Text)
                CtrllblOtherCharges.Text = IIf(CtrllblOtherCharges.Text = 0, 0, Val(CtrllblOtherCharges.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                ' CtrllblCreditSale.Text = CDbl(CtrllblCreditSale.Text)
                'CtrllblCreditSale.Text = IIf(CtrllblCreditSale.Text = 0, 0, Val(CtrllblCreditSale.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblCreditSale.Text = IIf(CtrllblCreditSale.Text = 0, 0, CtrllblCreditSale.Text)
                CtrllblDiscAmt.Text = CtrllblDiscAmt.Text
                ' CtrllblDiscAmt.Text = IIf(CtrllblDiscAmt.Text = 0, 0, Val(CtrllblDiscAmt.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblDiscPerc.Text = CDbl(CtrllblDiscPerc.Text)
                'CtrllblDiscPerc.Text = IIf(CtrllblDiscPerc.Text = 0, 0, Val(CtrllblDiscPerc.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblDiscPerc.Text = CtrllblDiscPerc.Text & "%"
                CtrllblDiscUsed.Text = IIf(CtrllblDiscUsed.Text = 0, 0, Val(CtrllblDiscUsed.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrllblDiscUsedPerc.Text = IIf(CtrllblDiscUsedPerc.Text = 0, 0, Val(CtrllblDiscUsedPerc.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                CtrlLblWriteOffAmt.Text = IIf(CtrlLblWriteOffAmt.Text = 0, 0, Val(CtrlLblWriteOffAmt.Text).ToString("##,##,##,###", New System.Globalization.CultureInfo("hi-IN")))
                '-----------------------------------------------------
                If setoldvalue Then
                    oldGrossAmt = CtrllblGrossAmt.Text
                    oldPickup = lblPickupQty.Text
                    oldBalToPay = CtrllblBaltoPay.Text
                    oldAdvPaid = CtrllblAmtPaid.Text
                    setoldvalue = False
                End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function
    ''' <summary>
    ''' Remove Apply Promotion on Current Sales Order
    ''' </summary>
    ''' <param name="dsScanTemp"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function RemoveApplyPromotion(ByRef dsScanTemp As DataSet, Optional ByRef dsPackVar As DataSet = Nothing, Optional ByVal IsMesReq As Boolean = True) As Boolean
        If Not IsMesReq Then
            Exit Function
        End If
        For Each drRem As DataRow In dsScanTemp.Tables(0).Select("IsStatus <> 'Deleted'")
            drRem("Discount") = 0
            drRem("MinPayAmt") = 0
            drRem("PromotionId") = 0
            drRem("LineDiscount") = 0
            drRem("TotalDiscPercentage") = 0
            drRem("FirstLevel") = 0
            drRem("TopLevel") = 0
            Dim obj As New clsSaleOrderCommon
            '---abc
            ' obj.RecalculateLine(drRem, CtrlSalesInfo.CtrlTxtOrderNo.Text, dsMain)
        Next

        For Each drPackvar As DataRow In dsPackVar.Tables(0).Select("IsStatus <> 'Deleted'")
            'drRem("GrossAmt") = 0
            'drRem("MinPayAmt") = 0

            drPackvar("Discount") = 0
            drPackvar("PromotionId") = 0
            drPackvar("LineDiscount") = 0
            drPackvar("TotalDiscPercentage") = 0
            drPackvar("FirstLevel") = String.Empty
            drPackvar("TopLevel") = String.Empty
            'drPackvar("TopLevelDisc") = 0

            'Dim obj As New clsSaleOrderCommon
            'obj.IsCSTApplicable = Me.IsCSTApplicable
            ' obj.RecalculateLine(drRem, CtrlSalesInfo1.CtrlTxtOrderNo.Text, dsMain)
        Next
        dsScanTemp.AcceptChanges()
        dsPackVar.AcceptChanges()
        IsApplyPromotion = False
        'IsSelectedPromotion = False
        'IsDefaultPromotion = False
        'rbnCST.Enabled = True
        'IsRoundOffMsg = False
        'IsRoundOfflabel = False
    End Function
    Private Function RemoveApplyPromotionNew(ByRef dsScanTemp As DataSet, Optional ByRef dsPackVar As DataSet = Nothing, Optional ByVal IsMesReq As Boolean = True) As Boolean
        If Not IsMesReq Then
            Exit Function
        End If

        Dim PrvDisAmount As Decimal
        Dim prvTaxAmount As Decimal

        For Each drRem As DataRow In dsScanTemp.Tables(0).Select("IsStatus <> 'Deleted'")
            drRem("Discount") = 0
            drRem("MinPayAmt") = 0
            drRem("PromotionId") = 0
            drRem("LineDiscount") = 0
            drRem("TotalDiscPercentage") = 0
            drRem("FirstLevel") = 0
            drRem("TopLevel") = 0

            Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drRem("BillLineNo").ToString() + "'AND PkgLineNo='" + drRem("PackagingIndex").ToString() + "'")
            If result.Length > 0 Then
                PrvDisAmount = result(0)("DiscountAmount")
            End If
            Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drRem("BillLineNo").ToString() + "' AND PkgLineNo='" + drRem("PackagingIndex").ToString() + "'") '$$ added by KETAN SO GST Changes 
            If resultTax.Length > 0 Then
                prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
            End If


            'drRem("NetAmount") = drRem("sellingPrice") * drRem("quantity")
            If drRem("sellingPrice") IsNot DBNull.Value Then
                If result.Length > 0 Then
                    drRem("NetAmount") = drRem("sellingPrice") * drRem("quantity") + drRem("ExclTaxAmt") - result(0)("DiscountAmount")
                Else
                    drRem("NetAmount") = drRem("sellingPrice") * drRem("quantity") + drRem("ExclTaxAmt")
                End If

                drRem("GrossAmt") = drRem("sellingPrice") * drRem("quantity")
            End If

            'Dim obj As New clsSaleOrderCommon
            '---abc
            ' obj.RecalculateLine(drRem, CtrlSalesInfo.CtrlTxtOrderNo.Text, dsMain)
            '$$ added by KETAN SO GST Changes 
            Dim dtTaxCalc As DataTable
            If IsCSTApplicable Then
                dtTaxCalc = objCM.getTax(vSiteCode, String.Empty, "SO201", drRem("Quantity"), drRem("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
            ElseIf drRem("EAN") Is DBNull.Value Then
                drRem("EAN") = "0"
                dtTaxCalc = objCM.getTax(vSiteCode, drRem.Item("ArticleCode"), "SO201", drRem("Quantity") - drRem("DeliveredQty"), drRem("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
            Else
                dtTaxCalc = objCM.getTax(vSiteCode, drRem.Item("ArticleCode"), "SO201", drRem("Quantity") - drRem("DeliveredQty"), drRem("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
            End If
            If drRem("ArticleType") = "Combo" Then
                If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then ''$$ added by nikhil
                    If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then  ''$$ added by nikhil
                        Dim prvdeliveredQty = drRem("DeliveredQty")
                        Dim Prvnetamount = drRem("DeliveredQty") * drRem.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                        ' Dim vTotalNetAmt = Math.Round(drRem.Item("SellingPrice") * (drRem.Item("Quantity") - prvdeliveredQty), 3) - drRem.Item("Discount")
                        Dim vTotalNetAmt = Math.Round(drRem.Item("SellingPrice") * (drRem.Item("Quantity") - prvdeliveredQty) - drRem.Item("Discount"), 3)
                        '  Dim newTax = vTotalNetAmt * CDbl(DTComboTaxPer.Rows(0)("ValueInPer")) / 100
                        Dim DRComboTax As DataRow() = DTComboTaxPer.Select("ComboSrNo='" + drRem("SrNo").ToString() + "'")

                        For Each drTaxCombo In DTComboTaxPer.Select("ComboSrNo='" + drRem("SrNo").ToString() + "'")
                            If Not lblArticleCombo1 Is Nothing AndAlso lblArticleCombo1.Rows.Count > 0 Then   '' $$ added by nikhil
                                'drTaxCombo("ValueInPer") = lblArticleCombo1.Rows(0)("Tax")
                                If drRem("SrNo") = SrNoForCombo Then
                                    drTaxCombo("ValueInPer") = lblArticleCombo1.Rows(0)("Tax")
                                End If
                            End If
                        Next
                        Dim newTax As Decimal = 0
                        If DRComboTax.Length > 0 Then
                            newTax = vTotalNetAmt * DRComboTax(0)("ValueInPer") / 100
                        Else
                            newTax = vTotalNetAmt * drRem("TaxInPer").ToString() / 100
                        End If
                        '   drRem("TaxPer") = IIf(drRem("TaxInPer") IsNot DBNull.Value, drRem("TaxInPer"), 0)
                        drRem("TaxPer") = IIf(drRem("TaxPer") IsNot DBNull.Value, drRem("TaxPer"), 0)  'vipin
                        drRem("ExclTaxAmt") = prvTaxAmount + newTax
                        drRem("TotalTaxAmt") = prvTaxAmount + newTax
                        drRem("NetAmount") = Prvnetamount + vTotalNetAmt + newTax
                        TotalSalesQty = drRem("PickUpQty") + IIf(drRem("DeliveredQty") IsNot DBNull.Value, drRem("DeliveredQty"), 0)
                        'NetArticleRate = (vTotalNetAmt + newTax) / (drRem("Quantity") - drRem("DeliveredQty"))
                        If (drRem("Quantity") - drRem("DeliveredQty")) > 0 Then
                            NetArticleRate = (vTotalNetAmt + newTax) / (drRem("Quantity") - drRem("DeliveredQty"))
                        Else
                            NetArticleRate = (vTotalNetAmt + newTax) / (drRem("Quantity"))
                        End If
                        drRem("MinPayAmt") = ((drRem("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                        drRem("TotalPickupAmt") = NetArticleRate * drRem("PickupQty")
                        'If PrvDisAmount <> 0 Then
                        '    drRem("Discount") = PrvDisAmount  'vipin
                        '    drRem("LineDiscount") = PrvDisAmount 'vipin
                        'End If


                    End If


                End If
            Else
                If dtTaxCalc.Rows.Count > 0 Then
                    'Dim PrvDisAmount = result(0)("DiscountAmount")
                    'Dim prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                    Dim prvdeliveredQty = drRem("DeliveredQty")
                    Dim Prvnetamount = drRem("DeliveredQty") * drRem.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                    ' Dim vTotalNetAmt = Math.Round(drRem.Item("SellingPrice") * (drRem.Item("Quantity") - prvdeliveredQty), 3) - drRem.Item("Discount")
                    Dim vTotalNetAmt = Math.Round(drRem.Item("SellingPrice") * (drRem.Item("Quantity") - prvdeliveredQty) - drRem.Item("Discount"), 3)
                    dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                    objCM.getCalculatedDataSet(dtTaxCalc)
                    drRem("ExclTaxAmt") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                    drRem("TotalTaxAmt") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                    drRem("TaxPer") = Math.Round(dtTaxCalc.Compute("SUM(Value)", ""), 2)

                    drRem("NetAmount") = Prvnetamount + vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                    TotalSalesQty = drRem("PickUpQty") + IIf(drRem("DeliveredQty") IsNot DBNull.Value, drRem("DeliveredQty"), 0)
                    ' NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drRem("Quantity") - drRem("DeliveredQty"))
                    If (drRem("Quantity") - drRem("DeliveredQty")) > 0 Then
                        NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drRem("Quantity") - drRem("DeliveredQty"))
                    Else
                        NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drRem("Quantity"))
                    End If
                    drRem("MinPayAmt") = ((drRem("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                    drRem("TotalPickupAmt") = NetArticleRate * drRem("PickupQty")


                    'If PrvDisAmount <> 0 Then
                    '    drRem("Discount") = PrvDisAmount  'vipin
                    '    drRem("LineDiscount") = PrvDisAmount 'vipin
                    'End If

                End If
            End If
            PrvDisAmount = 0
            prvTaxAmount = 0
        Next


        Dim a = dtPickUpDiscGrid
        For Each drPackvar As DataRow In dsPackVar.Tables(0).Select("IsStatus <> 'Deleted'")
            'drRem("GrossAmt") = 0
            'drRem("MinPayAmt") = 0
            Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drPackvar("BillLineNo").ToString() + "' and pkgLineNo='" + drPackvar("pkgLineNo").ToString() + "'")
            Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drPackvar("BillLineNo").ToString() + "' and pkgLineNo='" + drPackvar("pkgLineNo").ToString() + "'") '$$ added by KETAN SO GST Changes 
            If result.Length > 0 Then
                PrvDisAmount = result(0)("DiscountAmount")
            End If
            If resultTax.Length > 0 Then
                prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
            End If
            drPackvar("Discount") = 0
            drPackvar("PromotionId") = 0
            drPackvar("LineDiscount") = 0
            drPackvar("TotalDiscPercentage") = 0
            drPackvar("FirstLevel") = String.Empty
            drPackvar("TopLevel") = String.Empty
            If drPackvar("sellingPrice") IsNot DBNull.Value Then
                If result.Length > 0 Then
                    drPackvar("NetAmount") = drPackvar("sellingPrice") * drPackvar("quantity") + drPackvar("ExclTaxAmt") - result(0)("DiscountAmount")
                Else
                    drPackvar("NetAmount") = drPackvar("sellingPrice") * drPackvar("quantity") + drPackvar("ExclTaxAmt")
                End If

                drPackvar("GrossAmount") = drPackvar("sellingPrice") * drPackvar("quantity")
                drPackvar("GrossAmt") = drPackvar("sellingPrice") * drPackvar("quantity")
            End If
            '$$ added by KETAN SO GST Changes 
            Dim dtTaxCalc As DataTable
            If IsCSTApplicable Then
                dtTaxCalc = objCM.getTax(vSiteCode, String.Empty, "SO201", drPackvar("Quantity"), drPackvar("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
            ElseIf drPackvar("EAN") Is DBNull.Value Then  '' $$ added by nikhil
                drPackvar("EAN") = "0"
                dtTaxCalc = objCM.getTax(vSiteCode, drPackvar.Item("ArticleCode"), "SO201", drPackvar("Quantity") - drPackvar("DeliveredQty"), drPackvar("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
            Else

                dtTaxCalc = objCM.getTax(vSiteCode, drPackvar.Item("ArticleCode"), "SO201", drPackvar("Quantity") - drPackvar("DeliveredQty"), drPackvar("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
            End If
            If drPackvar("ArticleType") = "Combo" Then
                If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then ''$$ added by nikhil
                    If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then  ''$$ added by nikhil
                        Dim prvdeliveredQty = drPackvar("DeliveredQty")
                        Dim Prvnetamount = drPackvar("DeliveredQty") * drPackvar.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                        ' Dim vTotalNetAmt = Math.Round(drPackvar.Item("SellingPrice") * (drPackvar.Item("Quantity") - prvdeliveredQty), 3) - drPackvar.Item("Discount")
                        Dim vTotalNetAmt = Math.Round(drPackvar.Item("SellingPrice") * (drPackvar.Item("Quantity") - prvdeliveredQty) - drPackvar.Item("Discount"), 3)
                        'Dim newTax = vTotalNetAmt * CDbl(DTComboTaxPer.Rows(0)("ValueInPer")) / 100
                        Dim DRComboTax As DataRow() = DTComboTaxPer.Select("ComboSrNo='" + drPackvar("BillLineNo").ToString() + "'")
                        Dim newTax As Decimal = 0
                        If DRComboTax.Length > 0 Then
                            newTax = vTotalNetAmt * DRComboTax(0)("ValueInPer") / 100
                        Else
                            If drPackvar("TaxInPer") Is DBNull.Value Then
                                newTax = 0
                            Else
                                newTax = vTotalNetAmt * drPackvar("TaxInPer") / 100
                            End If

                        End If

                        drPackvar("ExclTaxAmt") = prvTaxAmount + newTax
                        drPackvar("TotalTaxAmount") = prvTaxAmount + newTax
                        drPackvar("NetAmount") = Prvnetamount + vTotalNetAmt + newTax
                        TotalSalesQty = drPackvar("PickUpQty") + IIf(drPackvar("DeliveredQty") IsNot DBNull.Value, drPackvar("DeliveredQty"), 0)
                        'NetArticleRate = (vTotalNetAmt + newTax) / (drPackvar("Quantity") - drPackvar("DeliveredQty"))
                        If (drPackvar("Quantity") - drPackvar("DeliveredQty")) > 0 Then
                            NetArticleRate = (vTotalNetAmt + newTax) / (drPackvar("Quantity") - drPackvar("DeliveredQty"))
                        Else
                            NetArticleRate = (vTotalNetAmt + newTax) / (drPackvar("Quantity"))
                        End If
                        drPackvar("MinPayAmt") = ((drPackvar("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                        drPackvar("TotalPickupAmt") = NetArticleRate * drPackvar("PickupQty")

                        'If PrvDisAmount <> 0 Then
                        '    drPackvar("Discount") = PrvDisAmount  'vipin
                        '    drPackvar("LineDiscount") = PrvDisAmount 'vipin
                        'End If
                    End If
                End If
            Else
                If dtTaxCalc.Rows.Count > 0 Then
                    '  Dim PrvDisAmount = result(0)("DiscountAmount")
                    '   Dim prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                    Dim prvdeliveredQty = drPackvar("DeliveredQty")
                    Dim Prvnetamount = drPackvar("DeliveredQty") * drPackvar.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                    '  Dim vTotalNetAmt = Math.Round(drPackvar.Item("SellingPrice") * (drPackvar.Item("Quantity") - prvdeliveredQty), 3) - drPackvar.Item("Discount")
                    Dim vTotalNetAmt = Math.Round(drPackvar.Item("SellingPrice") * (drPackvar.Item("Quantity") - prvdeliveredQty) - drPackvar.Item("Discount"), 3)
                    dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                    objCM.getCalculatedDataSet(dtTaxCalc)
                    drPackvar("ExclTaxAmt") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                    drPackvar("TotalTaxAmount") = prvTaxAmount + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                    drPackvar("TaxPer") = Math.Round(dtTaxCalc.Compute("SUM(Value)", ""), 2)

                    drPackvar("NetAmount") = Prvnetamount + vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)
                    TotalSalesQty = drPackvar("PickUpQty") + IIf(drPackvar("DeliveredQty") IsNot DBNull.Value, drPackvar("DeliveredQty"), 0)
                    'NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drPackvar("Quantity") - drPackvar("DeliveredQty"))
                    If (drPackvar("Quantity") - drPackvar("DeliveredQty")) > 0 Then
                        NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drPackvar("Quantity") - drPackvar("DeliveredQty"))
                    Else
                        NetArticleRate = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drPackvar("Quantity"))
                    End If
                    drPackvar("MinPayAmt") = ((drPackvar("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                    drPackvar("TotalPickupAmt") = NetArticleRate * drPackvar("PickupQty")

                    'If PrvDisAmount <> 0 Then
                    '    drPackvar("Discount") = PrvDisAmount  'vipin
                    '    drPackvar("LineDiscount") = PrvDisAmount 'vipin
                    'End If
                End If
            End If
            PrvDisAmount = 0
            prvTaxAmount = 0
        Next

        If dsPackVar.Tables(0).Rows.Count = 1 Then
            For Each drPackvar As DataRow In dsPackVar.Tables(0).Select("IsStatus = 'Deleted'")
                'drRem("GrossAmt") = 0
                'drRem("MinPayAmt") = 0
                Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drPackvar("BillLineNo").ToString() + "' and pkgLineNo='" + drPackvar("pkgLineNo").ToString() + "'") '$$ added by KETAN SO GST Changes 
                Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drPackvar("BillLineNo").ToString() + "' and pkgLineNo='" + drPackvar("pkgLineNo").ToString() + "'")
                drPackvar("Discount") = 0
                drPackvar("PromotionId") = 0
                drPackvar("LineDiscount") = 0
                drPackvar("TotalDiscPercentage") = 0
                drPackvar("FirstLevel") = String.Empty
                drPackvar("TopLevel") = String.Empty
                If drPackvar("sellingPrice") IsNot DBNull.Value Then
                    If result.Length > 0 Then
                        drPackvar("NetAmount") = drPackvar("sellingPrice") * drPackvar("quantity") + drPackvar("ExclTaxAmt") - result(0)("DiscountAmount")
                    Else
                        drPackvar("NetAmount") = drPackvar("sellingPrice") * drPackvar("quantity") + drPackvar("ExclTaxAmt")
                    End If

                    drPackvar("GrossAmount") = drPackvar("sellingPrice") * drPackvar("quantity")
                    drPackvar("GrossAmt") = drPackvar("sellingPrice") * drPackvar("quantity")
                End If

                'drPackvar("TopLevelDisc") = 0

                'Dim obj As New clsSaleOrderCommon
                'obj.IsCSTApplicable = Me.IsCSTApplicable
                ' obj.RecalculateLine(drRem, CtrlSalesInfo1.CtrlTxtOrderNo.Text, dsMain)


            Next
        End If
        If dsScanTemp.Tables(0).Rows.Count = 1 Then
            For Each drRem As DataRow In dsScanTemp.Tables(0).Select("IsStatus = 'Deleted'")
                drRem("Discount") = 0
                drRem("MinPayAmt") = 0
                drRem("PromotionId") = 0
                drRem("LineDiscount") = 0
                drRem("TotalDiscPercentage") = 0
                drRem("FirstLevel") = 0
                drRem("TopLevel") = 0
                Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drRem("BillLineNo").ToString() + "'")
                Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drRem("BillLineNo").ToString() + "' and pkgLineNo='" + drRem("pkgLineNo").ToString() + "'") '$$ added by KETAN SO GST Changes 

                'drRem("NetAmount") = drRem("sellingPrice") * drRem("quantity")
                If drRem("sellingPrice") IsNot DBNull.Value Then
                    If result.Length > 0 Then
                        drRem("NetAmount") = drRem("sellingPrice") * drRem("quantity") + drRem("ExclTaxAmt") - result(0)("DiscountAmount")
                    Else
                        drRem("NetAmount") = drRem("sellingPrice") * drRem("quantity") + drRem("ExclTaxAmt")
                    End If

                    drRem("GrossAmt") = drRem("sellingPrice") * drRem("quantity")
                End If

                'Dim obj As New clsSaleOrderCommon
                '---abc
                ' obj.RecalculateLine(drRem, CtrlSalesInfo.CtrlTxtOrderNo.Text, dsMain)


                PrvDisAmount = 0
                prvTaxAmount = 0
            Next
        End If
        dsScanTemp.AcceptChanges()
        dsPackVar.AcceptChanges()
        IsApplyPromotion = False
        IsBtnSave = True
        'CalculateSalesOrderSummory(dsScan)
        'RefreshLoadSOData()
        'GridItemSetting()
        'IsSelectedPromotion = False
        'IsDefaultPromotion = False
        'rbnCST.Enabled = True
        'IsRoundOffMsg = False
        'IsRoundOfflabel = False
    End Function
    ''' <summary>
    ''' Clears All Resource for new sales order
    ''' </summary>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function ResetSalesOrder() As Boolean
        lblArticleCombo1.Clear() '' added by ketan for Prodution issue clear dt 

        If Not (dsScan Is Nothing) AndAlso dsScan.Tables("ItemScanDetails").Rows.Count > 0 Then
            dsScan.Tables(0).Rows.Clear()

        End If
        If Not (dsPackagingVar Is Nothing) AndAlso dsPackagingVar.Tables("PackagingMaterial").Rows.Count > 0 Then
            dsPackagingVar.Clear()
        End If
        If Not (dsPackagingDelivery Is Nothing) AndAlso dsPackagingDelivery.Tables("PackagingDelivery").Rows.Count > 0 Then
            dsPackagingDelivery.Clear()
        End If
        If Not (dsScanReturn Is Nothing) AndAlso dsScanReturn.Tables("ItemScanDetails").Rows.Count > 0 Then
            dsScanReturn.Clear()
        End If

        RefreshLoadSOData()

        If dsInvoice.Tables.Count > 0 AndAlso dsInvoice.Tables("InvoiceDetails").Rows.Count > 0 Then
            dsInvoice.Clear()
        End If
        RefreshLoadInvcData()

        If Not (dtOtherCharges Is Nothing) AndAlso dtOtherCharges.Rows.Count > 0 Then
            dtOtherCharges.Rows.Clear()
        End If

        If Not (dsMain Is Nothing) Then
            dsMain.Clear()
        End If

        If Not (dsPayment Is Nothing) Then
            dsPayment.Clear()
        End If
        If Not (DtSOStr Is Nothing) Then
            DtSOStr.Clear()
        End If

        If Not (dtDocTaxes Is Nothing) Then
            dtDocTaxes.Clear()
        End If
        '---abc
        'If Not (CtrlCustDtls1.dtCustmInfo Is Nothing) Then
        '    CtrlCustDtls1.dtCustmInfo.Clear()
        'End If
        strNumbers.Clear()
        strTimesNumbers.Clear()
        If dsPayment.Tables.Contains("CheckDtls") Then
            dsPayment.Tables.Remove("CheckDtls")
        End If

        If dsMain.Tables.Contains("CheckDtls") Then
            dsMain.Tables.Remove("CheckDtls")
        End If

        ' BtnSearchItem.Enabled = False
        'CtrlSalesInfo.CtrldtOrderDt.Value = ""
        'CtrlSalesInfo.CtrlDtExpDelDate.Visible = True
        'CtrlSalesInfo.CtrlDtExpDelDate.Value = DBNull.Value
        'CtrlSalesInfo.CtrlTxtRemarks.Text = ""
        'CtrlSalesInfo.CtrlTxtCustOrdRef.Text = ""
        CtrlSalesPerson.CtrlSalesPersons.SelectedIndex = -1

        'CtrlProductImage.ClearImage()
        'CtrlCustDtls1.pClear()
        'CtrlSalesInfo.CtrlTxtInvoice.Text = ""

        'lbltotalitem.Text = 0
        'lblOrderQty.Text = 0
        'lblPickupQty.Text = 0
        'lbldeliveredqty.Text = 0

        'CtrlCashSummary1.lbltxt1 = strZero
        'lblgrossamt1.Text = strZero
        'CtrlCashSummary1.lbltxt2 = strZero
        'CtrlCashSummary1.lbltxt4 = strZero

        'CtrlCashSummary1.lbltxt3 = strZero
        'CtrlCashSummary1.lbltxt5 = strZero
        'lblminadvancepaid.Text = strZero
        'CtrlCashSummary1.lbltxt6 = strZero
        'lblReceivedAmt.Text = strZero
        'CtrlCashSummary1.lbltxt7 = strZero
        remarkPanel.Controls.Clear()
        CtrldtOrderDt.ReadOnly = False
        vReceivedAmt = 0.0
        vBalanceAmount = 0.0
        vAdvanceAmount = 0.0
        vDiscAmount = 0.0
        vCurrMinAdvanceAmt = 0.0
        vAmendedNo = 0
        MaxDiscNo = 1
        MaxTaxNo = 1
        vSOStatus = ""
        'vSTRList = ""
        vCardType = ""
        vDocType = vDocTypeCreation
        lblCompName.Text = ""
        CtrlLabel18.Text = ""
        CtrltxrCust.Text = ""
        txtReturnReason.Text = ""
        LbReturnReason.Visible = False
        txtReturnReason.Visible = False
        'CtrllblMinAdv.Text = strZero
        IsBtnSave = True
        IsBookBarcodePrint = False

        IsResetRequired = True
        CtrllblNetAmt.Text = strZero
        CtrllblAmtPaid.Text = strZero
        CtrllblGrossAmt.Text = strZero
        CtrllblBaltoPay.Text = strZero
        CtrllblTaxAmt.Text = strZero
        CtrllblCreditSale.Text = strZero
        CtrllblOtherCharges.Text = strZero
        CtrllblDiscAmt.Text = strZero
        CtrllblDiscPerc.Text = strZero & "%"
        CtrllblDiscUsed.Text = strZero
        CtrllblDiscUsedPerc.Text = strZero
        CtrllblDiscUsedPerc.Visible = False
        CtrltxrCust.Text = ""
        CtrllblMinAdv.Text = strZero
        CtrlLblWriteOffAmt.Text = strZero

        IsAllowedSalesReturn = False
        IsOutboundCreated = False
        Batchbarcode = New List(Of SpectrumCommon.BtachbarcodeInfo)
        ReturnBatchbarcode = New List(Of SpectrumCommon.BtachbarcodeInfo)
    End Function

#End Region
#Region "Save/Update Sales Order "
    ''' <summary>
    ''' Uodate sales order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub BtnSaveSalesOrder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs, Optional ByVal flg As Boolean = False) 'Handles BtnSOSave.Click
        Try
            CtrlSalesPerson.AndroidSearchTextBox.Focus()
            CtrlSalesPerson.AndroidSearchTextBox.Select()
            If IsBackDelDate = True Then
                IsBackDelDate = False
                Exit Sub
            End If
            If Not isValidData() Then
                Exit Sub
            End If
            'If IsAllowedSalesReturn = False Then
            '    isEditLoad = True
            '    If Convert.ToDateTime(ctrlDtDeliveryDate.Value.Date) < Convert.ToDateTime(DateTime.Now.Date) Then
            '        ShowMessage("Delivery Date Can't be Backdated", "Information")
            '        ctrlDtDeliveryDate.Value = DateTime.Now
            '        isEditLoad = False
            '        Exit Sub
            '    ElseIf Convert.ToDateTime(ctrlDtDeliveryDate.Value.Date) = Convert.ToDateTime(DateTime.Now.Date) Then
            '        If Convert.ToDateTime(ctrlDtDeliveryDate.Value).ToShortTimeString < Convert.ToDateTime(DateTime.Now).ToShortTimeString Then
            '            ShowMessage("Delivery Date Can't be Backdated", "Information")
            '            ctrlDtDeliveryDate.Value = DateTime.Now
            '            isEditLoad = False
            '            Exit Sub
            '        End If
            '    End If
            '    isEditLoad = False
            'End If

            isLeaved = True
            grdSOItems.FinishEditing()

            If dsScan.Tables(0).Rows.Count = 0 Then
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                Exit Sub
            End If

            If (String.IsNullOrEmpty(vSalesNo) Or CtrlTxtOrderNo.Text.Trim <> vSalesNo Or grdSOItems.Rows.Count <= 1) Then
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                Exit Sub
            End If
            If IsBtnSave Then
                rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                IsBtnSave = False
            End If
            '-----Barcode print condtn
            If IsBookingEdit = True Then
                If Not oldGrossAmt = CtrllblGrossAmt.Text Then
                    IsBookBarcodePrint = True
                End If
                If IsBookBarcodePrint = False And oldPickup <> lblPickupQty.Text Then
                    '' added By Ketan PC Issue Generate Barcode Every Time
                    'If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                    IsBookBarcodePrint = True
                    'End If
                End If
                'If IsBookBarcodePrint = False And oldPickup <> lblPickupQty.Text Then
                '    IsBookBarcodePrint = True
                'End If
            End If
            'If CtrlCustDtls1.dtCustmInfo.Rows.Count > 2 Then
            '    drHomeAdds = CtrlCustDtls1.dtCustmInfo.Select("AddressType='1'")(0)
            'ElseIf CtrlCustDtls1.dtCustmInfo.Rows.Count > 0 Then
            '    drHomeAdds = CtrlCustDtls1.dtCustmInfo.Rows(0)
            'Else
            '    ShowMessage(getValueByKey("BL001"), "BL001 - " & getValueByKey("CLAE04"))
            '    Exit Sub
            'End If

            'If Not IsDBNull(CtrlCustDtls1.cboAddrType.SelectedValue) AndAlso (CtrlCustDtls1.cboAddrType.SelectedValue.ToString() <> String.Empty) Then
            '    ' If Not (CtrlCustDtls1.cboAddrType.SelectedValue Is DBNull.Value) AndAlso Not (CtrlCustDtls1.cboAddrType.SelectedValue = 99) Then
            '    drDelvAdds = CtrlCustDtls1.dtCustmInfo.Select("AddressType='" & CtrlCustDtls1.cboAddrType.SelectedValue & "' ")(0)
            'Else
            '    drDelvAdds = CtrlCustDtls1.dtCustmInfo.Rows(0)
            'End If

            vCurrentDate = objComn.GetCurrentDate()
            If IsAllowedSalesReturn = False Then

                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Please Select Sales Order first", "Sales Order Information")
                    Exit Sub
                End If

                'Comment by Ashish on 25 Nov 2010
                'Adding a check for variable "flg" to enter or skip the "If CDbl(CtrlCashSummary1.lbltxt6) < CDbl(CtrlCashSummary1.lbltxt5) Then" condition
                'This is for allowing saving of SO when override amount = 0
                If flg = False Then
                    '' added By Ketan PC Issue Generate Barcode Every Time
                    ' If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                    If CDbl(CtrllblBaltoPay.Text.Trim) > 0 Then
                        'ShowMessage(getValueByKey("SO017") & CDbl(CDbl(lblminadvancepaid.Text.Trim)), "SO017 - " & getValueByKey("CLAE04"))
                        If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then ''change By Ketan Accept Pay Windows display 2 times 
                            '    If CDbl(CtrlCashSummary1.lbltxt6.Trim) > 0 Then
                            '        ShowMessage(getValueByKey("SO017") & CDbl(lblminadvancepaid.Text.Trim), getValueByKey("CLAE04"))
                            If Not IsBookingEdit = True Then
                                BtnAcceptPayment_Click(sender, e)
                                Exit Sub
                            End If

                            'ShowMessage("Need to pay min advance amount.", "Min Advance Amount")
                        End If
                    End If
                End If
                'End of change


                'Comment by Ashish on 25 Nov 2010
                'Adding a check for variable "flg" to enter or skip the "If CDbl(CtrlCashSummary1.lbltxt6) < CDbl(CtrlCashSummary1.lbltxt5) Then" condition
                'This is for allowing saving of SO when override amount = 0
                If flg = False Then
                    If CDbl(CtrllblBaltoPay.Text.Trim) < 0 AndAlso Not (CDbl(CtrllblBaltoPay.Text.Trim) = CDbl(lblReceivedAmt.Text.Trim)) Then
                        If Not IsBookingEdit = True Then
                            ShowMessage(getValueByKey("SO037"), "SO037 - " & getValueByKey("CLAE04"))
                            BtnAcceptPayment_Click(sender, e)
                            Exit Sub
                        End If
                        'ShowMessage("Need to Return Balance Amount.", "Return Balance Amount")
                    End If
                End If
                'End of change

                'Comment by Ashish on 25 Nov 2010
                'Adding a check for variable "flg" to enter or skip the "If CDbl(CtrlCashSummary1.lbltxt6) < CDbl(CtrlCashSummary1.lbltxt5) Then" condition
                'This is for allowing saving of SO when override amount = 0
                If flg = False Then
                    If Not (CDbl(CtrllblBaltoPay.Text.Trim) >= CDbl(lblReceivedAmt.Text.Trim)) Then
                        If Not IsBookingEdit = True Then
                            ShowMessage(getValueByKey("SO038"), "SO038 - " & getValueByKey("CLAE04"))
                            BtnAcceptPayment_Click(sender, e)
                            Exit Sub
                        End If
                        'ShowMessage("Need to pay Balance Amount.", "Return Balance Amount")
                    End If
                End If
                'End of change

                If OnlineConnect = True Then
                    'Start=================Apply Customer Loyalty Program======================
                    'If CtrlCustDtls1.lblCustTypeValue.Text = "CLP" AndAlso Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                    '    vCardType = CtrlCustDtls1.dtCustmInfo.Rows(0)("CARDTYPE").ToString()
                    '    CalCulateCLP(vCardType, dsScan.Tables("ItemScanDetails"), "(PickUpQty>0 Or DeliveredQty>0) and IsCLP='True' and IsStatus<>'Deleted'")
                    '    Dim Point As Object
                    '    Point = dsScan.Tables("ItemScanDetails").Compute("Sum(CLPPoints)", "(PickUpQty>0 Or DeliveredQty>0) and IsCLP='True' and IsStatus<>'Deleted'")
                    '    If Not Point Is DBNull.Value Then
                    '        TotalPoints = CDbl(Point)
                    '    End If
                    'End If

                    Try
                        rbnLStatus.SmallImage = Spectrum.My.Resources.connected1.ToBitmap
                        rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus2")
                    Catch ex As Exception

                    End Try
                Else
                    Try
                        rbnLStatus.SmallImage = Spectrum.My.Resources.disconnected1.ToBitmap
                        rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus1")
                    Catch ex As Exception

                    End Try
                End If

                'If clsDefaultConfiguration.SupplierCode = Nothing Then
                '    ShowMessage(getValueByKey("SO080"), "SO080 - " & getValueByKey("CLAE04"))
                '    Exit Sub
                'End If
                If Not (PrepareHdrDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareDtlDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareComboHeaderDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareComboDetailDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareSOSTRtDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparePackageVariationDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareSODiscountEditDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparePackageVariationDeliveryDataforSave(dsMain) = True) Then
                    Exit Sub
                End If

                If Not (PreparePackageVariationTempDeliveryDataforSave(dsMain) = True) Then
                    Exit Sub
                End If

                If Not (PrepareInvcDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                'changes for savoy
                If clsDefaultConfiguration.IsSavoy Then
                    If Not (PrepareSaleOrderTermNConditionsSave(dsMain) = True) Then
                        Exit Sub
                    End If
                End If
                If Not (PrepareOtherTaxDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparTaxDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparSTRFactoryRemarkforSave(dsMain) = True) Then
                    Exit Sub
                End If

                If Not (PrepareSOTaxEditDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not IsBookingEdit Then
                    If Val(lblPickupQty.Text) > 0 Then
                        IsOutboundCreated = True
                        If Not (PrepareOrderHdrDataforSave(dsMain) = True) Then
                            Exit Sub
                        End If
                        If Not (PrepareOrderDtlDataforSave(dsMain) = True) Then
                            Exit Sub
                        End If
                        If Not (PrepareOrderVariationDeliveryDataforSave(dsMain) = True) Then
                            Exit Sub
                        End If
                    End If
                Else
                    '' added By Ketan PC Issue Generate Barcode Every Time 
                    'If Val(lblPickupQty.Text) > 0 And (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                    IsOutboundCreated = True
                    'If Not (PrepareOrderHdrDataforSave(dsMain) = True) Then
                    '    Exit Sub
                    'End If
                    'If Not (PrepareOrderDtlDataforSave(dsMain) = True) Then
                    '    Exit Sub
                    'End If
                    'If Not (PrepareOrderVariationDeliveryDataforSave(dsMain) = True) Then
                    '    Exit Sub
                    'End If
                    ' End If
                End If




                'Start=================Change History Information==========================
                Dim dtUnchange As New DataTable
                dtUnchange.Merge(dsMain.Tables("SalesOrderDTL"))

                Dim dvHdrAudit As New DataView(dsMain.Tables("SalesOrderHDR"), "", "", DataViewRowState.ModifiedOriginal)
                Dim dvDtlUnchanged As New DataView(dtUnchange, "", "ArticleCode", DataViewRowState.OriginalRows)
                Dim dvDtlchanged As New DataView(dtUnchange, "", "ArticleCode", DataViewRowState.ModifiedCurrent)

                If dvHdrAudit.ToTable.Rows.Count > 0 Then

                    'dvDtlchanged.AllowEdit = True
                    'For Each drChanged As DataRowView In dvDtlchanged
                    '    Dim drIsChages As DataRow = dvDtlUnchanged.ToTable.Select("EAN='" & drChanged("EAN") & "'")(0)

                    '    If drChanged("Quantity") = drIsChages("Quantity") AndAlso drChanged("ArticleStatus") <> "Deleted" Then
                    '        drChanged.Delete()
                    '    ElseIf drChanged("Status") = True Then

                    '    End If
                    'Next

                    'If dvDtlchanged.Count > 0 Then
                    '    dsMain.Tables("SalesOrderHdrAudit").Merge(dvHdrAudit.ToTable(), False, MissingSchemaAction.Ignore)
                    '    'dsMain.Tables("SalesOrderDtlAudit").Merge(dvDtlchanged.ToTable(), False, MissingSchemaAction.Ignore)
                    '    For Each drAudit As DataRowView In dvDtlchanged
                    '        Dim drNew As DataRow = dsMain.Tables("SalesOrderDtlAudit").NewRow
                    '        For Each col As DataColumn In dsMain.Tables("SalesOrderDtlAudit").Columns
                    '            If dvDtlchanged.ToTable.Columns.Contains(col.ColumnName) = True Then
                    '                drNew(col.ColumnName) = drAudit(col.ColumnName)
                    '            End If
                    '        Next
                    '        drNew("AmendedNo") = vAmendedNo
                    '        dsMain.Tables("SalesOrderDtlAudit").Rows.Add(drNew)
                    '    Next
                    '    'For Each drDtl As DataRow In dsMain.Tables("SalesOrderDtlAudit").Select("", "", DataViewRowState.Added)
                    '    '    drDtl("AmendedNo") = vAmendedNo
                    '    'Next
                    'End If

                End If
                'End===================Change History Information==========================
                If IssuingCV = True And clsAdmin.CVProgram = String.Empty Then
                    ShowMessage(getValueByKey("SO069"), "SO069 - " & getValueByKey("CLAE05"))
                    Exit Sub
                End If

                If DtSoBulkComboHdr.Rows.Count > 0 Then
                    For index = 0 To DtSoBulkComboHdr.Rows.Count - 1
                        If DtSoBulkComboHdr(index)("status") Then
                            DtSoBulkComboHdr(index)("SaleOrderNumber") = CtrlTxtOrderNo.Text

                            'Dim BillNo = (From x In dsMain.Tables("SalesOrderDTL")
                            '               Where x("RowIndex") = DtSoBulkComboHdr(index)("ComboSrNo")
                            '               Select x("BillLineNo")).FirstOrDefault()

                            Dim dr() = dsMain.Tables("SalesOrderDTL").Select("RowIndex=" & DtSoBulkComboHdr(index)("ComboSrNo"))
                            Dim BillNo As Integer = 0
                            If dr.Length > 0 Then
                                BillNo = dr(0)("BillLineNo")
                            Else
                                Throw New ApplicationException("Error in saving")
                            End If
                            If BillNo > 0 Then
                                DtSoBulkComboHdr(index)("ComboSrNo") = BillNo
                            End If
                        End If
                    Next

                    objPCSO.DtSoBulkComboHdr = DtSoBulkComboHdr
                    objPCSO.DtSoBulkComboDtl = DtSoBulkComboDtl
                End If
                dsMain.Tables("SalesOrderDTL").Columns.Remove("RowIndex")


                'dtSalesOrderTaxDetails = dsMain.Tables("SalesOrderTaxDtls").Copy()

                '--- for SO Generate
                objPCSO.IsStrGenerate = IsSTRGenerate
                '--------------------- added by vipin ---------------------------------------------------
                Dim TotaltaxAmtForPrint As Decimal = 0
                Dim DtSalesordertaxdtl As DataTable
                DtSalesordertaxdtl = objComn.GetSalesordertaxdtlsBySO(CtrlTxtOrderNo.Text)

                Dim KeySOTax(4) As DataColumn
                KeySOTax(0) = DtSalesordertaxdtl.Columns("SiteCode")
                KeySOTax(1) = DtSalesordertaxdtl.Columns("FinYear")
                KeySOTax(2) = DtSalesordertaxdtl.Columns("SaleOrderNumber")
                KeySOTax(3) = DtSalesordertaxdtl.Columns("EAN")   '' added by nikhil 
                KeySOTax(4) = DtSalesordertaxdtl.Columns("TaxLineNo")  '' added by nikhil 
                DtSalesordertaxdtl.PrimaryKey = KeySOTax



                For Each DrUpdateTaxDtl In _dsPackagingVar.Tables(0).Select("IsHEader =true")
                    '  Dim DtTaxDtl As DataTable = objComn.FunGetTaxDtlForEdit(clsAdmin.SiteCode, DrUpdateTaxDtl("ArticleCode"), DrUpdateTaxDtl("TotalTaxAmt"), DrUpdateTaxDtl("IsCombo"), DrUpdateTaxDtl("PackagingMaterial"))
                    Dim DtTaxDtl As DataTable
                    If DrUpdateTaxDtl("IsCombo") = True Then
                        'Dim Tem123 As DataTable = dsMain.Tables("SalesOrderBulkComboDtl").Select("ComboSrNo = '" & DrUpdateTaxDtl("RowIndex") & "'").CopyToDataTable()
                        'Vipin  12.02.2018 If whole Combo Deleted then there is no row to get max tax, So we have to simply Do status zero for all article in that combo.
                        ' If  use has deleted only one article in the combo then we have to recalcualte the tax again upon the max tax present in combo article.
                        Dim ISComboDeleted = dsMain.Tables("SalesOrderBulkComboDtl").Select("ComboSrNo = '" & DrUpdateTaxDtl("RowIndex") & "'AND Status =True").Count
                        Dim Tem123 As DataTable
                        If ISComboDeleted = 0 Then
                            Tem123 = dsMain.Tables("SalesOrderBulkComboDtl").Select("ComboSrNo = '" & DrUpdateTaxDtl("RowIndex") & "'").CopyToDataTable() ' added by vipin on 24.01.2018
                        Else
                            Tem123 = dsMain.Tables("SalesOrderBulkComboDtl").Select("ComboSrNo = '" & DrUpdateTaxDtl("RowIndex") & "'AND Status =True").CopyToDataTable() ' added by vipin on 24.01.2018
                        End If
                        Dim dataView As New DataView(Tem123)
                        dataView.Sort = "TAX DESC"
                        Tem123 = dataView.ToTable()
                        If IsCSTApplicable Then
                            DtTaxDtl = objCM.getTax(vSiteCode, String.Empty, "SO201", DrUpdateTaxDtl("Quantity"), DrUpdateTaxDtl("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
                        Else
                            DtTaxDtl = objCM.getTax(vSiteCode, Tem123.Rows(0)("ArticleCode"), "SO201", DrUpdateTaxDtl("Quantity"), DrUpdateTaxDtl("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
                        End If
                    Else
                        If IsCSTApplicable Then
                            DtTaxDtl = objCM.getTax(vSiteCode, String.Empty, "SO201", DrUpdateTaxDtl("Quantity"), DrUpdateTaxDtl("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
                        Else
                            DtTaxDtl = objCM.getTax(vSiteCode, DrUpdateTaxDtl.Item("ArticleCode"), "SO201", DrUpdateTaxDtl("Quantity"), DrUpdateTaxDtl("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
                        End If
                    End If
                    Dim DtIsVariationPresent As DataRow() = _dsPackagingVar.Tables(0).Select("billlineno = " + DrUpdateTaxDtl("billlineno").ToString + "  AND IsHEader =  False ")
                    If DtIsVariationPresent.Length > 0 Then
                        TotaltaxAmtForPrint = 0
                        TotaltaxAmtForPrint = _dsPackagingVar.Tables(0).Compute("SUM(TotalTaxAmount)", "billlineno = '" + DrUpdateTaxDtl("billlineno").ToString + "'")
                    Else
                        TotaltaxAmtForPrint = DrUpdateTaxDtl("TotalTaxAmount")
                    End If
                    If DrUpdateTaxDtl("IsNew") Then
                        If Not DtTaxDtl Is Nothing AndAlso DtTaxDtl.Rows.Count > 0 Then
                            For Each dtTaxdtlTemp In DtTaxDtl.Rows
                                '' added by ketan unique tax line no in saleordertax table 
                                Dim TaxLineNo As Integer = 0
                                If IsDBNull(DtSalesordertaxdtl.Compute("Max(TaxLineNo)", "")) Then
                                    TaxLineNo = 0
                                Else
                                    TaxLineNo = DtSalesordertaxdtl.Compute("Max(TaxLineNo)", "")
                                End If
                                TaxLineNo = TaxLineNo + 1
                                Dim DrTaxDtlRow As DataRow = DtSalesordertaxdtl.NewRow
                                DrTaxDtlRow("SiteCode") = clsAdmin.SiteCode
                                DrTaxDtlRow("FinYear") = vfinancialYear
                                DrTaxDtlRow("SaleOrderNumber") = CtrlTxtOrderNo.Text
                                DrTaxDtlRow("EAN") = DrUpdateTaxDtl("EAN")
                                DrTaxDtlRow("TaxLineNo") = TaxLineNo 'dtTaxdtlTemp("Stepno") chnage by ketan unique tax line no in saleordertax table 
                                DrTaxDtlRow("Taxlabel") = dtTaxdtlTemp("TaxCode")
                                DrTaxDtlRow("TaxValue") = Math.Round(TotaltaxAmtForPrint / 2, 2)
                                DrTaxDtlRow("CREATEDAT") = clsAdmin.SiteCode
                                DrTaxDtlRow("CREATEDBY") = clsAdmin.UserCode
                                DrTaxDtlRow("CREATEDON") = DateTime.Now
                                DrTaxDtlRow("UPDATEDAT") = clsAdmin.SiteCode
                                DrTaxDtlRow("UPDATEDON") = DateTime.Now
                                DrTaxDtlRow("UPDATEDBY") = clsAdmin.UserCode
                                DrTaxDtlRow("Status") = True
                                DrTaxDtlRow("DocumentType") = "SalesOrder"
                                DrTaxDtlRow("IsDocumentLevel") = False
                                DrTaxDtlRow("RowIndex") = DrUpdateTaxDtl("RowIndex")
                                DrTaxDtlRow("PackagingIndex") = DrUpdateTaxDtl("PkgLineNo")
                                DrTaxDtlRow("IsHeader") = DrUpdateTaxDtl("IsHeader")
                                '  TaxLineNo = TaxLineNo + 1
                                DtSalesordertaxdtl.Rows.Add(DrTaxDtlRow)
                            Next
                        End If
                    Else
                        If Not DtTaxDtl Is Nothing AndAlso DtTaxDtl.Rows.Count > 0 Then
                            ''change By ketan issue In save data in tax table 
                            Dim TaxLineNo As Integer = 1                        
                            '  Dim DrTaxDtlRow As DataRow() = DtSalesordertaxdtl.Select("RowIndex = '" + DrUpdateTaxDtl("BillLineNo").ToString + "' and EAN = '" + DrUpdateTaxDtl("EAN") + "'")
                            Dim DrTaxDtlRow As DataRow() = DtSalesordertaxdtl.Select("RowIndex = '" + DrUpdateTaxDtl("BillLineNo").ToString + "'and Status=1")
                            '  Dim DrTaxDtlRow As DataRow() = DtSalesordertaxdtl.Select("taxlineno = '" + dtTaxdtlTemp("Stepno").ToString + "' and EAN = '" + dtTaxdtlTemp("EAN") + "'")
                            For Each drRow In DrTaxDtlRow
                                drRow("SiteCode") = drRow("SiteCode")
                                '     drRow("FinYear") = clsAdmin.Financialyear
                                drRow("FinYear") = vfinancialYear
                                drRow("SaleOrderNumber") = CtrlTxtOrderNo.Text
                                drRow("EAN") = DrUpdateTaxDtl("EAN")
                                drRow("TaxLineNo") = drRow("TaxLineNo")
                                '  drRow("Taxlabel") = drRow("Taxlabel")
                                If DrUpdateTaxDtl("IsCombo") Then
                                    If DrTaxDtlRow.Length = 2 Then
                                        drRow("Taxlabel") = DtTaxDtl.Rows(TaxLineNo - 1)("TaxCode").ToString().Trim() 'vipin
                                    Else
                                        drRow("Taxlabel") = drRow("Taxlabel")
                                    End If
                                Else
                                    drRow("Taxlabel") = drRow("Taxlabel")
                                End If
                                drRow("TaxValue") = Math.Round(TotaltaxAmtForPrint / 2, 2)
                                drRow("UPDATEDAT") = clsAdmin.SiteCode
                                drRow("UPDATEDON") = DateTime.Now
                                drRow("UPDATEDBY") = clsAdmin.UserCode
                                drRow("Status") = DrUpdateTaxDtl("Status")
                                drRow("DocumentType") = "SalesOrder"
                                drRow("IsDocumentLevel") = False
                                drRow("RowIndex") = drRow("RowIndex")
                                drRow("PackagingIndex") = drRow("PackagingIndex")
                                drRow("IsHeader") = drRow("IsHeader")
                                TaxLineNo = TaxLineNo + 1
                            Next
                            'For Each dtTaxdtlTemp In DtTaxDtl.Rows
                            '    Dim TaxLineNo As Integer = 1
                            '    Dim DrTaxDtlRow As DataRow() = DtSalesordertaxdtl.Select("taxlineno = '" + dtTaxdtlTemp("Stepno").ToString + "' and EAN = '" + dtTaxdtlTemp("EAN") + "'")
                            '    If DrTaxDtlRow.Length > 0 Then
                            '        DrTaxDtlRow(0)("SiteCode") = DrTaxDtlRow(0)("SiteCode")
                            '        DrTaxDtlRow(0)("FinYear") = clsAdmin.Financialyear
                            '        DrTaxDtlRow(0)("SaleOrderNumber") = CtrlTxtOrderNo.Text
                            '        DrTaxDtlRow(0)("EAN") = DrTaxDtlRow(0)("EAN")
                            '        DrTaxDtlRow(0)("TaxLineNo") = DrTaxDtlRow(0)("TaxLineNo")
                            '        DrTaxDtlRow(0)("Taxlabel") = DrTaxDtlRow(0)("Taxlabel")
                            '        DrTaxDtlRow(0)("TaxValue") = Math.Round(TotaltaxAmtForPrint / 2, 2)
                            '        DrTaxDtlRow(0)("UPDATEDAT") = clsAdmin.SiteCode
                            '        DrTaxDtlRow(0)("UPDATEDON") = DateTime.Now
                            '        DrTaxDtlRow(0)("UPDATEDBY") = clsAdmin.UserCode
                            '        DrTaxDtlRow(0)("Status") = True
                            '        DrTaxDtlRow(0)("DocumentType") = "SalesOrder"
                            '        DrTaxDtlRow(0)("IsDocumentLevel") = False
                            '        DrTaxDtlRow(0)("RowIndex") = DrTaxDtlRow(0)("RowIndex")
                            '        DrTaxDtlRow(0)("PackagingIndex") = DrTaxDtlRow(0)("PackagingIndex")
                            '        DrTaxDtlRow(0)("IsHeader") = DrTaxDtlRow(0)("IsHeader")
                            '        TaxLineNo = TaxLineNo + 1
                            '    End If
                            'Next
                        End If
                    End If

                Next
                dsMain.Tables.Remove("SalesOrderTaxDtls")
                DtSalesordertaxdtl.TableName = "SalesOrderTaxDtls"
                dsMain.Tables.Add(DtSalesordertaxdtl)

                '-------- to update Discount Used in the Salesorder Dtl Report  -----------------------------
                For Each dr As DataRow In dsMain.Tables("sopackagingboxdeliverydtl").Select("status=true", "billlineno")
                    Dim DiscountTempValue = 0
                    Dim drresult As DataRow() = dsMain.Tables("soitempackagingboxdtl").Select("pkglineno='" + dr("pkglineno").ToString + "'")
                    Dim DrDiscDtl As DataRow() = dtPickUpDiscGrid.Select("pkglineno='" + dr("pkglineno").ToString + "'")
                    Dim DrSoDtlUpdate As DataRow() = dsMain.Tables("SalesOrderdtl").Select("billlineno='" + dr("pkglineno").ToString + "'")
                    If DrSoDtlUpdate.Length > 0 Then
                        If CDbl(CtrllblDiscAmt.Text) <> 0 AndAlso drresult(0)("discountamount") = 0 Then
                            If DrDiscDtl.Length > 0 Then
                                DiscountTempValue = DrDiscDtl(0)("DiscountAmount")
                            Else
                                DrSoDtlUpdate(0)("discountamount") = 0
                            End If
                        End If
                        If drresult.Length > 0 Then
                            DrSoDtlUpdate(0)("discountamount") = DiscountTempValue  'vipin 
                        End If
                    End If
                Next
                ' ------------------------------------------------------------------------------
                If objPCSO.PrepareSaveData(vSalesInvcNo, clsAdmin.DayOpenDate, clsAdmin.CLPProgram, vCustomerNo, dsMain, False, IsNextInvoiceNo, vSiteCode, CtrlTxtOrderNo.Text, clsDefaultConfiguration.StockStorageLocation, clsAdmin.CVProgram, "SalesOrder", vfinancialYear, clsAdmin.UserCode, clsAdmin.CurrentDate, IsOutboundCreated, CVoucherNo, CVVoucherDay, isPromotionApplied, DtDeletedData, , clsDefaultConfiguration.IsBatchManagementReq, Batchbarcode, IsUpdate:=True, StrNumList:=vSTRList, dtStrResult:=dtStrResult) = True Then
                    If OnlineConnect = True Then
                        Dim dtSiteInfo As DataTable = objComn.GetSiteInfo(clsAdmin.SiteCode)
                        _pickupHistory = objPCSO.GetSalesOrderPickupHistory(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                        dtStrPrint = objPCSO.GetSalesOrderSTRPrint(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
                        SOStrDetails()
                        GetSOPrintAddress()
                        SOPrintRemarks()
                        SOPrintDeliveryDetails()
                        SOPrintPaymentDetails()
                        SOPrintOrderDetails()
                        SOPrintOrderComboDetails()
                        SOPrintHeader(dtSiteInfo, dtCustmInfo) 'ketan 
                        SOPrintPaymentDetails1()
                        SOPrintPickupHistory()
                        DtCustDtlForSOPrint = objComn.GetCustDetailForSoPrint(dtCustmInfo.Rows(0)("CustomerNo").ToString())
                        DtComboGridData = objComn.GetComboDtlForSoPrint(lblSalesOrderNo.Text)

                        soprintarticlepaymentwisedetails()
                        SOPrintReturnOrderComboDetails()
                        '-----Added By Prasad for Invoice and Delivery Challan of Savoy Client
                        If clsDefaultConfiguration.IsSavoy Then
                            SOPrintInvoiceChallanHeader(dtSiteInfo, dtCustmInfo)
                            SOPrintInvoiceChallan()
                        End If
                        '---------------------------------------------------------------------
                        BarCodestring = ImageToBase64(CtrlTxtOrderNo.Text)
                        If Not IsBookingEdit = True Then
                            Dim pckupQty As Double = 0
                            If dsPackagingVar IsNot Nothing Then
                                If dsPackagingVar.Tables(0).Rows.Count > 0 Then
                                    pckupQty = CDbl(dsPackagingVar.Tables(0).Compute("Sum(PickUpQty)", ""))
                                    '-----Added By Prasad for Invoice and Delivery Challan of Savoy Client
                                    If clsDefaultConfiguration.IsSavoy = True Then
                                        If pckupQty > 0 Then
                                            GenerateSoInvoiceChallanPrint()
                                            GenerateSoDeliveryChallanPrint()
                                        End If
                                    Else
                                        If clsCommon.checkDiscSpce(clsDefaultConfiguration.DayCloseReportPath.Substring(0, 3)) = False Then
                                            ShowMessage("Insufficient disk space for saving files", "")
                                        End If
                                        If pckupQty > 0 Then
                                            GenerateSoDeliveryPrint()
                                        Else
                                            GenerateSOPrint()
                                            'GenerateOrderPreparationPrint()
                                            GenerateOrderPreparationAsPerDeliveryDetails(dtDeliveryDetails)
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If IsBookBarcodePrint Then
                                'Change by ketan check So booking Print required  flag is true or not                              
                                Dim sitename As String = objComn.GetSiteName(clsAdmin.SiteCode)
                                'Dim objprint As New SpectrumPrint.clsPrintDenomination(clsDefaultConfiguration.SOPrintPreviewAllowed)
                                Dim objprint As New SpectrumPrint.clsPrintDenomination(clsDefaultConfiguration.PrintPreviewRequiredForSOBooking)
                                objprint.PrintSOBarcode(sitename, CtrlTxtOrderNo.Text, CtrltxrCust.Text, DateTime.Now.ToString("g"), clsDefaultConfiguration.ClientName, dtPrinterInfo)
                            End If
                        End If

                        'End If
                        'Apply Customer loyalty Point
                        'If CtrlCustDtls1.lblCustTypeValue.Text = "CLP" AndAlso Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                        '    'CalCulateCLP(vCardType, dsScan.Tables("ItemScanDetails"), "PickUpQty>0 Or DeliveredQty>0 ")

                        '    If dsMainCLP.Tables.Count = 0 Then
                        '        dsMainCLP.Tables.Add(dsMain.Tables("CLPTransaction").Clone())
                        '        dsMainCLP.Tables.Add(dsMain.Tables("CLPTransactionsDetails").Clone)
                        '    End If

                        '    dsMainCLP.Clear()

                        '    If TotalPoints > 0 AndAlso PrepareClpHdrDataforSave(dsMainCLP) = True AndAlso PrepareClpDtlDataforSave(dsMainCLP) = True Then
                        '        If objPCSO.PrepareSaveClpData(dsMainCLP, vClpProgramId, CtrlCustDtls1.lblCustNoValue.Text, TotalPoints, vSiteCode, CtrlTxtOrderNo.Text) = False Then
                        '            ShowMessage(getValueByKey("SO018"), "SO018 - " & getValueByKey("CLAE04"))
                        '            'ShowMessage("CLP Data is not Saved....", "Information")
                        '        End If
                        '    End If

                        '    dsMainCLP.Clear()
                        'End If

                        Try
                            rbnLStatus.SmallImage = Spectrum.My.Resources.connected1.ToBitmap
                            rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus2")
                        Catch ex As Exception

                        End Try
                    Else
                        Try
                            rbnLStatus.SmallImage = Spectrum.My.Resources.disconnected1.ToBitmap
                            rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus1")
                        Catch ex As Exception

                        End Try
                    End If


                    'Print Sales Order Information.-----------------------------------
                    'PrintSalesOrders(drSiteInfo, drHomeAdds, drDelvAdds)
                    Dim totalPay As Double

                    'Print Sales Invoice Information----------------------------------
                    If Not (dsPayment.Tables("MSTRecieptType") Is Nothing) AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
                        '---- Commented By Mahesh Not required as we are showing on bill itself disscussed with B.A. Manish
                        '  PrintSalesOrdersInvoice(drSiteInfo, drHomeAdds, drDelvAdds)

                        For Each dr As DataRow In dsPayment.Tables("MSTRecieptType").Select("RecieptTypeCode='CreditVouc(I)'", "", DataViewRowState.CurrentRows)
                            totalPay = IIf(dr("Amount") > 0, dr("Amount"), dr("Amount") * -1)

                            'PrintCreditVoucher(drSiteInfo, totalPay)
                            clsVoucher.PrintGiftVoucherAndCreditNote("SalesOrder", clsAdmin.SiteCode, "CreditNote", String.Empty, totalPay, String.Empty, clsAdmin.UserName, CtrlTxtOrderNo.Text, clsAdmin.CurrencyCode, clsAdmin.CurrentDate, BarCodeType)
                        Next
                        For Each dr As DataRow In dsPayment.Tables("MSTRecieptType").Select("RecieptTypeCode='GiftVoucher(I)'", "", DataViewRowState.CurrentRows)
                            totalPay = IIf(dr("Amount") > 0, dr("Amount"), dr("Amount") * -1)

                            'PrintCreditVoucher(drSiteInfo, totalPay)
                            clsVoucher.PrintGiftVoucherAndCreditNote("SalesOrder", clsAdmin.SiteCode, "GiftVoucher", String.Empty, totalPay, String.Empty, clsAdmin.UserName, CtrlTxtOrderNo.Text, clsAdmin.CurrencyCode, clsAdmin.CurrentDate, BarCodeType)
                        Next
                        'If CInt(CDbl(CtrlCashSummary1.lbltxt6)) < 0 Then
                        '    PrintCreditVoucher(drSiteInfo)
                        'Else
                        '    PrintSalesOrdersInvoice(drSiteInfo, drHomeAdds, drDelvAdds)
                        'End If
                    End If
                    '---- Commented By Mahesh Not required as we are showing on bill itself disscussed with B.A. Manish
                    'Print Sales Delivery Information---------------------------------
                    If CDbl(lblPickupQty.Text) > 0 Then
                        PrintSalesOrdersDelivery(drSiteInfo, drHomeAdds, drDelvAdds)
                    End If

                    'If CDbl(lblPickupQty.Text) > 0 AndAlso dsPayment.Tables("MSTRecieptType") Is Nothing Then
                    '    Dim dtInvoice As New DataTable
                    '    dtInvoice = objComn.GetPaymentInfo

                    '    PrintSalesOrdersInvoice(drSiteInfo, drHomeAdds, drDelvAdds, dtInvoice)
                    'End If

                    If IsGiftVoucher Then
                        PrintGiftReceipt()
                    End If

                    If IsBookingEdit Then
                        ShowMessage("Sales Order Booking Updated Successfully", "SO019 - " & getValueByKey("CLAE04"))
                    Else
                        ShowMessage(getValueByKey("SO039"), "SO039 - " & getValueByKey("CLAE04"))
                    End If
                    IsSOSaved = True
                    'ShowMessage("Sales Order Updated", "Sales Order")
                    ResetSalesOrder()
                    isLeaved = False
                    CtrlTxtOrderNo.Text = String.Empty
                    AutoLogout(FrmTranCode, Me, lblLoggedIn)
                Else
                    ShowMessage(getValueByKey("SO040"), "SO040 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Sales Order does not Updated", "Sales Order")
                End If

            Else
                ' function for sales order return **********************************
                Dim tempPurchaseQty As Decimal = 0
                Dim IsReturnValid = False
                For Each drGridRow As C1.Win.C1FlexGrid.Row In grdSOItemRetuns.Rows
                    If Not (drGridRow.Index = 0) Then
                        If drGridRow.Item("PickUpQty") > 0 Then
                            IsReturnValid = True
                            Exit For
                        End If
                    End If
                Next

                Dim returnQty As Double = grdSOItemRetuns.Item(1, "PickUpQty")
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Please Select Sales Order first", "Sales Order Information")
                    Exit Sub
                ElseIf txtReturnReason.Text.Trim = "" Then
                    ShowMessage(getValueByKey("SO041"), "SO041 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Please Enter Reason for Return Sales Order Articles", "Sales Order Information")
                    txtReturnReason.Select()
                    Exit Sub
                ElseIf IsReturnValid = False Then
                    ShowMessage(getValueByKey("SO093"), "SO093 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Please Enter Return Quantity")
                    Exit Sub
                End If

                'dsMain.Tables("SalesOrderHDR").RejectChanges()
                'dsMain.Tables("SalesOrderHDRAudit").RejectChanges()
                'dsMain.Tables("SalesOrderDTL").RejectChanges()
                'dsMain.Tables("SalesOrderDTLAudit").RejectChanges()
                'dsMain.Tables("SalesInvoice").RejectChanges()
                'dsMain.Tables("SalesOrderTaxDtls").RejectChanges()
                'dsMain.Tables("SalesOrderOtherCharges").RejectChanges()
                'dsMain.Tables("SOItemPackagingBoxDtl").RejectChanges()
                'dsMain.Tables("SOPackagingBoxDeliveryDtl").RejectChanges()
                'dsMain.Tables("OrderHdr").RejectChanges()
                'dsMain.Tables("OrderDtl").RejectChanges()
                '-----------------------------------------------------------------
                If Not (PrepareHdrDataforSave(dsMain, True) = True) Then
                    Exit Sub
                End If
                If Not (PrepareDtlDataforSave(dsMain, , True) = True) Then
                    Exit Sub
                End If
                If Not (PrepareComboHeaderDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareComboDetailDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareSOSTRtDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparePackageVariationDataforSave(dsMain, True) = True) Then
                    Exit Sub
                End If
                If Not (PrepareSODiscountDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparePackageVariationDeliveryDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                'If Not (PrepareInvcDataforSave(dsMain) = True) Then
                '    Exit Sub
                'End If
                If Not (PrepareOtherTaxDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PreparTaxDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                If Not (PrepareSOTaxDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                '----------------------------------------------------------------

                Dim drNewReturnHdr As DataRow
                Dim drOldReturnHdr As DataRow
                Dim findKeyh(2) As Object
                Dim IsNewReturn As Boolean = False

                If dtSOReturn.Select("PickUpQty>0").Count > 0 Then

                    'Changed by Rohit to generate Document No. for proper sorting
                    Dim objType = "FO_DOC"
                    Dim NewSalesNo As String = String.Empty
                    Try
                        'NewSalesNo = GenDocNo("SO" & clsAdmin.TerminalID & vfinancialYear.ToString.Substring(vfinancialYear.ToString.Length - 2, 2), 15, objComn.getDocumentNo("SalesOrder", clsAdmin.SiteCode, objType))
                        NewSalesNo = "SO" & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2) & "-" & clsAdmin.SiteCode.Substring(clsAdmin.SiteCode.Length - 3) & "-" & objComn.getDocumentNo("SalesOrder", clsAdmin.SiteCode, objType)
                    Catch ex As Exception
                        NewSalesNo = "SO" & "-" & clsAdmin.TerminalID & "-" & objComn.getDocumentNo("SalesOrder", clsAdmin.SiteCode, objType)
                    End Try
                    'End Change by Rohit

                    For Each drReturnSales As DataRow In dtSOReturn.Select("PickUpQty>0")
                        Dim drNewReturnDtl As DataRow
                        Dim drOldReturnDtl As DataRow
                        Dim findKeyd(3) As Object
                        Dim billLineNo As Integer
                        If IsDBNull(drReturnSales("BillLineNo")) = False Then
                            billLineNo = drReturnSales("BillLineNo")
                        Else
                            billLineNo = dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                        End If
                        'Start- Update Old Sales Order for Return Sales Order Article
                        findKeyd(0) = vSiteCode
                        findKeyd(1) = vfinancialYear
                        findKeyd(2) = CtrlTxtOrderNo.Text
                        ' findKeyd(3) = drReturnSales("EAN").ToString
                        findKeyd(3) = billLineNo
                        drOldReturnDtl = dsMain.Tables("SalesOrderDTL").Rows.Find(findKeyd)

                        drOldReturnDtl("DeliveredQty") = drOldReturnDtl("DeliveredQty") - drReturnSales("PickUpQty")
                        drOldReturnDtl("ReturnSaleOrderNo") = NewSalesNo
                        drOldReturnDtl("ReturnSaleOrderDt") = vCurrentDate
                        drOldReturnDtl("ReturnQty") = IIf(drOldReturnDtl("ReturnQty") Is DBNull.Value, 0, drOldReturnDtl("ReturnQty")) + drReturnSales("PickUpQty")
                        drOldReturnDtl("SalesReturnReasonCode") = txtReturnReason.Text.Trim
                        'drOldReturnDtl("ReservedQty") = drOldReturnDtl("ReservedQty") + drReturnSales("PickUpQty")
                        drOldReturnDtl("UpdatedAt") = vSiteCode
                        drOldReturnDtl("UpdatedBy") = vUserName
                        drOldReturnDtl("UpdatedOn") = vCurrentDate


                        'Start- Add New Sales Order for Return Sales Order Article
                        findKeyd(0) = vSiteCode
                        findKeyd(1) = vfinancialYear
                        findKeyd(2) = NewSalesNo
                        ' findKeyd(3) = drReturnSales("EAN").ToString
                        findKeyd(3) = billLineNo
                        drNewReturnDtl = dsMain.Tables("SalesOrderDTL").Rows.Find(findKeyd)

                        If drNewReturnDtl Is Nothing Then
                            drNewReturnDtl = dsMain.Tables("SalesOrderDTL").NewRow()
                            IsNewReturn = True

                            drNewReturnDtl("SiteCode") = drOldReturnDtl("SiteCode")
                            drNewReturnDtl("SaleOrderNumber") = NewSalesNo
                            drNewReturnDtl("EAN") = drOldReturnDtl("EAN")
                            drNewReturnDtl("BillLineNo") = drOldReturnDtl("BillLineNo")
                            drNewReturnDtl("BatchBarcode") = drOldReturnDtl("BatchBarcode")
                            For NewRowIndex = 3 To drOldReturnDtl.ItemArray.Count - 1
                                drNewReturnDtl(NewRowIndex) = drOldReturnDtl(NewRowIndex)
                            Next

                            drNewReturnDtl("NetSellingPrice") = FormatNumber(drOldReturnDtl("NetAmount") / drOldReturnDtl("Quantity"), 2)
                            ' tempPurchaseQty = drReturnSales("Quantity")
                            drNewReturnDtl("Quantity") = drReturnSales("PickUpQty") * -1
                            drNewReturnDtl("GrossAmount") = FormatNumber(drNewReturnDtl("SellingPrice") * drNewReturnDtl("Quantity"), 2)
                            drNewReturnDtl("NetAmount") = FormatNumber(drNewReturnDtl("NetSellingPrice") * drNewReturnDtl("Quantity"), 2)
                            drNewReturnDtl("DeliveredQty") = 0
                            drNewReturnDtl("ReservedQty") = 0 'drReturnSales("PickUpQty")
                            drNewReturnDtl("OfferNo") = ""
                            drNewReturnDtl("IsCLPApplicable") = 0
                            drNewReturnDtl("CLPPoints") = 0
                            drNewReturnDtl("Delivered_Qty") = drNewReturnDtl("Quantity")
                            'drNewReturnDtl("Reserved_Qty") = drReturnSales("PickUpQty")
                            drNewReturnDtl("DiscountAmount") = FormatNumber(IIf(CDbl(drOldReturnDtl("DiscountAmount").ToString()) = 0, 0, (drOldReturnDtl("DiscountAmount") / drOldReturnDtl("Quantity")) * drNewReturnDtl("Quantity")), 2)
                            drNewReturnDtl("LineDiscount") = FormatNumber(IIf(CDbl(drOldReturnDtl("LineDiscount").ToString()) = 0, 0, (drOldReturnDtl("LineDiscount") / drOldReturnDtl("Quantity")) * drNewReturnDtl("Quantity")), 2)
                            drNewReturnDtl("DiscountPercentage") = FormatNumber(IIf(CDbl(drOldReturnDtl("DiscountAmount").ToString()) = 0, 0, (drNewReturnDtl("DiscountAmount") / drNewReturnDtl("GrossAmount")) * 100), 2)
                            drNewReturnDtl("ExclTaxAmt") = FormatNumber(IIf(CDbl(drOldReturnDtl("ExclTaxAmt").ToString()) = 0, 0, (drOldReturnDtl("ExclTaxAmt") / drOldReturnDtl("Quantity")) * drNewReturnDtl("Quantity")), 2)
                            drNewReturnDtl("TotalTaxAmount") = FormatNumber(IIf(CDbl(drOldReturnDtl("TotalTaxAmount").ToString()) = 0, 0, (drOldReturnDtl("TotalTaxAmount") / drOldReturnDtl("Quantity")) * drNewReturnDtl("Quantity")), 2)

                            drNewReturnDtl("TransactionCode") = vDocType
                            drNewReturnDtl("ReturnSaleOrderNo") = CtrlTxtOrderNo.Text
                            drNewReturnDtl("ReturnSaleOrderDt") = vCurrentDate
                            'drNewReturnDtl("ReturnQty") = drReturnSales("PickUpQty")
                            drNewReturnDtl("SalesReturnReasonCode") = txtReturnReason.Text.Trim

                            drNewReturnDtl("ArticleStatus") = "Return"
                            drNewReturnDtl("CreatedAt") = vSiteCode
                            drNewReturnDtl("CreatedBy") = clsAdmin.UserCode 'vUserName
                            drNewReturnDtl("CreatedOn") = vCurrentDate
                            drNewReturnDtl("UpdatedAt") = vSiteCode
                            drNewReturnDtl("UpdatedBy") = clsAdmin.UserCode 'vUserName
                            drNewReturnDtl("UpdatedOn") = vCurrentDate
                            drNewReturnDtl("FinYear") = vfinancialYear

                            If IsNewReturn = True Then
                                dsMain.Tables("SalesOrderDTL").Rows.Add(drNewReturnDtl)
                                IsNewReturn = False
                            End If

                            'End- Add New Sales Order for Return Sales Order Article
                        Else
                            drNewReturnDtl("Quantity") = drNewReturnDtl("Quantity") - drReturnSales("PickUpQty")
                            drNewReturnDtl("GrossAmount") = FormatNumber(drNewReturnDtl("SellingPrice") * drNewReturnDtl("Quantity"), 2)
                            drNewReturnDtl("NetAmount") = FormatNumber(drNewReturnDtl("NetSellingPrice") * drNewReturnDtl("Quantity"), 2)
                            drNewReturnDtl("Delivered_Qty") = drNewReturnDtl("Quantity")

                            drNewReturnDtl("ReturnSaleOrderNo") = CtrlTxtOrderNo.Text
                            drNewReturnDtl("ReturnSaleOrderDt") = vCurrentDate
                            drNewReturnDtl("ReturnQty") = IIf(drNewReturnDtl("ReturnQty") Is DBNull.Value, 0, drNewReturnDtl("ReturnQty")) + drReturnSales("PickUpQty")
                            drNewReturnDtl("SalesReturnReasonCode") = txtReturnReason.Text.Trim

                            drNewReturnDtl("UpdatedAt") = vSiteCode
                            drNewReturnDtl("UpdatedBy") = vUserName
                            drNewReturnDtl("UpdatedOn") = vCurrentDate
                        End If




                    Next
                    findKeyh(0) = vSiteCode
                    findKeyh(1) = vfinancialYear
                    findKeyh(2) = NewSalesNo
                    drNewReturnHdr = dsMain.Tables("SalesOrderHDR").Rows.Find(findKeyh)

                    If drNewReturnHdr Is Nothing Then
                        drNewReturnHdr = dsMain.Tables("SalesOrderHDR").NewRow()

                        drOldReturnHdr = dsMain.Tables("SalesOrderHDR").Rows(0)

                        drNewReturnHdr("SiteCode") = drOldReturnHdr("SiteCode")
                        drNewReturnHdr("SaleOrderNumber") = NewSalesNo
                        drNewReturnHdr("TerminalID") = vTerminalID
                        drNewReturnHdr("TransactionCode") = vDocType

                        For NewRowIndex = 5 To drOldReturnHdr.ItemArray.Count - 1
                            drNewReturnHdr(NewRowIndex) = drOldReturnHdr(NewRowIndex)
                        Next

                        drNewReturnHdr("NetAmt") = dsMain.Tables("SalesOrderDTL").Compute("Sum(NetAmount)", "ArticleStatus='Return'")
                        drNewReturnHdr("CostAmt") = dsMain.Tables("SalesOrderDTL").Compute("Sum(CostAmount)", "ArticleStatus='Return'")
                        drNewReturnHdr("GrossAmt") = dsMain.Tables("SalesOrderDTL").Compute("Sum(GrossAmount)", "ArticleStatus='Return'")
                        drNewReturnHdr("DiscountPercentage") = 0
                        drNewReturnHdr("DiscountAmt") = dsMain.Tables("SalesOrderDTL").Compute("Sum(LineDiscount)", "ArticleStatus='Return'")
                        drNewReturnHdr("TotalDiscount") = dsMain.Tables("SalesOrderDTL").Compute("Sum(DiscountAmount)", "ArticleStatus='Return'")
                        drNewReturnHdr("CurrencyCode") = clsAdmin.CurrencyCode
                        drNewReturnHdr("TaxAmount") = dsMain.Tables("SalesOrderDTL").Compute("Sum(TotalTaxAmount)", "ArticleStatus='Return'")
                        drNewReturnHdr("SOStatus") = "Return"
                        drNewReturnHdr("CreatedAt") = vSiteCode
                        drNewReturnHdr("CreatedBy") = clsAdmin.UserCode 'vUserName
                        drNewReturnHdr("CreatedOn") = vCurrentDate
                        drNewReturnHdr("UpdatedAt") = vSiteCode
                        drNewReturnHdr("UpdatedBy") = clsAdmin.UserCode 'vUserName
                        drNewReturnHdr("UpdatedOn") = vCurrentDate
                        drNewReturnHdr("FinYear") = vfinancialYear
                        dsMain.Tables("SalesOrderHDR").Rows.Add(drNewReturnHdr)
                    End If

                    '------Update In SOItemPackagingBoxDtl
                    For Each drReturnSales As DataRow In dtSOReturn.Select("PickUpQty>0")
                        Dim drNewReturnBoxDtl As DataRow
                        Dim drOldReturnBoxDtl As DataRow
                        Dim findKeyd(4) As Object
                        Dim billLineNo As Integer
                        Dim PkgLineNo As Integer
                        If IsDBNull(drReturnSales("BillLineNo")) = False Then
                            billLineNo = drReturnSales("BillLineNo")
                        Else
                            billLineNo = dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                        End If
                        If IsDBNull(drReturnSales("PkgLineNo")) = False Then
                            PkgLineNo = drReturnSales("PkgLineNo")
                        Else
                            PkgLineNo = dsMain.Tables("SOItemPackagingBoxDtl").Rows.Count + 1
                        End If
                        'Start- Update Old SOItemPackagingBoxDtl for Return Sales Order Article
                        findKeyd(0) = vSiteCode
                        findKeyd(1) = vfinancialYear
                        findKeyd(2) = CtrlTxtOrderNo.Text
                        ' findKeyd(3) = drReturnSales("EAN").ToString
                        findKeyd(3) = billLineNo
                        findKeyd(4) = PkgLineNo
                        drOldReturnBoxDtl = dsMain.Tables("SOItemPackagingBoxDtl").Rows.Find(findKeyd)

                        drOldReturnBoxDtl("DeliveredQty") = drOldReturnBoxDtl("DeliveredQty") - drReturnSales("PickUpQty")
                        drOldReturnBoxDtl("ReturnSaleOrderNo") = NewSalesNo
                        drOldReturnBoxDtl("ReturnSaleOrderDt") = vCurrentDate
                        drOldReturnBoxDtl("ReturnQty") = IIf(drOldReturnBoxDtl("ReturnQty") Is DBNull.Value, 0, drOldReturnBoxDtl("ReturnQty")) + drReturnSales("PickUpQty")
                        drOldReturnBoxDtl("SalesReturnReasonCode") = txtReturnReason.Text.Trim
                        'drOldReturnDtl("ReservedQty") = drOldReturnDtl("ReservedQty") + drReturnSales("PickUpQty")
                        drOldReturnBoxDtl("UpdatedAt") = vSiteCode
                        drOldReturnBoxDtl("UpdatedBy") = vUserName
                        drOldReturnBoxDtl("UpdatedOn") = vCurrentDate

                        'Start- Add New SOItemPackagingBoxDtl for Return Sales Order Article
                        findKeyd(0) = vSiteCode
                        findKeyd(1) = vfinancialYear
                        findKeyd(2) = NewSalesNo
                        ' findKeyd(3) = drReturnSales("EAN").ToString
                        findKeyd(3) = billLineNo
                        findKeyd(4) = PkgLineNo
                        drNewReturnBoxDtl = dsMain.Tables("SOItemPackagingBoxDtl").Rows.Find(findKeyd)

                        If drNewReturnBoxDtl Is Nothing Then
                            drNewReturnBoxDtl = dsMain.Tables("SOItemPackagingBoxDtl").NewRow()
                            IsNewReturn = True

                            drNewReturnBoxDtl("SiteCode") = drOldReturnBoxDtl("SiteCode")
                            drNewReturnBoxDtl("SaleOrderNumber") = NewSalesNo
                            drNewReturnBoxDtl("EAN") = drOldReturnBoxDtl("EAN")
                            drNewReturnBoxDtl("BillLineNo") = drOldReturnBoxDtl("BillLineNo")
                            drNewReturnBoxDtl("BatchBarcode") = drOldReturnBoxDtl("BatchBarcode")
                            For NewRowIndex = 3 To drOldReturnBoxDtl.ItemArray.Count - 1
                                drNewReturnBoxDtl(NewRowIndex) = drOldReturnBoxDtl(NewRowIndex)
                            Next

                            'drNewReturnBoxDtl("NetSellingPrice") = FormatNumber(drOldReturnBoxDtl("NetAmount") / drOldReturnBoxDtl("Quantity"), 2)
                            ' tempPurchaseQty = drReturnSales("Quantity")
                            drNewReturnBoxDtl("Quantity") = drReturnSales("PickUpQty") * -1
                            drNewReturnBoxDtl("GrossAmount") = FormatNumber(drNewReturnBoxDtl("SellingPrice") * drNewReturnBoxDtl("Quantity"), 2)
                            drNewReturnBoxDtl("NetAmount") = FormatNumber(drNewReturnBoxDtl("SellingPrice") * drNewReturnBoxDtl("Quantity"), 2)
                            drNewReturnBoxDtl("DeliveredQty") = 0
                            drNewReturnBoxDtl("ReservedQty") = 0 'drReturnSales("PickUpQty")
                            drNewReturnBoxDtl("OfferNo") = ""
                            drNewReturnBoxDtl("IsCLPApplicable") = 0
                            drNewReturnBoxDtl("CLPPoints") = 0
                            'drNewReturnBoxDtl("Delivered_Qty") = drNewReturnBoxDtl("Quantity")
                            'drNewReturnBoxDtl("Reserved_Qty") = drReturnSales("PickUpQty")
                            drNewReturnBoxDtl("DiscountAmount") = FormatNumber(IIf(CDbl(drOldReturnBoxDtl("DiscountAmount").ToString()) = 0, 0, (drOldReturnBoxDtl("DiscountAmount") / drOldReturnBoxDtl("Quantity")) * drNewReturnBoxDtl("Quantity")), 2)
                            drNewReturnBoxDtl("LineDiscount") = FormatNumber(IIf(CDbl(drOldReturnBoxDtl("LineDiscount").ToString()) = 0, 0, (drOldReturnBoxDtl("LineDiscount") / drOldReturnBoxDtl("Quantity")) * drNewReturnBoxDtl("Quantity")), 2)
                            drNewReturnBoxDtl("DiscountPercentage") = FormatNumber(IIf(CDbl(drOldReturnBoxDtl("DiscountAmount").ToString()) = 0, 0, (drNewReturnBoxDtl("DiscountAmount") / drNewReturnBoxDtl("GrossAmount")) * 100), 2)
                            drNewReturnBoxDtl("ExclTaxAmt") = FormatNumber(IIf(CDbl(drOldReturnBoxDtl("ExclTaxAmt").ToString()) = 0, 0, (drOldReturnBoxDtl("ExclTaxAmt") / drOldReturnBoxDtl("Quantity")) * drNewReturnBoxDtl("Quantity")), 2)
                            drNewReturnBoxDtl("TotalTaxAmount") = FormatNumber(IIf(CDbl(drOldReturnBoxDtl("TotalTaxAmount").ToString()) = 0, 0, (drOldReturnBoxDtl("TotalTaxAmount") / drOldReturnBoxDtl("Quantity")) * drNewReturnBoxDtl("Quantity")), 2)

                            drNewReturnBoxDtl("TransactionCode") = vDocType
                            drNewReturnBoxDtl("ReturnSaleOrderNo") = CtrlTxtOrderNo.Text
                            drNewReturnBoxDtl("ReturnSaleOrderDt") = vCurrentDate
                            drNewReturnBoxDtl("ReturnQty") = drReturnSales("PickUpQty")
                            drNewReturnBoxDtl("SalesReturnReasonCode") = txtReturnReason.Text.Trim

                            drNewReturnBoxDtl("ArticleStatus") = "Return"
                            drNewReturnBoxDtl("CreatedAt") = vSiteCode
                            drNewReturnBoxDtl("CreatedBy") = clsAdmin.UserCode 'vUserName
                            drNewReturnBoxDtl("CreatedOn") = vCurrentDate
                            drNewReturnBoxDtl("UpdatedAt") = vSiteCode
                            drNewReturnBoxDtl("UpdatedBy") = clsAdmin.UserCode 'vUserName
                            drNewReturnBoxDtl("UpdatedOn") = vCurrentDate
                            drNewReturnBoxDtl("FinYear") = vfinancialYear

                            If IsNewReturn = True Then
                                dsMain.Tables("SOItemPackagingBoxDtl").Rows.Add(drNewReturnBoxDtl)
                                IsNewReturn = False
                            End If

                        Else
                            drNewReturnBoxDtl("Quantity") = drNewReturnBoxDtl("Quantity") - drReturnSales("PickUpQty")
                            drNewReturnBoxDtl("GrossAmount") = FormatNumber(drNewReturnBoxDtl("SellingPrice") * drNewReturnBoxDtl("Quantity"), 2)
                            drNewReturnBoxDtl("NetAmount") = FormatNumber(drNewReturnBoxDtl("SellingPrice") * drNewReturnBoxDtl("Quantity"), 2)

                            drNewReturnBoxDtl("ReturnSaleOrderNo") = CtrlTxtOrderNo.Text
                            drNewReturnBoxDtl("ReturnSaleOrderDt") = vCurrentDate
                            drNewReturnBoxDtl("ReturnQty") = IIf(drNewReturnBoxDtl("ReturnQty") Is DBNull.Value, 0, drNewReturnBoxDtl("ReturnQty")) + drReturnSales("PickUpQty")
                            drNewReturnBoxDtl("SalesReturnReasonCode") = txtReturnReason.Text.Trim

                            drNewReturnBoxDtl("UpdatedAt") = vSiteCode
                            drNewReturnBoxDtl("UpdatedBy") = vUserName
                            drNewReturnBoxDtl("UpdatedOn") = vCurrentDate
                        End If


                        'End- Add SOItemPackagingBoxDtl for Return Sales Order Article
                    Next

                    '------Update In SOItemPackagingDeliveryBoxDtl
                    For Each drReturnSales As DataRow In dtSOReturn.Select("PickUpQty>0")
                        Dim drNewReturnDeliveryBoxDtl As DataRow
                        Dim drOldReturnDeliveryBoxDtl As DataRow
                        Dim findKeyd(5) As Object
                        Dim billLineNo As Integer
                        Dim PkgLineNo As Integer
                        Dim DeliveryLineNo As Integer
                        If IsDBNull(drReturnSales("BillLineNo")) = False Then
                            billLineNo = drReturnSales("BillLineNo")
                        Else
                            billLineNo = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count + 1
                        End If
                        If IsDBNull(drReturnSales("PkgLineNo")) = False Then
                            PkgLineNo = drReturnSales("PkgLineNo")
                        Else
                            PkgLineNo = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count + 1
                        End If
                        If IsDBNull(drReturnSales("DeliveryLineNo")) = False Then
                            DeliveryLineNo = drReturnSales("DeliveryLineNo")
                        Else
                            DeliveryLineNo = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count + 1
                        End If
                        'Start- Update Old SOItemPackagingBoxDtl for Return Sales Order Article
                        findKeyd(0) = vSiteCode
                        findKeyd(1) = vfinancialYear
                        findKeyd(2) = CtrlTxtOrderNo.Text
                        ' findKeyd(3) = drReturnSales("EAN").ToString
                        findKeyd(3) = billLineNo
                        findKeyd(4) = PkgLineNo
                        findKeyd(5) = DeliveryLineNo
                        drOldReturnDeliveryBoxDtl = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Find(findKeyd)

                        drOldReturnDeliveryBoxDtl("DeliveredQty") = drOldReturnDeliveryBoxDtl("DeliveredQty") - drReturnSales("PickUpQty")
                        drOldReturnDeliveryBoxDtl("UpdatedAt") = vSiteCode
                        drOldReturnDeliveryBoxDtl("UpdatedBy") = vUserName
                        drOldReturnDeliveryBoxDtl("UpdatedOn") = vCurrentDate

                        'Start- Add New SOPackagingBoxDeliveryDtl for Return Sales Order Article
                        findKeyd(0) = vSiteCode
                        findKeyd(1) = vfinancialYear
                        findKeyd(2) = NewSalesNo
                        '   findKeyd(3) = drReturnSales("EAN").ToString
                        findKeyd(3) = billLineNo
                        findKeyd(4) = PkgLineNo
                        findKeyd(5) = DeliveryLineNo
                        drNewReturnDeliveryBoxDtl = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Find(findKeyd)

                        If drNewReturnDeliveryBoxDtl Is Nothing Then
                            drNewReturnDeliveryBoxDtl = dsMain.Tables("SOPackagingBoxDeliveryDtl").NewRow()
                            IsNewReturn = True
                        End If

                        drNewReturnDeliveryBoxDtl("SiteCode") = drOldReturnDeliveryBoxDtl("SiteCode")
                        drNewReturnDeliveryBoxDtl("SaleOrderNumber") = NewSalesNo
                        drNewReturnDeliveryBoxDtl("EAN") = drOldReturnDeliveryBoxDtl("EAN")
                        drNewReturnDeliveryBoxDtl("BillLineNo") = drOldReturnDeliveryBoxDtl("BillLineNo")
                        drNewReturnDeliveryBoxDtl("PkgLineNo") = drOldReturnDeliveryBoxDtl("PkgLineNo")
                        drNewReturnDeliveryBoxDtl("DeliveryLineNo") = drOldReturnDeliveryBoxDtl("DeliveryLineNo")
                        For NewRowIndex = 3 To drOldReturnDeliveryBoxDtl.ItemArray.Count - 1
                            drNewReturnDeliveryBoxDtl(NewRowIndex) = drOldReturnDeliveryBoxDtl(NewRowIndex)
                        Next

                        'drNewReturnDeliveryBoxDtl("NetSellingPrice") = FormatNumber(drOldReturnBoxDtl("NetAmount") / drOldReturnBoxDtl("Quantity"), 2)
                        ' tempPurchaseQty = drReturnSales("Quantity")
                        drNewReturnDeliveryBoxDtl("Quantity") = drReturnSales("PickUpQty") * -1
                        drNewReturnDeliveryBoxDtl("DeliveredQty") = drReturnSales("PickUpQty") * -1

                        drNewReturnDeliveryBoxDtl("CreatedAt") = vSiteCode
                        drNewReturnDeliveryBoxDtl("CreatedBy") = clsAdmin.UserCode 'vUserName
                        drNewReturnDeliveryBoxDtl("CreatedOn") = vCurrentDate
                        drNewReturnDeliveryBoxDtl("UpdatedAt") = vSiteCode
                        drNewReturnDeliveryBoxDtl("UpdatedBy") = clsAdmin.UserCode 'vUserName
                        drNewReturnDeliveryBoxDtl("UpdatedOn") = vCurrentDate
                        drNewReturnDeliveryBoxDtl("FinYear") = vfinancialYear

                        If IsNewReturn = True Then
                            dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Add(drNewReturnDeliveryBoxDtl)
                            IsNewReturn = False
                        End If
                    Next
                    'End- Add SOItemPackagingDeliveryBoxDtl for Return Sales Order Article







                    Dim drOrderHdr As DataRow
                    Dim findKey(2) As Object

                    Dim clsCommon As New clsCommon
                    Dim vOBNumber As String = String.Empty
                    'vOBNumber = "OB" & clsAdmin.TerminalID & clsCommon.getDocumentNo("OutBound")            

                    If OnlineConnect = True Then
                        'Changed by Rohit to generate Document No. for proper sorting
                        Try
                            vOBNumber = "OB" & clsAdmin.TerminalID & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                            vOBNumber = GenDocNo(vOBNumber, 15, clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode))
                        Catch ex As Exception
                            vOBNumber = "OB" & clsAdmin.TerminalID & clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode)
                        End Try

                        Try
                            rbnLStatus.SmallImage = Spectrum.My.Resources.connected1.ToBitmap
                            rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus2")
                        Catch ex As Exception

                        End Try

                        'End Change by Rohit
                    Else
                        'Changed by Rohit to generate Document No. for proper sorting
                        Try
                            vOBNumber = "OOB" & clsAdmin.TerminalID & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                            vOBNumber = GenDocNo(vOBNumber, 15, clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode))
                        Catch ex As Exception
                            vOBNumber = "OOB" & clsAdmin.TerminalID & clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode)
                        End Try

                        Try
                            rbnLStatus.SmallImage = Spectrum.My.Resources.disconnected1.ToBitmap
                            rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus1")
                        Catch ex As Exception

                        End Try
                        'End Change by Rohit
                    End If

                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear
                    findKey(2) = vOBNumber

                    drOrderHdr = dsMain.Tables("OrderHdr").Rows.Find(findKey)
                    If drOrderHdr Is Nothing Then
                        drOrderHdr = dsMain.Tables("OrderHdr").NewRow
                        IsNewRow = True
                    End If

                    drOrderHdr("SiteCode") = vSiteCode
                    If IsNewRow = False Then
                        drOrderHdr("FinYear") = vfinancialYear
                    Else
                        drOrderHdr("FinYear") = clsAdmin.Financialyear
                    End If

                    drOrderHdr("DocumentNumber") = vOBNumber
                    drOrderHdr("DocumentType") = vDocType
                    drOrderHdr("DocDate") = vCurrentDate
                    'drOrderHdr("SupplierCode") = clsDefaultConfiguration.SupplierCode
                    drOrderHdr("PurchaseGroupCode") = DBNull.Value
                    drOrderHdr("DeliverySiteCode") = vSiteCode
                    drOrderHdr("ExpectedDeliveryDt") = DateTime.Now

                    drOrderHdr("PaymentAfterDelDays") = DBNull.Value
                    drOrderHdr("AdditionalTermsNConditions") = DBNull.Value
                    drOrderHdr("AdditionalPaymentTerms") = DBNull.Value
                    drOrderHdr("DocNetValue") = CDbl(CtrllblNetAmt.Text) * -1
                    drOrderHdr("DocGrossValue") = CDbl(CtrllblGrossAmt.Text.Trim) * -1
                    drOrderHdr("IsClosed") = True
                    drOrderHdr("IsFreezed") = True
                    drOrderHdr("SalesOrderRef") = CtrlTxtOrderNo.Text
                    drOrderHdr("ReturnReasonCode") = " "
                    drOrderHdr("Remarks") = "" 'CtrlSalesInfo.CtrlTxtRemarks.Text.Trim
                    drOrderHdr("ApprovedDate") = DBNull.Value
                    drOrderHdr("ApprovedLevel") = DBNull.Value
                    drOrderHdr("ApprovalLevel") = DBNull.Value
                    drOrderHdr("AmmendmentNo") = DBNull.Value

                    drOrderHdr("ClosedDate") = DBNull.Value
                    drOrderHdr("Transporter") = DBNull.Value
                    drOrderHdr("DocApprovalID") = DBNull.Value
                    drOrderHdr("ParentOrderNo") = DBNull.Value

                    drOrderHdr("CREATEDAT") = vSiteCode
                    drOrderHdr("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drOrderHdr("CREATEDON") = vCurrentDate
                    drOrderHdr("UPDATEDAT") = vSiteCode
                    drOrderHdr("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drOrderHdr("UPDATEDON") = vCurrentDate
                    drOrderHdr("STATUS") = True
                    drOrderHdr("SupplierCode") = " "

                    If IsNewRow = True Then
                        dsMain.Tables("OrderHdr").Rows.Add(drOrderHdr)
                        IsNewRow = False
                    End If



                    If clsDefaultConfiguration.IsBatchManagementReq Then
                        'Dim drOrderDtl As DataRow
                        'Dim rowIndex As Integer = 1
                        'Dim findKey1(4) As Object

                        'For Each drScan As SpectrumCommon.BtachbarcodeInfo In ReturnBatchbarcode
                        '    'If drScan("PickUpQty") > 0 Then
                        '    Dim dr = dtSOReturn.Select("PickUpQty>0 AND EAN='" & drScan.EAN & "'").FirstOrDefault()
                        '    findKey1(0) = vSiteCode
                        '    findKey1(1) = vfinancialYear
                        '    findKey1(2) = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                        '    findKey1(3) = drScan.EAN
                        '    findKey1(4) = rowIndex

                        '    drOrderDtl = dsMain.Tables("OrderDtl").Rows.Find(findKey1)
                        '    If drOrderDtl Is Nothing Then
                        '        drOrderDtl = dsMain.Tables("OrderDtl").NewRow
                        '        IsNewRow = True
                        '    End If

                        '    drOrderDtl("SiteCode") = vSiteCode

                        '    If IsNewRow = False Then
                        '        drOrderDtl("FinYear") = vfinancialYear
                        '    Else
                        '        drOrderDtl("FinYear") = clsAdmin.Financialyear
                        '    End If

                        '    drOrderDtl("DocumentNumber") = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                        '    drOrderDtl("ArticleCode") = drScan.ArticleCode
                        '    drOrderDtl("EAN") = drScan.EAN

                        '    drOrderDtl("Qty") = dr("Quantity")
                        '    drOrderDtl("UnitofMeasure") = vUOM
                        '    drOrderDtl("LineNumber") = rowIndex
                        '    drOrderDtl("OpenQty") = DBNull.Value
                        '    drOrderDtl("DeliveredQty") = drScan.Qty
                        '    drOrderDtl("DeliveryCompleted") = DBNull.Value
                        '    drOrderDtl("PurchaseGroupCode") = DBNull.Value
                        '    drOrderDtl("RefDocument") = DBNull.Value
                        '    drOrderDtl("RefDocumentNo") = DBNull.Value
                        '    drOrderDtl("BarCode") = drScan.BatchBarcode
                        '    drOrderDtl("PONo") = DBNull.Value
                        '    drOrderDtl("BirthListId") = DBNull.Value
                        '    drOrderDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                        '    drOrderDtl("AllocationRule") = DBNull.Value
                        '    'drOrderDtl("MRP") = drScan("SellingPrice")
                        '    drOrderDtl("MRP") = Math.Round(dr("NetAmount") / dr("Quantity"), clsDefaultConfiguration.DecimalPlaces)
                        '    drOrderDtl("CostPrice") = dr("SellingPrice")
                        '    drOrderDtl("NetCostPrice") = dr("SellingPrice")

                        '    drOrderDtl("ExciseDutyAmt") = DBNull.Value
                        '    drOrderDtl("ExciseDutyRate") = DBNull.Value
                        '    drOrderDtl("PurchaseTaxAmt") = DBNull.Value
                        '    drOrderDtl("PurchaseTaxRate") = DBNull.Value
                        '    drOrderDtl("AdditionalChargeAmt") = DBNull.Value
                        '    drOrderDtl("DiscountAmount") = dr("LineDiscount")
                        '    drOrderDtl("AdditionalChargeRate") = DBNull.Value  'drScan("ExclTaxAmt")
                        '    drOrderDtl("DocValue") = DBNull.Value
                        '    drOrderDtl("InboundQty") = DBNull.Value
                        '    drOrderDtl("DayOpenDate") = clsAdmin.DayOpenDate

                        '    drOrderDtl("CREATEDAT") = vSiteCode
                        '    drOrderDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        '    drOrderDtl("CREATEDON") = vCurrentDate
                        '    drOrderDtl("UPDATEDAT") = vSiteCode
                        '    drOrderDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        '    drOrderDtl("UPDATEDON") = vCurrentDate
                        '    drOrderDtl("STATUS") = True

                        '    If IsNewRow = True Then
                        '        dsMain.Tables("OrderDtl").Rows.Add(drOrderDtl)
                        '        IsNewRow = False
                        '    End If
                        '    rowIndex = rowIndex + 1
                        '    'End If
                        '    Batchbarcode.Add(drScan)
                        'Next


                    Else
                        Dim drOrderDtl As DataRow
                        Dim rowIndex As Integer = 1
                        Dim findKey1(3) As Object

                        For Each drScan As DataRow In dtSOReturn.Select("PickUpQty>0")
                            'If drScan("PickUpQty") > 0 Then

                            findKey1(0) = vSiteCode
                            findKey1(1) = vfinancialYear
                            findKey1(2) = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                            ' findKey1(3) = drScan("EAN")
                            findKey1(3) = drScan("BillLineNo")

                            drOrderDtl = dsMain.Tables("OrderDtl").Rows.Find(findKey1)


                            'findKey1(0) = vSiteCode
                            'findKey1(1) = vfinancialYear
                            'findKey1(2) = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                            'findKey1(3) = drScan("EAN")
                            'findKey1(4) = rowIndex
                            'drOrderDtl = dsMain.Tables("OrderDtl").Rows.Find(findKey1)

                            If drOrderDtl Is Nothing Then
                                drOrderDtl = dsMain.Tables("OrderDtl").NewRow
                                IsNewRow = True

                                drOrderDtl("SiteCode") = vSiteCode

                                If IsNewRow = False Then
                                    drOrderDtl("FinYear") = vfinancialYear
                                Else
                                    drOrderDtl("FinYear") = clsAdmin.Financialyear
                                End If

                                drOrderDtl("DocumentNumber") = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                                drOrderDtl("ArticleCode") = drScan("ArticleCode")
                                drOrderDtl("EAN") = drScan("EAN")

                                drOrderDtl("Qty") = dsMain.Tables("SalesOrderDtl").Select("ArticleCode='" & drScan("ArticleCode") & "' and TransactionCode='SO201'")(0)("Quantity")
                                drOrderDtl("UnitofMeasure") = vUOM
                                drOrderDtl("LineNumber") = rowIndex
                                drOrderDtl("OpenQty") = DBNull.Value
                                drOrderDtl("DeliveredQty") = drScan("PickUpQty") * -1
                                drOrderDtl("DeliveryCompleted") = DBNull.Value
                                drOrderDtl("PurchaseGroupCode") = DBNull.Value
                                drOrderDtl("RefDocument") = DBNull.Value
                                drOrderDtl("RefDocumentNo") = DBNull.Value
                                drOrderDtl("BarCode") = "" 'drScan("BatchBarCode")
                                drOrderDtl("PONo") = DBNull.Value
                                drOrderDtl("BirthListId") = DBNull.Value
                                drOrderDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                                drOrderDtl("AllocationRule") = DBNull.Value
                                Dim hdr = dsMain.Tables("SalesOrderDtl").Select("ArticleCode='" & drScan("ArticleCode") & "'")
                                If hdr.Length > 0 Then
                                    drOrderDtl("MRP") = hdr(0)("SellingPrice")
                                    ' drOrderDtl("MRP") ='Math.Round(drScan("NetAmount") / drScan("Quantity"), clsDefaultConfiguration.DecimalPlaces)
                                    drOrderDtl("CostPrice") = hdr(0)("SellingPrice")
                                    drOrderDtl("NetCostPrice") = hdr(0)("SellingPrice")
                                    drOrderDtl("DiscountAmount") = hdr(0)("LineDiscount")
                                End If

                                drOrderDtl("ExciseDutyAmt") = DBNull.Value
                                drOrderDtl("ExciseDutyRate") = DBNull.Value
                                drOrderDtl("PurchaseTaxAmt") = DBNull.Value
                                drOrderDtl("PurchaseTaxRate") = DBNull.Value
                                drOrderDtl("AdditionalChargeAmt") = DBNull.Value

                                drOrderDtl("AdditionalChargeRate") = DBNull.Value  'drScan("ExclTaxAmt")
                                drOrderDtl("DocValue") = DBNull.Value
                                drOrderDtl("InboundQty") = DBNull.Value
                                drOrderDtl("DayOpenDate") = clsAdmin.DayOpenDate

                                drOrderDtl("CREATEDAT") = vSiteCode
                                drOrderDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                                drOrderDtl("CREATEDON") = vCurrentDate
                                drOrderDtl("UPDATEDAT") = vSiteCode
                                drOrderDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                                drOrderDtl("UPDATEDON") = vCurrentDate
                                drOrderDtl("STATUS") = True

                                If IsNewRow = True Then
                                    dsMain.Tables("OrderDtl").Rows.Add(drOrderDtl)
                                    IsNewRow = False
                                End If
                                rowIndex = rowIndex + 1

                            Else

                                drOrderDtl("DeliveredQty") = IIf(drOrderDtl("DeliveredQty") Is DBNull.Value, 0, drOrderDtl("DeliveredQty")) - drScan("PickUpQty")
                                drOrderDtl("UpdatedAt") = vSiteCode
                                drOrderDtl("UpdatedBy") = vUserName
                                drOrderDtl("UpdatedOn") = vCurrentDate
                            End If


                            'End If
                        Next


                    End If




                End If
                Dim dstemp As DataSet = dsMain.Copy()
                If objPCSO.PrepareSaveData(vSalesInvcNo, clsAdmin.DayOpenDate, clsAdmin.CLPProgram, vCustomerNo, dsMain, True, IsNextInvoiceNo, vSiteCode, CtrlTxtOrderNo.Text, clsDefaultConfiguration.StockStorageLocation, clsAdmin.CVProgram, "SalesOrder", vfinancialYear, clsAdmin.UserCode, clsAdmin.CurrentDate, True, CVoucherNo, CVVoucherDay, , , , clsDefaultConfiguration.IsBatchManagementReq, Batchbarcode) = True Then
                    Dim dttemp As DataTable = dsScanReturn.Tables(0).Copy()
                    dsScanReturn.Tables(0).Clear()
                    dtSOReturn.Clear()
                    For Each dr As DataRow In dstemp.Tables("SalesOrderDTL").Select("ArticleStatus='Return'", "", DataViewRowState.CurrentRows)
                        Dim drNew As DataRow = dsScanReturn.Tables(0).NewRow
                        drNew("ArticleCode") = dr("ArticleCode")
                        drNew("Ean") = dr("EAN")
                        'drNew("") = dr("")
                        For Each drART As DataRow In dttemp.Select("ean='" & drNew("Ean") & "'", "", DataViewRowState.CurrentRows)
                            drNew("DISCRIPTION") = drART("DISCRIPTION")
                        Next

                        drNew("sellingprice") = dr("sellingprice")
                        drNew("quantity") = tempPurchaseQty
                        drNew("NetAmount") = dr("NetAmount")
                        drNew("Discount") = dr("DiscountAmount")
                        drNew("PickUpQty") = dr("quantity")
                        drNew("totalDiscPercentage") = dr("DiscountPercentage")
                        drNew("excltaxamt") = dr("ExclTaxAmt")
                        drNew("totalTaxamt") = dr("TotalTaxAmount")
                        drNew("GrossAmt") = dr("GrossAmount")
                        drNew("LineDiscount") = dr("LineDiscount")
                        dsScanReturn.Tables(0).Rows.Add(drNew)
                    Next

                    PrintSalesOrdersReturn(drSiteInfo, drHomeAdds)

                    ShowMessage(getValueByKey("SO042"), "SO042 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Updated Successfully", "Sales Order Return")

                    ResetSalesOrder()
                    isLeaved = False
                    CtrlTxtOrderNo.Text = String.Empty

                    BtnSOSave.Visible = True
                    BtnSOPrint.Visible = True
                    rbnGrpCMPromotion.Visible = False
                    BtnSOAcceptPayment.Visible = True
                    BtnSOOtherCharges.Visible = True
                    'BtnSOReturn.Visible = True
                    BtnSOCancel.Visible = False
                    'If Not tabReturn Is Nothing Then
                    '    TabSalesOrder.TabPages.Remove(tabReturn)
                    'End If
                    'If Not tabPayment Is Nothing Then
                    '    TabSalesOrder.TabPages.Remove(tabPayment)
                    'End If
                    'If Not tabSales Is Nothing Then
                    '    TabSalesOrder.TabPages.Add(tabSales)
                    'End If
                    'If Not tabPayment Is Nothing Then
                    '    TabSalesOrder.TabPages.Add(tabPayment)
                    'End If
                    CtrlBtnReturn_Click(sender, e)
                    'grdSOItems.Cols(2).Caption
                    CtrlBtnReturn.Enabled = False
                    AutoLogout(FrmTranCode, Me, lblLoggedIn)
                End If
            End If
            GridItemSetting()
            GridDeliverdSetting()
            GridInvoiceSetting()
            isLeaved = False
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Sub


    Private Function PrintGiftReceipt() As Boolean
        Try
            If Not dsPayment Is Nothing AndAlso dsPayment.Tables.Contains("MSTRecieptType") Then
                '---abc
                ' Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.GiftVoucherDocumentPrint, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesInvcNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dsPayment.Tables("MSTRecieptType"), CtrlSalesInfo.CtrlTxtCustOrdRef.Text, vSalesInvcNo, GiftReceiptMessage, Nothing, Nothing, dtPrinterInfo, ShowFullName:=clsDefaultConfiguration.PrintItemFullName)

                'Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.Status, clsAdmin.SiteCode, vSalesInvcNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dsPayment.Tables("MSTRecieptType"), CtrlSalesInfo1.CtrlTxtCustOrdRef.Text)

            Else
                '---abc
                ' Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.GiftVoucherDocumentPrint, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesInvcNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dsPayment.Tables("MSTRecieptType"), CtrlSalesInfo.CtrlTxtCustOrdRef.Text, vSalesInvcNo, GiftReceiptMessage, Nothing, Nothing, dtPrinterInfo, ShowFullName:=clsDefaultConfiguration.PrintItemFullName)

                'Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.Status, clsAdmin.SiteCode, vSalesInvcNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), Nothing, CtrlSalesInfo1.CtrlTxtCustOrdRef.Text)


            End If

        Catch ex As Exception
            LogException(ex)
        End Try

    End Function

    ''' <summary>
    ''' Preapring the Sales Order Header data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareHdrDataforSave(ByRef dsMain As DataSet, Optional ByVal doctype As Boolean = False) As Boolean
        Dim drSOHdr As DataRow
        Dim findKey(2) As Object

        Try

            findKey(0) = vSiteCode
            findKey(1) = vfinancialYear
            findKey(2) = CtrlTxtOrderNo.Text

            drSOHdr = _dsMain.Tables("SalesOrderHDR").Rows.Find(findKey)
            If Not (drSOHdr Is Nothing) Then

                drSOHdr("SaleOrderNumber") = CtrlTxtOrderNo.Text

                drSOHdr("SiteCode") = vSiteCode
                drSOHdr("FinYear") = vfinancialYear
                'drSOHdr("TerminalID") = vTerminalID '----commmented by sagar as per discuss with santosh and ram for sync issue.(book on one till and update from another , so it will update current till in header also.)
                If doctype Then
                    drSOHdr("TransactionCode") = drSOHdr("TransactionCode")
                Else
                    drSOHdr("TransactionCode") = vDocType
                End If

                drSOHdr("NetAmt") = CDbl(CtrllblNetAmt.Text)
                drSOHdr("CostAmt") = CDbl(CtrllblNetAmt.Text)
                drSOHdr("GrossAmt") = CDbl(CtrllblGrossAmt.Text)

                If Not (dsPayment Is Nothing) AndAlso dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables(0).Rows.Count > 0 Then
                    drSOHdr("AdvanceAmt") = CType(IIf(drSOHdr("AdvanceAmt") Is DBNull.Value, 0, drSOHdr("AdvanceAmt")), Double) + CType(dsPayment.Tables(0).Compute("Sum(Amount)", ""), Double)
                Else
                    drSOHdr("AdvanceAmt") = drSOHdr("AdvanceAmt")
                End If

                ' drSOHdr("DiscountPercentage") = FormatNumber(CDbl(dsPackagingVar.Tables(0).Compute("Sum(Discount)", "") / (grdSOItems.Rows.Count - 1)), 2)
                If dsPackagingVar.Tables(0).Compute("Sum(Discount)", "") > 0 Then
                    drSOHdr("DiscountPercentage") = FormatNumber(CDbl(dsPackagingVar.Tables(0).Compute("Sum(TotalDiscPercentage)", "") / (grdSOItems.Rows.Count - 1)), 2)
                Else
                    drSOHdr("DiscountPercentage") = 0
                End If
                drSOHdr("DiscountAmt") = CDbl(CtrllblDiscAmt.Text.Trim)
                drSOHdr("TotalDiscount") = CDbl(CtrllblDiscAmt.Text.Trim)
                drSOHdr("BalanceAmount") = Math.Round(CDbl(CtrllblNetAmt.Text.Trim) - CDbl(drSOHdr("AdvanceAmt")), 2)
                drSOHdr("RoundedAmt") = CDbl(CDbl(CtrllblNetAmt.Text.Trim))

                drSOHdr("LineItems") = CType(grdSOItems.Rows.Count - 1, Integer)
                drSOHdr("CreditNoteNo") = DBNull.Value
                drSOHdr("TransCurrency") = vCurrencyDescription
                drSOHdr("PostingStatus") = DBNull.Value

                drSOHdr("ExchangeRate") = 0
                drSOHdr("CurrencyCode") = vCurrencyCode
                If Not dsPackagingVar.Tables(0).Compute("Sum(TotalTaxAmount)", "IsStatus<>'Deleted'") Is DBNull.Value Then
                    drSOHdr("TaxAmount") = Math.Round(dsPackagingVar.Tables(0).Compute("Sum(TotalTaxAmount)", "IsStatus<>'Deleted'"),2)
                End If

                If Not (dtOtherCharges Is Nothing) AndAlso dtOtherCharges.Rows.Count > 0 Then
                    drSOHdr("ServiceTaxAmount") = Math.Round(IIf(IsDBNull(drSOHdr("ServiceTaxAmount")), 0, drSOHdr("ServiceTaxAmount")) + IIf(dtOtherCharges.Compute("Sum(TaxAmt)", "") Is DBNull.Value, 0, dtOtherCharges.Compute("Sum(TaxAmt)", "")), 3)
                End If

                drSOHdr("NoofReprints") = drSOHdr("NoofReprints") + 1
                drSOHdr("ReprintReason") = "Changed"
                drSOHdr("ReprintDate") = vCurrentDate
                drSOHdr("ReprintTime") = Format(vCurrentDate, "hh:mm:ss tt") 'Format(Now, "dd-MM-yyyy hh:mm:ss tt")

                drSOHdr("DeletionDate") = DBNull.Value
                drSOHdr("DeletionTime") = DBNull.Value

                drSOHdr("IsExported") = 0
                drSOHdr("PromisedDeliveryDate") = DateAndTime.Now
                drSOHdr("ActualDeliveryDate") = DateTime.Now

                'If CtrlCustDtls1.cboAddrType.SelectedValue = "" Then
                '    drSOHdr("OtherDeliveryAdd") = CtrlCustDtls1.lblAddressValue.Text.Trim & "  " & CtrlCustDtls1.lblEmailIdValue.Text.Trim & "  " & CtrlCustDtls1.lblTelNoValue.Text.Trim

                '    drSOHdr("DeliveryAtCustAddressType") = ""
                'Else
                drSOHdr("DeliveryAtCustAddressType") = "1" 'CtrlCustDtls1.cboAddrType.SelectedValue
                'End If
                If IsBookingEdit Then
                    drSOHdr("SOStatus") = "Open"
                    drSOHdr("CLPPoints") = 0
                    drSOHdr("CLPDiscount") = 0
                Else
                    If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                        drSOHdr("SOStatus") = "Closed"
                        If Not dsScan.Tables("ItemScanDetails").Compute("Sum(CLPPoints)", "(PickUpQty>0 Or DeliveredQty>0) And IsCLP='True'") Is DBNull.Value Then
                            drSOHdr("CLPPoints") = dsScan.Tables("ItemScanDetails").Compute("Sum(CLPPoints)", "(PickUpQty>0 Or DeliveredQty>0) And IsCLP='True'")
                        End If
                        If Not dsScan.Tables("ItemScanDetails").Compute("Sum(CLPDiscount)", "(PickUpQty>0 Or DeliveredQty>0) And IsCLP='True'") Is DBNull.Value Then
                            drSOHdr("CLPDiscount") = dsScan.Tables("ItemScanDetails").Compute("Sum(CLPDiscount)", "(PickUpQty>0 Or DeliveredQty>0) And IsCLP='True'")
                        End If
                    Else
                        drSOHdr("SOStatus") = "Open"
                        drSOHdr("CLPPoints") = 0
                        drSOHdr("CLPDiscount") = 0
                    End If
                End If
                drSOHdr("BalancePoints") = DBNull.Value

                drSOHdr("CustomerOrderRef") = ""
                drSOHdr("Remarks") = ""

                vAmendedNo = drSOHdr("AmendedNo")
                drSOHdr("AmendedNo") = vAmendedNo + 1

                drSOHdr("UPDATEDAT") = vSiteCode
                drSOHdr("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drSOHdr("UPDATEDON") = vCurrentDate

                drSOHdr("STATUS") = True
                If rdDelYes.Checked Then
                    drSOHdr("IsDelivery") = True
                Else
                    drSOHdr("IsDelivery") = False
                End If
                If lblMultiPickupDel.Text = "Multi Pickup" AndAlso rbDPYes.Checked Then
                    drSOHdr("IsMultiPickUp") = True
                Else
                    drSOHdr("IsMultiPickUp") = False
                End If
                If lblMultiPickupDel.Text = "Multi Delivery" AndAlso rbDPYes.Checked Then
                    drSOHdr("IsMultiDelivery") = True
                Else
                    drSOHdr("IsMultiDelivery") = False
                End If
            End If

            Return True
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function

    ''' <summary>
    ''' Preapring the Sales Order Details data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareDtlDataforSave(ByRef dsMain As DataSet, Optional ByVal Pickall As Boolean = False, Optional ByVal doctype As Boolean = False) As Boolean
        Dim IsAddNewRow As Boolean = False
        Dim drSODtl As DataRow
        Dim findKey(3) As Object
        Dim MaxBilllineno As Integer = 0
        If IsDBNull(dsMain.Tables("SalesOrderDTL").Compute("Max(BillLineNo)", "")) Then
            MaxBilllineno = 0
        Else
            MaxBilllineno = dsMain.Tables("SalesOrderDTL").Compute("Max(BillLineNo)", "")
        End If
        ''---- Code Added By Mahesh for Bulk Combo ----
        If doctype = False Then
            If Not dsMain.Tables("SalesOrderDTL").Columns.Contains("RowIndex") Then
                dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
            End If
        End If
        Try
            'For Each drScan As DataRow In dsScan.Tables("ItemScanDetails").Select("IsStatus In ('Deleted','Updated') ")
            For Each drScan As DataRow In dsScan.Tables("ItemScanDetails").Rows
                Try
                    Dim billLineNo As Integer
                    If IsDBNull(drScan("BillLineNo")) = False Then
                        billLineNo = drScan("BillLineNo")
                    Else
                        MaxBilllineno = MaxBilllineno + 1
                        billLineNo = MaxBilllineno 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                    End If
                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear
                    findKey(2) = CtrlTxtOrderNo.Text
                    'findKey(3) = drScan("EAN").ToString
                    findKey(3) = billLineNo
                    drSODtl = dsMain.Tables("SalesOrderDTL").Rows.Find(findKey)

                    If drSODtl Is Nothing Then
                        drSODtl = dsMain.Tables("SalesOrderDTL").NewRow
                        drSODtl("STATUS") = True
                        IsAddNewRow = True
                    Else
                        If drScan("IsStatus") = "Deleted" Then
                            drSODtl("ArticleStatus") = "Deleted"
                            drSODtl("STATUS") = False
                        Else
                            drSODtl("STATUS") = True
                            drSODtl("ArticleStatus") = "Open"
                        End If
                        IsAddNewRow = False
                    End If
                    Dim dvPackageItems As New DataView
                    dvPackageItems = New DataView(_dsPackagingVar.Tables("PackagingMaterial"), "BillLineNo='" & drScan("BillLineNo").ToString() & "'", "", DataViewRowState.CurrentRows)
                    Dim Quantity = _dsPackagingVar.Tables(0).Compute("Sum(Quantity)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    Dim PickUpQuantity = _dsPackagingVar.Tables(0).Compute("Sum(PickUpQty)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    Dim DeliveredQuantity = _dsPackagingVar.Tables(0).Compute("Sum(DeliveredQty)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    Dim CostAmount = _dsPackagingVar.Tables(0).Compute("Sum(CostAmount)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    Dim GrossAmount = _dsPackagingVar.Tables(0).Compute("Sum(GrossAmount)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    Dim NetAmount = _dsPackagingVar.Tables(0).Compute("Sum(NetAmount)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    '' added by Ketan Wrong data same in salesorderdtl
                    Dim TaxAmount = _dsPackagingVar.Tables(0).Compute("Sum(TotalTaxAmount)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")
                    Dim LineDiscount = _dsPackagingVar.Tables(0).Compute("Sum(LineDiscount)", " BillLineNo='" + drScan("BillLineNo").ToString() + "'")


                    If Pickall = True Then
                        drScan("PickUpQty") = drScan("Quantity") - IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty"))
                    End If
                    If Val(IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty"))) + Val(drScan("PickUpQty")) = Val(drScan("Quantity")) Then
                        drSODtl("ArticleStatus") = "Closed"
                    End If
                    drSODtl("BillLineNo") = billLineNo
                    drScan("BillLineNo") = billLineNo
                    If doctype = False Then
                        drSODtl("RowIndex") = drScan("RowIndex")
                    End If
                    drSODtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                    drSODtl("SiteCode") = vSiteCode
                    drSODtl("FinYear") = vfinancialYear
                    drSODtl("EAN") = drScan("EAN")
                    drSODtl("ArticleCode") = drScan("ArticleCode")
                    drSODtl("BatchBarcode") = drScan("BatchBarcode")
                    drSODtl("PromisedDeliveryDate") = drScan("ExpDelDate")
                    drSODtl("ActualDeliveryDate") = drScan("ExpDelDate")

                    drSODtl("SellingPrice") = drScan("SellingPrice")
                    'drSODtl("Quantity") = drScan("Quantity")
                    drSODtl("Quantity") = Quantity ' drScan("Quantity") '' added by ketan update time qty get wrong in salsorderdtl table variation qty was not consider
                    If Not IsBookingEdit Then
                        If Quantity = PickUpQuantity + DeliveredQuantity Then
                            drSODtl("Delivered_Qty") = DeliveredQuantity
                            drSODtl("DeliveredQty") = Quantity
                            drSODtl("ArticleStatus") = "Closed"
                        Else
                            If PickUpQuantity > 0 Then
                                drSODtl("DeliveredQty") = PickUpQuantity + DeliveredQuantity
                                drSODtl("Delivered_Qty") = PickUpQuantity
                                'drSODtl("Delivered_Qty") = IIf(drScan("PickUpQty") = 0, drScan("DeliveredQty"), drScan("DeliveredQty") + drScan("PickUpQty"))
                            Else
                                drSODtl("DeliveredQty") = DeliveredQuantity
                                drSODtl("Delivered_Qty") = 0
                            End If
                            drSODtl("ArticleStatus") = "Open"
                        End If
                    ElseIf IsBookingEdit Then
                        If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                            drSODtl("ArticleStatus") = "Open" ''need to 
                            drSODtl("DeliveredQty") = DeliveredQuantity
                            drSODtl("Delivered_Qty") = 0
                        Else
                            If PickUpQuantity > 0 Then
                                ''change By ketan REmove For Pc Issue
                                drSODtl("DeliveredQty") = PickUpQuantity '+ DeliveredQuantity
                                drSODtl("Delivered_Qty") = PickUpQuantity
                                'drSODtl("Delivered_Qty") = IIf(drScan("PickUpQty") = 0, drScan("DeliveredQty"), drScan("DeliveredQty") + drScan("PickUpQty"))
                            Else
                                drSODtl("DeliveredQty") = DeliveredQuantity
                                drSODtl("Delivered_Qty") = 0
                            End If
                            drSODtl("ArticleStatus") = "Open"
                        End If

                    End If

                    If drScan("Reserved") Is DBNull.Value Then
                        If Not drScan("ReservedQty") Is DBNull.Value AndAlso drScan("ReservedQty") = True Then
                            drSODtl("ReservedQty") = drScan("Quantity")
                            drSODtl("Reserved_Qty") = drScan("Quantity")
                        End If
                    ElseIf drScan("Reserved") = drScan("ReservedQty") Then
                        If Not drScan("ReservedQty") Is DBNull.Value AndAlso drScan("ReservedQty") = True Then
                            drSODtl("ReservedQty") = IIf(drSODtl("ReservedQty") Is DBNull.Value, 0, drSODtl("ReservedQty")) + drScan("PickUpQty") * -1
                            drSODtl("Reserved_Qty") = drScan("PickUpQty") * -1
                        End If
                    Else
                        If Not drScan("ReservedQty") Is DBNull.Value AndAlso drScan("ReservedQty") = True Then
                            drSODtl("ReservedQty") = IIf(drSODtl("ReservedQty") Is DBNull.Value, 0, drSODtl("ReservedQty")) + CDbl(drScan("Quantity")) - CDbl(drScan("PickUpQty") + drScan("DeliveredQty"))
                            drSODtl("Reserved_Qty") = CDbl(drScan("Quantity")) - CDbl(drScan("PickUpQty") + IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty")))
                        End If
                        If Not drScan("ReservedQty") Is DBNull.Value AndAlso drScan("ReservedQty") = False Then
                            drSODtl("ReservedQty") = IIf(drSODtl("ReservedQty") Is DBNull.Value, 0, drSODtl("ReservedQty")) + (drScan("Quantity") - IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty"))) * -1
                            drSODtl("Reserved_Qty") = (drScan("Quantity") - IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty"))) * -1
                        End If
                    End If


                    'If drScan("ReservedQty") > 0 AndAlso drScan("Quantity") > drScan("PickUpQty") + drScan("DeliveredQty") Then
                    '    drSODtl("ReservedQty") = CDbl(drScan("Quantity")) - CDbl(drScan("PickUpQty") + drScan("DeliveredQty"))
                    'Else
                    '    drSODtl("ReservedQty") = 0
                    'End If

                    drSODtl("CostAmount") = drScan("CostAmount") 'DBNull.Value
                    drSODtl("GrossAmount") = GrossAmount 'Math.Round(drScan("GrossAmount"), 3)
                    drSODtl("NetAmount") = NetAmount 'Math.Round(drScan("NetAmount"), 3)

                    drSODtl("OfferNo") = IIf(drScan("PromotionId") Is DBNull.Value, 0, drScan("PromotionId"))
                    drSODtl("Section") = DBNull.Value
                    drSODtl("Shelf") = DBNull.Value

                    If doctype Then
                        drSODtl("TransactionCode") = drSODtl("TransactionCode")
                    Else
                        drSODtl("TransactionCode") = vDocType
                    End If
                    drSODtl("IsCLPApplicable") = drScan("IsCLP")
                    drSODtl("CLPPoints") = IIf(drScan("CLPPoints") Is DBNull.Value, 0, drScan("CLPPoints"))
                    drSODtl("CLPDiscount") = CDbl(drScan("CLPDiscount"))

                    drSODtl("LineDiscount") = LineDiscount 'IIf(drScan("LineDiscount") Is DBNull.Value, 0, drScan("LineDiscount"))
                    drSODtl("CLPDiscount") = DBNull.Value
                    drSODtl("DiscountAmount") = LineDiscount 'CDbl(drScan("LineDiscount")) + CDbl(IIf(drSODtl("CLPDiscount") Is DBNull.Value, 0, drSODtl("CLPDiscount")))
                    drSODtl("DiscountPercentage") = drScan("TotalDiscPercentage")

                    drSODtl("UnitofMeasure") = IIf(drScan("UOM") Is DBNull.Value, 0, drScan("UOM"))
                    drSODtl("ExclTaxAmt") = TaxAmount 'drScan("ExclTaxAmt")
                    drSODtl("TotalTaxAmount") = TaxAmount 'Math.Round(IIf(drScan("TotalTaxAmt") Is DBNull.Value, 0, drScan("TotalTaxAmt")), 3)

                    drSODtl("IFBNo") = DBNull.Value
                    drSODtl("SalesReturnReasonCode") = DBNull.Value
                    drSODtl("ReturnSaleOrderNo") = DBNull.Value
                    drSODtl("ReturnSaleOrderDt") = DBNull.Value
                    drSODtl("ReturnQty") = DBNull.Value
                    drSODtl("ScaleItem") = DBNull.Value
                    drSODtl("ReturnNoSale") = DBNull.Value
                    drSODtl("SerialNo") = DBNull.Value
                    drSODtl("SerialNbrNotValid") = DBNull.Value
                    drSODtl("IsCombo") = drScan("IsCombo")
                    drSODtl("FIRSTLEVELDISC") = CDbl(IIf(drScan("FIRSTLEVELDISC") Is DBNull.Value, 0, drScan("FIRSTLEVELDISC")))
                    drSODtl("TOPLEVELDISC") = CDbl(IIf(drScan("TOPLEVELDISC") Is DBNull.Value, 0, drScan("TOPLEVELDISC")))
                    drSODtl("FIRSTLEVEL") = IIf(drScan("FIRSTLEVEL") Is DBNull.Value, "", drScan("FIRSTLEVEL"))
                    drSODtl("TopLevel") = IIf(drScan("TopLevel") Is DBNull.Value, "", drScan("TopLevel"))
                    If drScan("SalesStaffID") Is DBNull.Value Or drScan("SalesStaffID").ToString() = "" Then
                        drSODtl("SalesStaffID") = IIf(CtrlSalesPerson.CtrlSalesPersons.SelectedIndex < 0, "", CtrlSalesPerson.CtrlSalesPersons.SelectedValue)
                    End If
                    drSODtl("UPDATEDAT") = vSiteCode
                    drSODtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drSODtl("UPDATEDON") = vCurrentDate
                    drSODtl("Status") = drScan("Status")
                    If drScan("IsCombo") Then
                        ' Dim result As DataRow() = DtSoBulkRemarks.Select("ArticleCode='" + drScan("Discription").ToString() + "'")
                        Dim result As DataRow() = DtSoBulkRemarks.Select("ArticleCode='" + drScan("Discription").ToString() + "' and SrNo='" + drScan("SrNo").ToString() + "'")
                        If result.Length > 0 Then
                            drSODtl("remarks") = result(0)("remark")
                        Else
                            drSODtl("remarks") = ""
                        End If
                    Else
                        Dim result As DataRow() = DtSoBulkRemarks.Select("ArticleCode='" + drScan("ArticleCode").ToString() + "'")
                        If result.Length > 0 Then
                            drSODtl("remarks") = result(0)("remark")
                        Else
                            drSODtl("remarks") = ""
                        End If
                    End If

                    If IsAddNewRow = True Then
                        drSODtl("CREATEDAT") = vSiteCode
                        drSODtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        drSODtl("CREATEDON") = vCurrentDate
                        drSODtl("DeliverySiteCode") = drScan("DeliverySiteCode")
                        dsMain.Tables("SalesOrderDTL").Rows.Add(drSODtl)
                    End If

                Catch ex As Exception
                    ShowMessage(ex.Message, getValueByKey("CLAE05"))
                    LogException(ex)
                End Try
            Next
            '-----deleted data code for reversing reserve Qty---------
            Dim dvDeleted As New DataView(dsScan.Tables("ItemScanDetails"), "IsStatus='Deleted'", "", DataViewRowState.CurrentRows)
            If dvDeleted.Count > 0 Then
                DtDeletedData = dvDeleted.ToTable().Copy()
            End If
            '---------end here for reserve-----------
            ' to set the costprice 
            SetCostPrice(clsDefaultConfiguration.isMAPbasedCost, dsMain.Tables("SalesOrderDTL"), clsAdmin.SiteCode, "CostAmount", clsDefaultConfiguration.IsBatchManagementReq)
            ' to set the costprice 

            Return True
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Packaging Variations data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PreparePackageVariationDataforSave(ByRef dsMain As DataSet, Optional ByVal doctype As Boolean = False) As Boolean
        strSOStatus = ""

        Dim findKey(4) As Object
        Dim drSOPackDtl As DataRow
        ''---- Code Added By Mahesh for Bulk Combo ----

        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            For Each drScan As DataRow In dsPackagingVar.Tables("PackagingMaterial").Rows


                Dim billLineNo As Integer = drScan("BillLineNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                findKey(0) = vSiteCode
                findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                findKey(2) = CtrlTxtOrderNo.Text
                ' findKey(3) = drScan("EAN").ToString
                findKey(3) = drScan("rowindex")
                findKey(4) = drScan("pkgLineNo")
                drSOPackDtl = dsMain.Tables("SOItemPackagingBoxDtl").Rows.Find(findKey)

                If drSOPackDtl Is Nothing Then
                    drSOPackDtl = dsMain.Tables("SOItemPackagingBoxDtl").NewRow()
                    IsNewRow = True
                End If
                'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                drSOPackDtl("BillLineNo") = drScan("rowindex")
                drSOPackDtl("PkgLineNo") = drScan("PkgLineNo")
                'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                '---- NEED to put BillNo in scan table to for print 
                'drScan("BillLineNo") = billLineNo

                drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                drSOPackDtl("SiteCode") = vSiteCode
                drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                drSOPackDtl("EAN") = drScan("EAN")
                Dim result As DataRow() = dtPackagingBox.Select("ArticleShortName='" + drScan("pckgMaterial").ToString() + "'")
                If drScan("ArticleType").ToString() = "Combo" Then

                    If result.Length > 0 Then
                        drSOPackDtl("ArticleCode") = result(0)("ArticleCode")
                        drSOPackDtl("PackageBaseUOM") = result(0)("BaseUnitofMeasure")
                        drSOPackDtl("PackagedEAN") = result(0)("EAN")
                        drSOPackDtl("PackagingBoxCode") = result(0)("ArticleCode")
                    Else
                        drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        drSOPackDtl("PackageBaseUOM") = ""
                        drSOPackDtl("PackagedEAN") = ""
                        drSOPackDtl("PackagingBoxCode") = ""
                    End If
                Else
                    drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                    If result.Length > 0 Then
                        drSOPackDtl("PackageBaseUOM") = result(0)("BaseUnitofMeasure")
                        drSOPackDtl("PackagedEAN") = result(0)("EAN")
                        drSOPackDtl("PackagingBoxCode") = result(0)("ArticleCode")
                    Else
                        drSOPackDtl("PackageBaseUOM") = ""
                        drSOPackDtl("PackagedEAN") = ""
                        drSOPackDtl("PackagingBoxCode") = ""
                    End If

                End If
                drSOPackDtl("SellingPrice") = drScan("SellingPrice")
                drSOPackDtl("BatchBarcode") = drScan("BatchBarcode")
                drSOPackDtl("DeliverySiteCode") = drScan("DeliverySiteCode")
                drSOPackDtl("CostAmount") = drScan("CostAmount") 'DBNull.Value
                drSOPackDtl("GrossAmount") = Math.Round(drScan("GrossAmount"), 3)
                drSOPackDtl("NetAmount") = Math.Round(drScan("NetAmount"), 3)
                If Not IsBookingEdit Then
                    If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                        drSOPackDtl("ArticleStatus") = "Closed"
                        strSOStatus = "Closed"
                    Else
                        drSOPackDtl("ArticleStatus") = "Open"       'need to confirm
                        strSOStatus = "Open"
                    End If
                ElseIf IsBookingEdit Then
                    If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                        If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then

                            drSOPackDtl("ArticleStatus") = "Open"
                        Else
                            drSOPackDtl("ArticleStatus") = "Close"
                        End If
                    Else
                        drSOPackDtl("ArticleStatus") = "Close"
                    End If


                End If
                'If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) Then
                '    drSOPackDtl("ArticleStatus") = "Closed"
                '    strSOStatus = "Closed"
                'Else
                '    drSOPackDtl("ArticleStatus") = "Open"       'need to confirm
                '    strSOStatus = "Open"
                'End If
                drScan("PromotionId") = IIf(drScan("PromotionId") Is DBNull.Value, 0, drScan("PromotionId"))
                drSOPackDtl("OfferNo") = IIf(drScan("PromotionId") = "0,0", 0, drScan("PromotionId"))
                If doctype Then
                    drSOPackDtl("TransactionCode") = drSOPackDtl("TransactionCode")
                Else
                    drSOPackDtl("TransactionCode") = vDocType
                End If
                drSOPackDtl("IsCLPApplicable") = drScan("IsCLP")
                drSOPackDtl("CLPPoints") = CDbl(IIf(drScan("CLPPoints") Is DBNull.Value, 0, drScan("CLPPoints")))
                drSOPackDtl("CLPDiscount") = CDbl(IIf(drScan("CLPDiscount") Is DBNull.Value, 0, drScan("CLPDiscount")))

                drSOPackDtl("LineDiscount") = drScan("LineDiscount")
                drSOPackDtl("DiscountAmount") = CDbl(IIf(drScan("LineDiscount") Is DBNull.Value, 0, drScan("LineDiscount"))) + CDbl(IIf(drSOPackDtl("CLPDiscount") Is DBNull.Value, 0, drSOPackDtl("CLPDiscount")))
                'drSOPackDtl("DiscountPercentage") = drScan("TotalDiscPercentage")
                drSOPackDtl("DiscountPercentage") = drScan("DiscountPercentage") 'TotalDiscPercentage old
                drSOPackDtl("UnitofMeasure") = IIf(drScan("UnitofMeasure") Is DBNull.Value, 0, drScan("UnitofMeasure"))
                drSOPackDtl("ExclTaxAmt") = drScan("ExclTaxAmt")
                'drSODtl("TotalTaxAmount") = Math.Round(IIf(drScan("ExclTaxAmt") Is DBNull.Value, 0, drScan("ExclTaxAmt")) + IIf(drScan("IncTaxAmt") Is DBNull.Value, 0, drScan("IncTaxAmt")), 3)
                drSOPackDtl("TotalTaxAmount") = Math.Round(IIf(drScan("TotalTaxAmount") Is DBNull.Value, 0, drScan("TotalTaxAmount")), 3)
                'TotalTaxAmt

                If drScan("SalesStaffID") Is DBNull.Value Or drScan("SalesStaffID").ToString() = "" Then
                    drSOPackDtl("SalesStaffID") = "" 'IIf(CtrlSalesPersons.SelectedIndex < 0, "", CtrlSalesPersons.CtrlSalesPersons.SelectedValue)
                End If
                drSOPackDtl("SalesReturnReasonCode") = DBNull.Value
                drSOPackDtl("ReturnSaleOrderNo") = DBNull.Value
                drSOPackDtl("ReturnSaleOrderDt") = DBNull.Value
                drSOPackDtl("ReturnQty") = DBNull.Value




                'drSOPackDtl("PackagingBoxCode") = drScan("PackagingBoxCode")
                drSOPackDtl("PckgSize") = drScan("PckgSize")
                drSOPackDtl("PckgType") = drScan("PckgType")
                drSOPackDtl("PckgMaterial") = drScan("PckgMaterial")
                drSOPackDtl("PckgQty") = drScan("PckgQty")
                drSOPackDtl("IsHeader") = drScan("IsHeader")
                drSOPackDtl("IsCombo") = drScan("IsCombo")
                'drSOPackDtl("IsStatus") = drScan("IsStatus")

                drSOPackDtl("Quantity") = drScan("Quantity")  'drScan("Quantity")
                If Not IsBookingEdit Then
                    drSOPackDtl("DeliveredQty") = IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty")) + drScan("PickUpQty")
                ElseIf IsBookingEdit Then
                    '' added By ketan PC issue Generate Barcode Every Time
                    'If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                    drSOPackDtl("DeliveredQty") = IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty"))
                    'Else
                    '    drSOPackDtl("DeliveredQty") = IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty")) + drScan("PickUpQty")
                    'End If
                End If


                'If Not drScan("ReservedQty") Is DBNull.Value AndAlso drScan("ReservedQty") = True AndAlso drScan("Quantity") > drScan("PickUpQty") Then
                If Not drScan("ReservedQty") Is DBNull.Value AndAlso drScan("ReservedQty") = True Then
                    Dim otherSiteDeliveryQty As Decimal = 0 'SoDeliveryInfo.Sum(Function(x) IIf(x.ArticleCode = drScan("ArticleCode").ToString(), x.Quantity, 0))
                    drSOPackDtl("ReservedQty") = CDbl(drScan("Quantity")) - CDbl(drScan("PickUpQty")) - otherSiteDeliveryQty

                Else
                    drSOPackDtl("ReservedQty") = 0

                End If

                'drSOPackDtl("CostAmount") = CostAmount  'drScan("CostAmount") 'DBNull.Value
                'drSOPackDtl("GrossAmount") = GrossAmount  'Math.Round(drScan("GrossAmt"), 3)
                'drSOPackDtl("NetAmount") = NetAmount 'Math.Round(drScan("NetAmount"), 3)




                drSOPackDtl("UPDATEDAT") = vSiteCode
                drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                drSOPackDtl("STATUS") = drScan("STATUS")


                If IsNewRow = True Then
                    drSOPackDtl("CREATEDAT") = vSiteCode
                    drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                    dsMain.Tables("SOItemPackagingBoxDtl").Rows.Add(drSOPackDtl)
                    IsNewRow = False
                End If
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Packaging Variations delivery data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PreparePackageVariationDeliveryDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""
        Dim drSOPackDtl As DataRow
        Dim findKey(5) As Object
        ''---- Code Added By Mahesh for Bulk Combo ----

        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            If UpdateSODeliveryGridData() Then
                For Each drScan As DataRow In dsPackagingDelivery.Tables("PackagingDelivery").Rows


                    If drScan("Quantity") > 0 Then

                        'Dim billLineNo As Integer = drScan("SrNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                        findKey(0) = vSiteCode
                        findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                        findKey(2) = CtrlTxtOrderNo.Text
                        ' findKey(3) = drScan("EAN").ToString
                        findKey(3) = drScan("BillLineNo")
                        findKey(4) = drScan("pkgLineNo")
                        findKey(5) = drScan("deliverylineno")
                        drSOPackDtl = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Find(findKey)

                        If drSOPackDtl Is Nothing Then
                            drSOPackDtl = dsMain.Tables("SOPackagingBoxDeliveryDtl").NewRow()
                            IsNewRow = True
                        End If
                        'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                        drSOPackDtl("BillLineNo") = drScan("BillLineNo")
                        drSOPackDtl("PkgLineNo") = drScan("pkgLineNo")
                        drSOPackDtl("DeliveryLineNo") = drScan("deliverylineno")
                        'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                        '---- NEED to put BillNo in scan table to for print 
                        'drScan("BillLineNo") = billLineNo
                        drSOPackDtl("SrNo") = drScan("SrNo")
                        drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                        drSOPackDtl("SiteCode") = vSiteCode
                        drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                        drSOPackDtl("EAN") = drScan("EAN")
                        drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        drSOPackDtl("IsHeader") = drScan("IsHeader")
                        drSOPackDtl("IsCombo") = drScan("IsCombo")

                        drSOPackDtl("DeliveryDate") = drScan("DeliveryDate")
                        Dim date1 As Date = drScan("DeliveryDate")
                        date1 = date1.ToShortDateString()
                        Dim time1 As DateTime = drScan("DeliveryTime")
                        time1 = time1.ToShortTimeString()
                        drSOPackDtl("DeliveryTime") = date1 & " " & time1 'drScan("STRTime")



                        drSOPackDtl("IsCustAddress") = drScan("IsCustAddress")  'drScan("Quantity")
                        If Not IsBookingEdit Then
                            If IsNewRow Then
                                drSOPackDtl("DeliveredQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty")) '+ drSOPackDtl("DeliveredQty")
                            Else
                                If Not IsResetRequired Then
                                    drSOPackDtl("DeliveredQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty")) + IIf(drSOPackDtl("DeliveredQty") Is DBNull.Value, 0, drSOPackDtl("DeliveredQty")) 'drSOPackDtl("DeliveredQty")
                                Else
                                    drSOPackDtl("DeliveredQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty")) + IIf(drScan("DeliveredQty") Is DBNull.Value, 0, drScan("DeliveredQty")) 'drSOPackDtl("DeliveredQty")
                                End If

                            End If
                        ElseIf IsBookingEdit Then
                            '' added By Ketan PC Issue Generate Barcode Every Time
                            'If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                            drSOPackDtl("DeliveredQty") = IIf(drSOPackDtl("DeliveredQty") Is DBNull.Value, 0, drSOPackDtl("DeliveredQty")) 'drSOPackDtl("DeliveredQty")
                            'Else

                            '    drSOPackDtl("DeliveredQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty")) + IIf(drSOPackDtl("DeliveredQty") Is DBNull.Value, 0, drSOPackDtl("DeliveredQty"))
                            'End If
                        End If


                        drSOPackDtl("Quantity") = drScan("Quantity")
                        drSOPackDtl("UnitofMeasure") = drScan("UnitofMeasure")
                        drSOPackDtl("DeliveryAddress") = drScan("DeliveryAddress")

                        If drScan("PickUpQty") > 0 Then
                            drSOPackDtl("LastPickUpDateTime") = DateTime.Now
                        End If




                        drSOPackDtl("UPDATEDAT") = vSiteCode
                        drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("STATUS") = IIf(drScan("STATUS") Is DBNull.Value, True, drScan("STATUS"))


                        If IsNewRow = True Then
                            drSOPackDtl("CREATEDAT") = vSiteCode
                            drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                            drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                            dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Add(drSOPackDtl)
                            IsNewRow = False
                        End If
                    End If
                Next

            End If

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    Private Function PreparePackageVariationTempDeliveryDataforSave(ByRef dsMain As DataSet) As Boolean

        Try
            'If UpdateSODeliveryGridData() Then
            strSOStatus = ""
            Dim drSOPackDtl As DataRow
            Dim findKey(5) As Object
            ''---- Code Added By Mahesh for Bulk Combo ----

            'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
            '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
            'End If
            'If dtTempReserved.Tables("SOPackagingBoxDeliveryTempDtl").Rows.Count > 0 Then
            '    For Each dr As DataRow In dtTempReserved.Tables("SOPackagingBoxDeliveryTempDtl").Rows
            '        Dim resulDelivet As DataRow() = dtTempReserved.Tables("SOPackagingBoxDeliveryDtl").Select("pkgLineno ='" & dr("pkgLineno") & "' and deliveryLineno ='" & dr("deliveryLineno") & "'")
            '        If resulDelivet.Length > 0 Then
            '            If resulDelivet(0)("PickUpQty") Then
            '                resulDelivet(0)("PickUpQty") = drTempDeliverys("PickUpQty")
            '                resulDelivet(0)("DeliveredQty") = drTempDeliverys("DeliveredQty")
            '            End If
            '    Next
            'End If
            ''Codition of IsBookingEdit Added by ketan In EditSO booking data was not save in table SOPackagingBoxDeliveryTempDtl 
            If dsMain.Tables("SOPackagingBoxDeliveryTempDtl").Rows.Count > 0 Or IsBookingEdit Then


                For Each drScan As DataRow In dsPackagingDelivery.Tables("PackagingDelivery").Rows


                    If drScan("Quantity") > 0 Then

                        'Dim billLineNo As Integer = drScan("SrNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                        findKey(0) = vSiteCode
                        findKey(1) = vfinancialYear ' clsAdmin.Financialyear
                        findKey(2) = CtrlTxtOrderNo.Text
                        ' findKey(3) = drScan("EAN").ToString
                        findKey(3) = drScan("BillLineNo")
                        findKey(4) = drScan("pkgLineNo")
                        findKey(5) = drScan("deliverylineno")
                        drSOPackDtl = dsMain.Tables("SOPackagingBoxDeliveryTempDtl").Rows.Find(findKey)

                        If drSOPackDtl Is Nothing Then
                            drSOPackDtl = dsMain.Tables("SOPackagingBoxDeliveryTempDtl").NewRow()
                            IsNewRow = True
                        End If
                        'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                        drSOPackDtl("BillLineNo") = drScan("BillLineNo")
                        drSOPackDtl("PkgLineNo") = drScan("pkgLineNo")
                        drSOPackDtl("DeliveryLineNo") = drScan("deliverylineno")
                        'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                        '---- NEED to put BillNo in scan table to for print 
                        'drScan("BillLineNo") = billLineNo
                        drSOPackDtl("SrNo") = drScan("SrNo")
                        drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                        drSOPackDtl("SiteCode") = vSiteCode
                        drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                        drSOPackDtl("EAN") = drScan("EAN")
                        drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        drSOPackDtl("IsHeader") = drScan("IsHeader")
                        drSOPackDtl("IsCombo") = drScan("IsCombo")

                        drSOPackDtl("DeliveryDate") = drScan("DeliveryDate")
                        Dim date1 As Date = drScan("DeliveryDate")
                        date1 = date1.ToShortDateString()
                        Dim time1 As DateTime = drScan("DeliveryTime")
                        time1 = time1.ToShortTimeString()
                        drSOPackDtl("DeliveryTime") = date1 & " " & time1 'drScan("STRTime")

                        'drSOPackDtl("DeliveryTime") = drScan("DeliveryTime")



                        drSOPackDtl("IsCustAddress") = drScan("IsCustAddress")  'drScan("Quantity")
                        If IsNewRow = False AndAlso Not IsBookingEdit Then
                            If drSOPackDtl("PickupQty") >= drScan("PickupQty") Then
                                drSOPackDtl("PickupQty") = drSOPackDtl("PickupQty") - IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))
                            Else
                                drSOPackDtl("PickupQty") = 0
                            End If
                            drSOPackDtl("DeliveredQty") = drSOPackDtl("DeliveredQty") + drScan("PickupQty")
                        ElseIf Not IsBookingEdit AndAlso IsNewRow Then
                            drSOPackDtl("PickupQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))
                            drSOPackDtl("DeliveredQty") = 0
                        End If
                        If IsBookingEdit AndAlso IsNewRow Then
                            drSOPackDtl("PickupQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))
                            drSOPackDtl("DeliveredQty") = 0
                        ElseIf IsBookingEdit AndAlso Not IsNewRow Then
                            '' added By Ketan PC Issue Generate Barcode Every Time
                            ' If Not (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then
                            drSOPackDtl("PickupQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))
                            'Else
                            '    drSOPackDtl("DeliveredQty") = drSOPackDtl("DeliveredQty") + IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))
                            If IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty")) = 0 Then
                                drSOPackDtl("PickupQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))
                            End If
                            'End If
                            'drSOPackDtl("PickupQty") = IIf(drScan("PickUpQty") Is DBNull.Value, 0, drScan("PickUpQty"))

                        End If
                        'drSOPackDtl("DeliveredQty") = drScan("DeliveredQty")


                        drSOPackDtl("Quantity") = drScan("Quantity")
                        drSOPackDtl("UnitofMeasure") = drScan("UnitofMeasure")
                        drSOPackDtl("DeliveryAddress") = drScan("DeliveryAddress")

                        If drScan("PickUpQty") > 0 Then
                            drSOPackDtl("LastPickUpDateTime") = DateTime.Now
                        End If


                        drSOPackDtl("CREATEDAT") = vSiteCode
                        drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("UPDATEDAT") = vSiteCode
                        drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("STATUS") = True


                        If IsNewRow = True Then
                            dsMain.Tables("SOPackagingBoxDeliveryTempDtl").Rows.Add(drSOPackDtl)
                            IsNewRow = False
                        End If
                    End If
                Next
            End If
            Return True
            'End If


        Catch ex As Exception
            IsNewRow = False
            LogException(ex)
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Combo Header data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareComboHeaderDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""
        Dim drSOComboHdr As DataRow
        Dim findKey(3) As Object
        ''---- Code Added By Mahesh for Bulk Combo ----

        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            For Each drScan As DataRow In DtSoBulkComboHdr.Rows   'dsPackagingDelivery.Tables("PackagingDelivery").Rows


                Dim billLineNo As Integer = drScan("ComboSrNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                findKey(0) = CtrlTxtOrderNo.Text
                findKey(1) = vSiteCode
                findKey(2) = vfinancialYear 'clsAdmin.Financialyear
                findKey(3) = drScan("ComboSrNo").ToString


                drSOComboHdr = dsMain.Tables("SalesOrderBulkComboHdr").Rows.Find(findKey)

                If drSOComboHdr Is Nothing Then
                    drSOComboHdr = dsMain.Tables("SalesOrderBulkComboHdr").NewRow()
                    IsNewRow = True
                End If
                'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                drSOComboHdr("ComboSrNo") = drScan("ComboSrNo")

                'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                '---- NEED to put BillNo in scan table to for print 
                'drScan("BillLineNo") = billLineNo

                drSOComboHdr("SaleOrderNumber") = CtrlTxtOrderNo.Text
                drSOComboHdr("SiteCode") = vSiteCode
                drSOComboHdr("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                drSOComboHdr("PackagingBoxName") = drScan("PackagingBoxPrintName")
                drSOComboHdr("PackagingBoxCode") = drScan("PackagingBoxCode")
                drSOComboHdr("AdditionComments") = drScan("AdditionComments")




                drSOComboHdr("UPDATEDAT") = vSiteCode
                drSOComboHdr("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drSOComboHdr("UPDATEDON") = objComn.GetCurrentDate
                drSOComboHdr("STATUS") = drScan("STATUS")
                drSOComboHdr("IsFixedPrice") = drScan("IsFixedPrice") 'vipin

                If IsNewRow = True Then
                    drSOComboHdr("CREATEDAT") = vSiteCode
                    drSOComboHdr("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOComboHdr("CREATEDON") = objComn.GetCurrentDate
                    dsMain.Tables("SalesOrderBulkComboHdr").Rows.Add(drSOComboHdr)
                    IsNewRow = False
                End If
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function

    ''' <summary>
    ''' Preapring the Sales Order Combo detail data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareComboDetailDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""
        Dim drSOComboDtl As DataRow
        Dim findKey(4) As Object
        ''---- Code Added By Mahesh for Bulk Combo ----

        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            For Each drScan As DataRow In DtSoBulkComboDtl.Rows   'dsPackagingDelivery.Tables("PackagingDelivery").Rows


                Dim billLineNo As Integer = drScan("ComboSrNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                findKey(0) = CtrlTxtOrderNo.Text
                findKey(1) = vSiteCode
                findKey(2) = vfinancialYear 'clsAdmin.Financialyear
                findKey(3) = drScan("ComboSrNo").ToString
                findKey(4) = drScan("Ean").ToString


                drSOComboDtl = dsMain.Tables("SalesOrderBulkComboDtl").Rows.Find(findKey)

                If drSOComboDtl Is Nothing Then
                    drSOComboDtl = dsMain.Tables("SalesOrderBulkComboDtl").NewRow()
                    IsNewRow = True
                End If
                'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                drSOComboDtl("ComboSrNo") = drScan("ComboSrNo")

                'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                '---- NEED to put BillNo in scan table to for print 
                'drScan("BillLineNo") = billLineNo

                drSOComboDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                drSOComboDtl("SiteCode") = vSiteCode
                drSOComboDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                drSOComboDtl("ean") = drScan("ean")
                drSOComboDtl("ARTICLECODE") = drScan("ARTICLECODE")
                drSOComboDtl("ArticleDescription") = drScan("ArticleDescription")
                drSOComboDtl("PackagedUOM") = drScan("PackagedUOM")
                drSOComboDtl("Qty") = drScan("Qty")
                drSOComboDtl("Weight") = drScan("Weight")
                drSOComboDtl("STRQty") = drScan("STRQty")
                If clsDefaultConfiguration.IsNewSalesOrder Then   ''' added by nikhil
                    drSOComboDtl("Price") = drScan("Price")
                    '   drSOComboDtl("Discount") = drScan("Discount")  '' $$ added by nikhil on 18/08/17
                    drSOComboDtl("Tax") = drScan("Tax")
                    ' drSOComboDtl("TaxAmount") = drScan("TaxAmount")
                    Dim cmb As DataRow() = _dsPackagingVar.Tables(0).Select("billlineno='" + drScan("ComboSrNo").ToString() + "'And IsHeader = true")
                    Dim DrCOmboHdr As DataRow() = dsMain.Tables("SalesOrderBulkComboHDR").Select("ComboSrno ='" + drScan("ComboSrNo").ToString() + "'")
                    Dim DrCount As Integer = DtSoBulkComboDtl.Compute("Count(ComboSrNo)", "ComboSrno ='" + drScan("ComboSrNo").ToString() + "'")
                    If DrCOmboHdr.Length > 0 Then
                        If DrCOmboHdr(0)("IsFixedPrice") = True Then
                            drSOComboDtl("Discount") = (cmb(0)("LineDiscount") / cmb(0)("Quantity")) / (DrCount)
                        Else
                            ' drSOComboDtl("Discount") = ((drScan("Qty") * drScan("Price") / cmb(0)("SellingPrice")) * cmb(0)("Discount")) / cmb(0)("Quantity") 'vipin 20.02.2018 Discount n ot saving in SaleorderbulkComboDtl .Mantis-2884
                            drSOComboDtl("Discount") = ((drScan("Qty") * drScan("Price") / cmb(0)("SellingPrice")) * cmb(0)("LineDiscount")) / cmb(0)("Quantity")
                        End If
                    End If
                    drSOComboDtl("TaxAmount") = Math.Round((CDbl(drScan("Price") * drScan("Qty")) - drSOComboDtl("Discount")) * CDbl(drScan("Tax")) / 100, 2)
                End If
                drSOComboDtl("StrExcludeCheck") = drScan("StrExcludeCheck")
                drSOComboDtl("BaseUOM") = drScan("BaseUOM")
                drSOComboDtl("ItemQtyBaseUOM") = drScan("ItemQtyBaseUOM")



                drSOComboDtl("UPDATEDAT") = vSiteCode
                drSOComboDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drSOComboDtl("UPDATEDON") = objComn.GetCurrentDate
                'aDDED By Prasad
                'drSOComboDtl("STATUS") = True
                drSOComboDtl("STATUS") = IIf(drScan("STATUS") Is DBNull.Value, Nothing, drScan("STATUS"))

                If IsNewRow = True Then
                    drSOComboDtl("CREATEDAT") = vSiteCode
                    drSOComboDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOComboDtl("CREATEDON") = objComn.GetCurrentDate
                    dsMain.Tables("SalesOrderBulkComboDtl").Rows.Add(drSOComboDtl)
                    IsNewRow = False
                End If
            Next
            For Each updateStatus In dsMain.Tables("SalesOrderBulkComboDtl").Rows
                Dim DrISRowPresent = DtSoBulkComboDtl.Select("ComboSrNo ='" + updateStatus("ComboSrNo").ToString + "' and " + "ArticleCode ='" + updateStatus("ArticleCode") + "'and " + "EAN='" + updateStatus("EAN") + "'")
                If DrISRowPresent.Length > 0 Then
                Else
                    updateStatus("Status") = 0
                End If
            Next

            'addedby vipin for Delete Combo Article status to Zero.
            For Each updateStatus In dsMain.Tables("SalesOrderBulkComboDtl").Rows
                Dim DrISRowPresent = DtSoBulkComboDtl.Select("ComboSrNo ='" + updateStatus("ComboSrNo").ToString + "' and " + "ArticleCode ='" + updateStatus("ArticleCode") + "'and " + "EAN='" + updateStatus("EAN") + "'")
                If DrISRowPresent.Length > 0 Then
                Else
                    updateStatus("Status") = 0
                End If
            Next
            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order STR data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareSOSTRtDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""

        Dim findKey(3) As Object
        Dim drSOPackDtl As DataRow


        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            If dtBaseStr.Rows.Count > 0 Then
                dtFactoryTbl = New DataSet
                dtFactoryTbl = objPCSO.GetFactoryNodeCodes()

            End If


            For Each drScan As DataRow In DtSOStr.Rows
                ' If drScan("PickUpQty") > 0 AndAlso drScan("Discount") Then



                Dim billLineNo As Integer = drScan("strindex") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                findKey(0) = vSiteCode
                findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                findKey(2) = CtrlTxtOrderNo.Text
                findKey(3) = drScan("STRIndex").ToString

                drSOPackDtl = dsMain.Tables("SalesOrderStrDetails").Rows.Find(findKey)

                If drSOPackDtl Is Nothing Then
                    drSOPackDtl = dsMain.Tables("SalesOrderStrDetails").NewRow()
                    IsNewRow = True
                End If

                drSOPackDtl("STRIndex") = drScan("STRIndex")
                drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                drSOPackDtl("SiteCode") = vSiteCode
                drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                drSOPackDtl("EAN") = drScan("EAN")

                drSOPackDtl("ArticleCode") = drScan("ArticleCode")


                drSOPackDtl("ArticleDiscription") = drScan("Discription")

                drSOPackDtl("QtyPerBox") = drScan("QtyPerBox")
                drSOPackDtl("WtPerPiece") = drScan("WtPerPiece")


                drSOPackDtl("WtPerBox") = drScan("WtPerBox")
                drSOPackDtl("STRUOM") = drScan("STRUOM")
                If drScan("IsImageReq") = "1" Then
                    drSOPackDtl("IsHeader") = True
                Else
                    drSOPackDtl("IsHeader") = False
                End If
                drSOPackDtl("SrNo") = drScan("SrNo")
                drSOPackDtl("DeliveryIndex") = drScan("DeliveryIndex")
                drSOPackDtl("IsCombo") = drScan("IsCombo")
                drSOPackDtl("STRQuantity") = IIf(drScan("STRQty") Is DBNull.Value, 0, drScan("STRQty"))
                drSOPackDtl("STRDate") = drScan("STRDate")
                Dim date1 As Date
                Dim time1 As DateTime
                If drSOPackDtl("STRQuantity") = 0 Then
                    Dim dr() = DtSOStr.Select("STRQty>0")
                    If dr.Count > 0 Then
                        date1 = dr(0)("STRDate")
                        date1 = date1.ToShortDateString()
                        time1 = dr(0)("STRTime")
                        time1 = time1.ToShortTimeString()
                        drSOPackDtl("STRDate") = dr(0)("STRDate")
                    Else
                        date1 = Date.Now
                        date1 = date1.ToShortDateString()
                        time1 = Date.Now
                        time1 = time1.ToShortTimeString()
                    End If
                Else
                    date1 = drScan("STRDate")
                    date1 = date1.ToShortDateString()
                    time1 = drScan("STRTime")
                    time1 = time1.ToShortTimeString()
                End If
                drSOPackDtl("STRTime") = date1 & " " & time1 'drScan("STRTime")

                '''chceck str start
                ''' 
                '    If drScan("Status") = True Then
                If drScan("sortindex") Is DBNull.Value Then
                    Dim resultDateStrs As DataRow() = dtBaseStr.Select("strdate='" + drSOPackDtl("STRDate").ToString + "' and strtime='" + drSOPackDtl("STRTime").ToString() + "'")
                    For i As Integer = 0 To resultDateStrs.Length - 1
                        Dim resultoldFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + drScan("articlecode").ToString() + "'")
                        Dim resultnewFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + resultDateStrs(i)("articlecode").ToString() + "'")
                        If resultoldFactorynodecode.Length > 0 AndAlso resultnewFactorynodecode.Length > 0 Then
                            Dim resultoldFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultoldFactorynodecode(0)("lastnodecode").ToString() + "'")
                            Dim resultnewFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultnewFactorynodecode(0)("lastnodecode").ToString() + "'")
                            If resultoldFactorynodecodecheck.Length > 0 AndAlso resultnewFactorynodecodecheck.Length > 0 Then
                                If resultoldFactorynodecodecheck(0)("Factory").ToString() = resultnewFactorynodecodecheck(0)("Factory").ToString() Then
                                    If Not strNumbers.Contains(resultDateStrs(i)("strnumber")) Then
                                        strNumbers.Add((resultDateStrs(i)("strnumber")))
                                    End If
                                End If
                            End If
                        End If
                    Next
                Else
                    Dim result As DataRow() = dtBaseStr.Select("strindex='" + drScan("strindex").ToString() + "'")

                    If result.Length > 0 Then
                        Dim dt As DateTime = Convert.ToDateTime(drSOPackDtl("STRDate"))

                        If result(0)("STRDate") <> drSOPackDtl("STRDate") Or result(0)("STRQuantity") <> drScan("STRQty") Or drScan("Status") = False Or result(0)("STRTime") <> drSOPackDtl("STRTime") Then
                            If Not strNumbers.Contains(result(0)("strnumber")) Then
                                strNumbers.Add(result(0)("strnumber"))
                            End If

                            Dim resultDateStrs As DataRow() = dtBaseStr.Select("strdate='" + result(0)("STRDate").ToString() + "' and strtime='" + result(0)("STRTime").ToString() + "'")
                            For i As Integer = 0 To resultDateStrs.Length - 1
                                Dim resultoldFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + drScan("articlecode").ToString() + "'")
                                Dim resultnewFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + resultDateStrs(i)("articlecode").ToString() + "'")
                                If resultoldFactorynodecode.Length > 0 AndAlso resultnewFactorynodecode.Length > 0 Then
                                    Dim resultoldFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultoldFactorynodecode(0)("lastnodecode").ToString() + "'")
                                    Dim resultnewFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultnewFactorynodecode(0)("lastnodecode").ToString() + "'")
                                    If resultoldFactorynodecodecheck.Length > 0 AndAlso resultnewFactorynodecodecheck.Length > 0 Then
                                        If resultoldFactorynodecodecheck(0)("Factory").ToString() = resultnewFactorynodecodecheck(0)("Factory").ToString() Then
                                            If Not strNumbers.Contains(resultDateStrs(i)("strnumber")) Then
                                                strNumbers.Add((resultDateStrs(i)("strnumber")))
                                            End If
                                        End If
                                    End If
                                End If
                            Next

                            '---check for same date and time with current dtsostr table if it is pressent and with same factory it will close means it will add in list
                            If drScan("STRQTy") <> 0 Then
                                Dim resultNextDateStrs As DataRow() = DtSOStr.Select("strdate='" + drSOPackDtl("STRDate").ToString() + "' and strtime='" + drSOPackDtl("STRTime").ToString() + "'")
                                For i As Integer = 0 To resultNextDateStrs.Length - 1
                                    Dim resultoldFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + drScan("articlecode").ToString() + "'")
                                    Dim resultnewFactorynodecode As DataRow() = dtFactoryTbl.Tables(1).Select("articlecode='" + resultNextDateStrs(i)("articlecode").ToString() + "'")
                                    If resultoldFactorynodecode.Length > 0 AndAlso resultnewFactorynodecode.Length > 0 Then
                                        Dim resultoldFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultoldFactorynodecode(0)("lastnodecode").ToString() + "'")
                                        Dim resultnewFactorynodecodecheck As DataRow() = dtFactoryTbl.Tables(0).Select("nodecode='" + resultnewFactorynodecode(0)("lastnodecode").ToString() + "'")
                                        If resultoldFactorynodecodecheck.Length > 0 AndAlso resultnewFactorynodecodecheck.Length > 0 Then
                                            If resultoldFactorynodecodecheck(0)("Factory").ToString() = resultnewFactorynodecodecheck(0)("Factory").ToString() Then
                                                Dim NextSTRDateresult As DataRow() = dtBaseStr.Select("strindex='" + resultNextDateStrs(i)("strindex").ToString() + "'")
                                                If Not strNumbers.Contains(NextSTRDateresult(0)("strnumber")) Then
                                                    strNumbers.Add((NextSTRDateresult(0)("strnumber")))
                                                End If
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        End If

                    End If
                End If
                ' End If

                '''check str end


                drSOPackDtl("UPDATEDAT") = vSiteCode
                drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                drSOPackDtl("STATUS") = drScan("STATUS")


                If IsNewRow = True Then
                    drSOPackDtl("CREATEDAT") = vSiteCode
                    drSOPackDtl("StrNumber") = ""
                    drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                    dsMain.Tables("SalesOrderStrDetails").Rows.Add(drSOPackDtl)
                    IsNewRow = False
                End If

                'End If
            Next
            If strNumbers.Count > 0 Then
                For i = 0 To strNumbers.Count - 1

                    vSTRList &= strNumbers(i) & ","

                Next
                If vSTRList <> "" Then
                    If vSTRList.LastIndexOf(",") Then
                        vSTRList = vSTRList.Substring(0, vSTRList.Length - 1)
                    End If
                End If
            End If
            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Discount data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareSODiscountEditDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""
        pickupWiseDetails()
        Dim findKey(5) As Object
        Dim drSOPackDtl As DataRow


        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            Dim srno As Integer = 1
            Dim dtDiscDtl As New DataTable
            dtDiscDtl = objPCSO.GetPickUpDiscDetail(vSalesNo, clsAdmin.SiteCode)
            For Each drScan As DataRow In dsPackagingVar.Tables("PackagingMaterial").Rows
                If drScan("PickUpQty") > 0 Then 'Discount old 'AndAlso drScan("LineDiscount")

                    Dim drPickupDetail As DataRow() = dtpickupDetail.Select("BillLineNo='" + drScan("BillLineNo").ToString() + "'AND PkgLineNo='" + drScan("PkgLineNo").ToString() + "'")


                    If (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then



                        Dim billLineNo As Integer = drScan("billLineNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                        findKey(0) = vSiteCode
                        findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                        findKey(2) = CtrlTxtOrderNo.Text
                        'findKey(3) = drScan("EAN").ToString
                        findKey(3) = drScan("billLineNo")
                        findKey(4) = drScan("pkgLineNo")
                        findKey(5) = 0
                        drSOPackDtl = dsMain.Tables("SOPackagingDiscDtl").Rows.Find(findKey)

                        If drSOPackDtl Is Nothing Then
                            drSOPackDtl = dsMain.Tables("SOPackagingDiscDtl").NewRow()
                            IsNewRow = True
                        End If
                        'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                        drSOPackDtl("BillLineNo") = drScan("billLineNo")
                        drSOPackDtl("PkgLineNo") = drScan("pkgLineNo")
                        'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                        '---- NEED to put BillNo in scan table to for print 
                        'drScan("BillLineNo") = billLineNo
                        drSOPackDtl("SrNo") = MaxDiscNo
                        drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                        drSOPackDtl("SiteCode") = vSiteCode
                        drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                        drSOPackDtl("EAN") = drScan("EAN")
                        If drScan("ArticleType").ToString() = "Combo" Then
                            Dim result As DataRow() = dtPackagingBox.Select("ArticleShortName='" + drScan("PckgMaterial").ToString() + "'")
                            If result.Length > 0 Then
                                drSOPackDtl("ArticleCode") = result(0)("ArticleCode")
                                'drSOPackDtl("BaseUnitofMeasure") = result(0)("BaseUnitofMeasure")
                            Else
                                drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                            End If
                        Else
                            drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        End If

                        Dim resultDisc As DataRow() = dtDiscDtl.Select("EAN='" + drScan("EAN").ToString() + "'")


                        drSOPackDtl("PickUpQuantity") = drScan("PickUpQty")

                        'drSOPackDtl("DiscountAmount") = (drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty")
                        'drSOPackDtl("DiscountPer") = ((drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("Discount")) * 100

                        '$$ Added by ketan PC chnages 
                        If drPickupDetail.Length > 0 Then
                            If IIf(drPickupDetail(0)("LineDiscount") Is DBNull.Value, 0, drPickupDetail(0)("LineDiscount")) > 0 Then '' By ketan handel DB Null
                                drSOPackDtl("DiscountAmount") = drPickupDetail(0)("LineDiscount")
                            Else
                                drSOPackDtl("DiscountAmount") = 0
                            End If
                        Else
                            drSOPackDtl("DiscountAmount") = 0
                        End If
                        'drSOPackDtl("DiscountAmount") = (drScan("LineDiscount") / drScan("Quantity")) * drScan("PickUpQty")
                        'drSOPackDtl("DiscountPer") = ((drScan("LineDiscount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("LineDiscount")) * 100
                        'If dsPackagingVar.Tables(0).Compute("Sum(Discount)", "") > 0 Then
                        '    drSOPackDtl("DiscountPer") = ((drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("Discount")) * 100
                        'Else
                        drSOPackDtl("DiscountPer") = drScan("TotalDiscPercentage")


                        'drSOPackDtl("DiscountAmount") = (drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty")
                        'drSOPackDtl("DiscountPer") = ((drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("Discount")) * 100

                        'drSOPackDtl("DiscountPer") = ((drScan("LineDiscount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("LineDiscount")) * 100
                        'If dsPackagingVar.Tables(0).Compute("Sum(Discount)", "") > 0 Then
                        '    drSOPackDtl("DiscountPer") = ((drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("Discount")) * 100
                        'Else

                        'End If

                        drSOPackDtl("CREATEDAT") = vSiteCode
                        drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("UPDATEDAT") = vSiteCode
                        drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("STATUS") = True


                        If IsNewRow = True Then
                            dsMain.Tables("SOPackagingDiscDtl").Rows.Add(drSOPackDtl)
                            IsNewRow = False
                            MaxDiscNo = MaxDiscNo + 1
                        End If
                        srno = srno + 1
                    End If
                End If
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Discount data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareSODiscountDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""

        Dim findKey(5) As Object
        Dim drSOPackDtl As DataRow


        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            Dim srno As Integer = 1
            Dim dtDiscDtl As New DataTable
            dtDiscDtl = objPCSO.GetPickUpDiscDetail(vSalesNo, clsAdmin.SiteCode)
            For Each drScan As DataRow In dtSOReturn.Rows
                If drScan("PickUpQty") > 0 Then 'Discount old 'AndAlso drScan("LineDiscount")



                    Dim billLineNo As Integer = drScan("billLineNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                    findKey(0) = vSiteCode
                    findKey(1) = clsAdmin.Financialyear
                    findKey(2) = CtrlTxtOrderNo.Text
                    ' findKey(3) = drScan("EAN").ToString
                    findKey(3) = drScan("billLineNo")
                    findKey(4) = drScan("pkgLineNo")
                    findKey(5) = 0
                    drSOPackDtl = dsMain.Tables("SOPackagingDiscDtl").Rows.Find(findKey)

                    If drSOPackDtl Is Nothing Then
                        drSOPackDtl = dsMain.Tables("SOPackagingDiscDtl").NewRow()
                        IsNewRow = True
                    End If
                    'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                    drSOPackDtl("BillLineNo") = drScan("billLineNo")
                    drSOPackDtl("PkgLineNo") = drScan("pkgLineNo")
                    'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                    '---- NEED to put BillNo in scan table to for print 
                    'drScan("BillLineNo") = billLineNo
                    drSOPackDtl("SrNo") = MaxDiscNo
                    drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                    drSOPackDtl("SiteCode") = vSiteCode
                    drSOPackDtl("FinYear") = clsAdmin.Financialyear
                    drSOPackDtl("EAN") = drScan("EAN")
                    If drScan("ArticleType").ToString() = "Combo" Then
                        Dim result As DataRow() = dtPackagingBox.Select("ArticleShortName='" + drScan("PackagingMaterial").ToString() + "'")
                        If result.Length > 0 Then
                            drSOPackDtl("ArticleCode") = result(0)("ArticleCode")
                            'drSOPackDtl("BaseUnitofMeasure") = result(0)("BaseUnitofMeasure")
                        Else
                            drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        End If
                    Else
                        drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                    End If

                    Dim resultDisc As DataRow() = dtDiscDtl.Select("EAN='" + drScan("EAN").ToString() + "'")


                    drSOPackDtl("PickUpQuantity") = -1 * drScan("PickUpQty")
                    If resultDisc.Length > 0 Then
                        drSOPackDtl("DiscountAmount") = -1 * (resultDisc(0)("ReturnAmt") * drScan("PickUpQty"))
                    Else
                        drSOPackDtl("DiscountAmount") = 0
                    End If
                    drSOPackDtl("DiscountPer") = 0

                    'drSOPackDtl("DiscountAmount") = (drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty")
                    'drSOPackDtl("DiscountPer") = ((drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("Discount")) * 100

                    'drSOPackDtl("DiscountPer") = ((drScan("LineDiscount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("LineDiscount")) * 100
                    'If dsPackagingVar.Tables(0).Compute("Sum(Discount)", "") > 0 Then
                    '    drSOPackDtl("DiscountPer") = ((drScan("Discount") / drScan("Quantity")) * drScan("PickUpQty") / drScan("Discount")) * 100
                    'Else

                    'End If

                    drSOPackDtl("CREATEDAT") = vSiteCode
                    drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("UPDATEDAT") = vSiteCode
                    drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("STATUS") = True


                    If IsNewRow = True Then
                        dsMain.Tables("SOPackagingDiscDtl").Rows.Add(drSOPackDtl)
                        IsNewRow = False
                        MaxDiscNo = MaxDiscNo + 1
                    End If
                    srno = srno + 1
                End If
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Invoice data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    ''' <summary>
    ''' Preapring the Sales Order Invoice data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareInvcDataforSave(ByRef dsMain As DataSet) As Boolean
        Try
            '---Add by rama, so that no old data updated once again
            dsMain.Tables("SalesInvoice").Clear()
            '---
            If Not (dsPayment Is Nothing) AndAlso dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
                'vSalesInvcNo = "CM" & clsAdmin.TerminalID & objComn.getDocumentNo("CM")

                If OnlineConnect = True Then
                    'Changed by Rohit to generate Document No. for proper sorting
                    Try
                        ' vSalesInvcNo = "CM" & clsAdmin.TerminalID & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                        vSalesInvcNo = "C" & clsAdmin.TerminalID.Substring(clsAdmin.TerminalID.Trim.Length - 2, 2) & clsAdmin.SiteCode.Substring(clsAdmin.SiteCode.Trim.Length - 3, 3) & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                        vSalesInvcNo = GenDocNo(vSalesInvcNo, 15, objComn.getDocumentNo("CM", clsAdmin.SiteCode))
                    Catch ex As Exception
                        'vSalesInvcNo = "CM" & clsAdmin.TerminalID & objComn.getDocumentNo("CM", clsAdmin.SiteCode)
                        vSalesInvcNo = "C" & clsAdmin.TerminalID.Substring(clsAdmin.TerminalID.Trim.Length - 2, 2) & clsAdmin.SiteCode.Substring(clsAdmin.SiteCode.Trim.Length - 3, 3) & objComn.getDocumentNo("CM", clsAdmin.SiteCode)
                    End Try

                    Try
                        rbnLStatus.SmallImage = Spectrum.My.Resources.connected1.ToBitmap
                        rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus2")
                    Catch ex As Exception

                    End Try
                    'End Change by Rohit
                Else
                    'Changed by Rohit to generate Document No. for proper sorting
                    Try
                        vSalesInvcNo = "OCM" & clsAdmin.TerminalID & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                        vSalesInvcNo = GenDocNo(vSalesInvcNo, 15, objComn.getDocumentNo("CM", clsAdmin.SiteCode))
                    Catch ex As Exception
                        vSalesInvcNo = "OCM" & clsAdmin.TerminalID & objComn.getDocumentNo("CM", clsAdmin.SiteCode)
                    End Try

                    Try
                        rbnLStatus.SmallImage = Spectrum.My.Resources.disconnected1.ToBitmap
                        rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus1")
                    Catch ex As Exception

                    End Try
                    'End Change by Rohit
                End If


                Dim findKey(4) As Object
                Dim drInvc As DataRow

                For Each drPayment As DataRow In dsPayment.Tables("MSTRecieptType").Rows

                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear
                    findKey(2) = CtrlTxtOrderNo.Text
                    findKey(3) = vSalesInvcNo
                    findKey(4) = drPayment("SrNo")

                    drInvc = dsMain.Tables("SalesInvoice").Rows.Find(findKey)
                    If drInvc Is Nothing Then
                        drInvc = dsMain.Tables("SalesInvoice").NewRow()
                        IsNewRow = True
                        IsNextInvoiceNo = True
                    End If

                    drInvc("SiteCode") = vSiteCode
                    'If IsNewRow = False Then
                    '    drInvc("FinYear") = vfinancialYear
                    'Else
                    '    drInvc("FinYear") = clsAdmin.Financialyear
                    'End If
                    drInvc("FinYear") = vfinancialYear

                    drInvc("DocumentNumber") = CtrlTxtOrderNo.Text
                    drInvc("SaleInvNumber") = vSalesInvcNo
                    drInvc("SaleInvLineNumber") = drPayment("SrNo")

                    drInvc("DocumentType") = vDocType
                    drInvc("TerminalID") = vTerminalID
                    drInvc("TenderTypeCode") = drPayment("RecieptTypeCode")
                    drInvc("TenderHeadCode") = drPayment("RecieptType")
                    drInvc("BankAccNo") = drPayment("BankAccNo")
                    ' this amount has to go negative as it is coming negative from payment form so not required below if condidation

                    'If drInvc("TenderTypeCode") = "CreditVouc(I)" Or drInvc("TenderTypeCode") = "Cash(R)" Then
                    '    drInvc("AmountTendered") = CDbl(drPayment("Amount") * -1)
                    'Else
                    '    drInvc("AmountTendered") = drPayment("Amount")
                    'End If

                    drInvc("AmountTendered") = drPayment("Amount")
                    drInvc("ExchangeRate") = drPayment("ExchangeRate")
                    drInvc("CurrencyCode") = drPayment("CurrencyCode")
                    drInvc("SOInvDate") = clsAdmin.DayOpenDate.Date ' vCurrentDate
                    drInvc("SOInvTime") = Format(vCurrentDate, "hh:mm:ss tt")
                    drInvc("UserName") = vUserName

                    drInvc("ManagersKeytoUpdate") = DBNull.Value
                    drInvc("ChangeLine") = DBNull.Value
                    drInvc("RefNo_1") = clsCommon.ConvertToEnglish(IIf(drPayment("AMOUNTINCURRENCY") Is DBNull.Value, 0, drPayment("AMOUNTINCURRENCY"))) 'drPayment("Number")
                    drInvc("RefNo_2") = drPayment("Number")
                    drInvc("RefNo_3") = DBNull.Value
                    drInvc("RefNo_4") = drPayment("RefNo_4") 'vipin
                    ' change to get the cv/gv old redemeeption date
                    'drInvc("RefDate") = vCurrentDate
                    drInvc("RefDate") = drPayment("date")

                    drInvc("CREATEDAT") = vSiteCode
                    drInvc("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drInvc("CREATEDON") = vCurrentDate
                    drInvc("UPDATEDAT") = vSiteCode
                    drInvc("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drInvc("UPDATEDON") = vCurrentDate
                    drInvc("STATUS") = True
                    '  drInvc("PaymentTermName") = drPayment("PaymentTermName")
                    If IsNewRow = True Then
                        dsMain.Tables("SalesInvoice").Rows.Add(drInvc)
                        IsNewRow = False
                    End If
                Next

            End If

            'Added by Rohit for CR - 5938


            'If dsMain.Tables.Contains("CheckDtls") Then
            '    dsMain.Tables.Remove("CheckDtls")
            'End If
            If dsPayment.Tables.Contains("CheckDtls") Then
                Dim dtCheckDtls As New DataTable
                dtCheckDtls = dsPayment.Tables("CheckDtls").Copy
                dtCheckDtls.TableName = "CheckDtls"
                dtCheckDtls.AcceptChanges()
                If Not dsMain.Tables.Contains("CheckDtls") Then
                    dsMain.Tables.Add(dtCheckDtls)
                Else
                    dsMain.Tables("CheckDtls").Merge(dtCheckDtls)
                End If

            End If

            objComn.PrepareCreditCheckData(dsMain, vSiteCode, vUserName, clsAdmin.Financialyear, vDocType, vSalesInvcNo, CtrlTxtOrderNo.Text, vCurrentDate, _dDueDate, _strRemarks, "SO", clsAdmin.DayOpenDate)
            objComn.AddMode(dsMain.Tables("CheckDtls"))

            Return True

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''added by ketan Savoy Outstanding Changes
    Private Function PrepareSaleOrderTermNConditionsSave(ByRef dsMain As DataSet) As Boolean
        Try

            If Not (dsPayment Is Nothing) AndAlso dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
                Dim findKeySOPT(4) As Object
                Dim drSalesOrderPaymentTerm As DataRow
                Dim _srNo As Integer = 1
                If Not dsMain.Tables("SaleOrderTermNConditions") Is Nothing And dsMain.Tables("SaleOrderTermNConditions").Rows.Count > 0 Then
                    _srNo = dsMain.Tables("SaleOrderTermNConditions").Compute("MAX(SrNo)", "") + 1
                End If
                For Each drPayment As DataRow In dsPayment.Tables("MSTRecieptType").Rows
                    'dsMain.Tables("SaleOrderTermNConditions").Clear()
                    If drPayment.Item("RecieptType").Equals("Credit Sales") Then
                        findKeySOPT(0) = vSiteCode
                        findKeySOPT(1) = vfinancialYear 'clsAdmin.Financialyear
                        findKeySOPT(2) = CtrlTxtOrderNo.Text
                        findKeySOPT(3) = vSalesInvcNo

                        findKeySOPT(4) = _srNo
                        drSalesOrderPaymentTerm = dsMain.Tables("SaleOrderTermNConditions").Rows.Find(findKeySOPT)
                        If drSalesOrderPaymentTerm Is Nothing Then
                            drSalesOrderPaymentTerm = dsMain.Tables("SaleOrderTermNConditions").NewRow()
                            IsNewRow = True
                        End If
                        drSalesOrderPaymentTerm("SiteCode") = vSiteCode
                        drSalesOrderPaymentTerm("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                        drSalesOrderPaymentTerm("SaleOrderNumber") = CtrlTxtOrderNo.Text
                        drSalesOrderPaymentTerm("RefInvNumber") = vSalesInvcNo
                        drSalesOrderPaymentTerm("TnCcode") = OrderUpdatePaymentTermId
                        drSalesOrderPaymentTerm("SrNo") = _srNo
                        drSalesOrderPaymentTerm("CREATEDAT") = vSiteCode
                        drSalesOrderPaymentTerm("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        drSalesOrderPaymentTerm("CREATEDON") = objComn.GetCurrentDate
                        drSalesOrderPaymentTerm("UPDATEDAT") = vSiteCode
                        drSalesOrderPaymentTerm("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        drSalesOrderPaymentTerm("UPDATEDON") = objComn.GetCurrentDate
                        drSalesOrderPaymentTerm("STATUS") = True
                        If IsNewRow = True Then
                            dsMain.Tables("SaleOrderTermNConditions").Rows.Add(drSalesOrderPaymentTerm)
                            IsNewRow = False
                        End If
                    End If

                Next

            End If

            'Added by Rohit for CR - 5938


            'If dsMain.Tables.Contains("CheckDtls") Then
            '    dsMain.Tables.Remove("CheckDtls")
            'End If
            If dsPayment.Tables.Contains("CheckDtls") Then
                Dim dtCheckDtls As New DataTable
                dtCheckDtls = dsPayment.Tables("CheckDtls").Copy
                dtCheckDtls.TableName = "CheckDtls"
                dtCheckDtls.AcceptChanges()
                If Not dsMain.Tables.Contains("CheckDtls") Then
                    dsMain.Tables.Add(dtCheckDtls)
                Else
                    dsMain.Tables("CheckDtls").Merge(dtCheckDtls)
                End If

            End If

            objComn.PrepareCreditCheckData(dsMain, vSiteCode, vUserName, clsAdmin.Financialyear, vDocType, vSalesInvcNo, CtrlTxtOrderNo.Text, vCurrentDate, _dDueDate, _strRemarks, "SO", clsAdmin.DayOpenDate)
            objComn.AddMode(dsMain.Tables("CheckDtls"))

            Return True

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
        End Try
    End Function

    ''' <summary>
    ''' Preapring the Sales Order Other Tax data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareOtherTaxDataforSave(ByRef dsMain As DataSet) As Boolean
        Try
            dtOtherCharges.TableName = "SalesOrderOtherCharges"
            If dsMain.Tables.Contains("Table1") Then
                dsMain.Tables("Table1").TableName = "SalesOrderOtherCharges"
            End If
            If dsMain.Tables.Contains("SalesOrderOtherCharges") Then
                dsMain.Tables.Remove("SalesOrderOtherCharges")
                dsMain.Tables.Add(dtOtherCharges)
                TempOtherChargesTable = dtOtherCharges.Copy()
                For Each dr As DataRow In dsMain.Tables("SalesOrderOtherCharges").Rows
                    If dr.RowState <> DataRowState.Deleted Then
                        dr("CREATEDAT") = vSiteCode
                        dr("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        dr("CREATEDON") = vCurrentDate
                        dr("STATUS") = True
                        dr("UpdatedAT") = vSiteCode
                        dr("UpdatedBY") = clsAdmin.UserCode 'vUserName
                        dr("UpdatedON") = vCurrentDate

                    End If
                Next
            End If
            'If Not dsMain.Tables("SalesOrderOtherCharges") Is Nothing AndAlso dsMain.Tables("SalesOrderOtherCharges").Rows.Count <= 0 Then
            '    dsMain.Tables.Remove("SalesOrderOtherCharges")
            'End If
            Return True
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    Private Function PreparSTRFactoryRemarkforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""
        Dim findKey(3) As Object
        Dim drSOPackDtl As DataRow
        'Dim dtSTRFactoryRemark As DataRow
        'Dim dtSTRFactoryRemark As DataTable
        Try
            Dim srno As Integer = 1
            For Each drScan As DataRow In dtSTRFactoryRemark.Rows
                findKey(0) = vSiteCode
                findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                findKey(2) = CtrlTxtOrderNo.Text
                findKey(3) = drScan("FactoryCode").ToString

                drSOPackDtl = dsMain.Tables("SalesOrderSTRFactoryRemark").Rows.Find(findKey)

                If drSOPackDtl Is Nothing Then
                    drSOPackDtl = dsMain.Tables("SalesOrderSTRFactoryRemark").NewRow()
                    IsNewRow = True
                End If
                drSOPackDtl("SiteCode") = vSiteCode
                drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                drSOPackDtl("FactorySiteCode") = drScan("FactoryCode").ToString
                drSOPackDtl("Remark") = drScan("Remark").ToString

                drSOPackDtl("UPDATEDAT") = vSiteCode
                drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                drSOPackDtl("STATUS") = IIf(drSOPackDtl("STATUS") Is DBNull.Value, True, drSOPackDtl("STATUS"))

                If IsNewRow = True Then
                    drSOPackDtl("CREATEDAT") = vSiteCode
                    drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("STATUS") = True
                    dsMain.Tables("SalesOrderSTRFactoryRemark").Rows.Add(drSOPackDtl)
                    IsNewRow = False
                End If
            Next
            'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Other Tax data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PreparTaxDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""
        'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
        Dim findKey(4) As Object
        Dim drSOPackDtl As DataRow


        'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
        '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
        'End If
        Try
            Dim srno As Integer = 1


            For Each drScan As DataRow In dsMain.Tables("SalesOrderTaxDtls").Rows
                findKey(0) = vSiteCode
                findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                findKey(2) = CtrlTxtOrderNo.Text
                findKey(3) = drScan("EAN").ToString
                'findKey(4) = drScan("TaxLabel")
                findKey(4) = drScan("TaxLineNo")

                drSOPackDtl = dsMain.Tables("SalesOrderTaxDtls").Rows.Find(findKey)

                If drSOPackDtl Is Nothing Then
                    drSOPackDtl = dsMain.Tables("SalesOrderTaxDtls").NewRow()
                    IsNewRow = True


                Else
                    If (drScan("CREATEDBY") Is DBNull.Value) Then
                        drScan("CREATEDAT") = vSiteCode
                        drScan("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        drScan("CREATEDON") = objComn.GetCurrentDate
                        drScan("UPDATEDAT") = vSiteCode
                        drScan("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        drScan("UPDATEDON") = objComn.GetCurrentDate
                        drScan("STATUS") = True
                        drScan("DocumentType") = "SalesOrder"
                    End If
                    drSOPackDtl("updatedon") = DateTime.Now
                End If

            Next
            'dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    '-----Added By Prasad for Calculating Tax Amt PickupWise
    ''' <summary>
    ''' Preapring the Sales Order Discount data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    ''' 
    Dim dtpickupDetail As DataTable

    Private Function pickupWiseDetails()
        '   For Each drPackvar As DataRow In dsPackVar.Tables(0).Select("IsStatus <> 'Deleted'")
        Try

       
            Dim PrvDisAmount As Decimal
            Dim prvTaxAmount As Decimal


            'Dim DtpickupWise As DataTable = dsScanTemp.Tables(0).Select("ArticleCode = 'a'").CopyToDataTable()
            dtpickupDetail = dsPackagingVar.Tables(0).Select("").CopyToDataTable
            dtpickupDetail.TableName = "DtpickupWise"
            dtpickupDetail.Rows.Clear()


            'Dim TotalPendingGrossAmt As Double = 0
            'For Each drDisc As DataRow In dsPackagingVar.Tables(0).Rows
            '    Dim ordQty = drDisc.Item("Quantity")
            '    Dim delQty = drDisc("DeliveredQty")
            '    Dim sellPrice = drDisc.Item("SellingPrice")
            '    TotalPendingGrossAmt = TotalPendingGrossAmt + sellPrice * (ordQty - delQty)
            'Next
            'Dim NewDiscount As Double

            For Each drScan As DataRow In dsPackagingVar.Tables("PackagingMaterial").Rows


                'Dim ordQty = drScan.Item("Quantity")
                'Dim delQty = drScan("DeliveredQty")
                'Dim sellPrice = drScan.Item("SellingPrice")
                'Dim GrossAmt = sellPrice * (ordQty - delQty)
                'Dim Disper = GrossAmt / TotalPendingGrossAmt * 100
                'NewDiscount = NewDiscountAmount * Disper / 100

                Dim result As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drScan("BillLineNo").ToString() + "'AND PkgLineNo='" + drScan("PkgLineNo").ToString() + "'")
                If result.Length > 0 Then
                    PrvDisAmount = result(0)("DiscountAmount")
                End If
                Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drScan("BillLineNo").ToString() + "' AND PkgLineNo='" + drScan("PkgLineNo").ToString() + "'") '$$ added by KETAN SO GST Changes 
                If resultTax.Length > 0 Then
                    prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                End If

                Dim dtTaxCalc As DataTable
                If IsCSTApplicable Then
                    dtTaxCalc = objCM.getTax(vSiteCode, String.Empty, "SO201", drScan("Quantity"), drScan("EAN"), clsDefaultConfiguration.CSTTaxCode, True)
                Else
                    dtTaxCalc = objCM.getTax(vSiteCode, drScan.Item("ArticleCode"), "SO201", drScan("Quantity") - drScan("DeliveredQty"), drScan("EAN"), clsDefaultConfiguration.CSTTaxCode, False)
                End If
                drSOPrintHeader = dtpickupDetail.NewRow()


                drSOPrintHeader("SiteCode") = drScan("SiteCode")
                drSOPrintHeader("FinYear") = drScan("FinYear")
                drSOPrintHeader("SaleOrderNumber") = drScan("SaleOrderNumber")
                drSOPrintHeader("EAN") = drScan("EAN")
                drSOPrintHeader("ArticleCode") = drScan("ArticleCode")
                drSOPrintHeader("BillLineNo") = drScan("BillLineNo")
                drSOPrintHeader("PkgLineNo") = drScan("PkgLineNo")
                drSOPrintHeader("PickupQty") = drScan("PickupQty")

                If drScan("ArticleType") = "Combo" Then
                    If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then  ''$$ added by nikhil
                        If DTComboTaxPer.Rows.Count > 0 Or lblArticleCombo1.Rows.Count > 0 Then  ''$$ added by nikhil
                            Dim prvdeliveredQty = drScan("DeliveredQty")
                            Dim Prvnetamount = (drScan("DeliveredQty") * drScan.Item("SellingPrice")) - PrvDisAmount + prvTaxAmount
                            ' Dim vTotalNetAmt = Math.Round(drScan.Item("SellingPrice") * (drScan.Item("Quantity") - prvdeliveredQty), 3) - drScan.Item("Discount")
                            Dim vTotalNetAmt As Double = 0
                            If (drScan.Item("LineDiscount") - PrvDisAmount) > 0 Then
                                vTotalNetAmt = (Math.Round(drScan.Item("SellingPrice") * (drScan.Item("Quantity") - prvdeliveredQty), 3)) - (drScan.Item("LineDiscount") - PrvDisAmount)
                            Else
                                vTotalNetAmt = (Math.Round(drScan.Item("SellingPrice") * (drScan.Item("Quantity") - prvdeliveredQty), 3))
                            End If

                            ' Dim newTax = vTotalNetAmt * CDbl(DTComboTaxPer.Rows(0)("ValueInPer")) / 100
                            Dim DRComboTax As DataRow() = DTComboTaxPer.Select("ComboSrNo='" + drScan("BillLineNo").ToString() + "'")
                            Dim newTax As Decimal = 0
                            If DRComboTax.Length > 0 Then
                                newTax = vTotalNetAmt * DRComboTax(0)("ValueInPer") / 100
                            Else
                                newTax = vTotalNetAmt * drScan("TaxInPer") / 100
                            End If

                            If (drScan("Quantity") - drScan("DeliveredQty")) > 0 Then
                                drSOPrintHeader("ExclTaxAmt") = (newTax / (drScan("Quantity") - drScan("DeliveredQty"))) * drScan("PickupQty")
                                drSOPrintHeader("TotalTaxAmount") = (newTax / (drScan("Quantity") - drScan("DeliveredQty"))) * drScan("PickupQty")
                                drSOPrintHeader("NetAmount") = ((vTotalNetAmt + newTax) / (drScan("Quantity") - drScan("DeliveredQty"))) * drScan("PickupQty")
                                NetArticleRate = (vTotalNetAmt + newTax) / (drScan("Quantity") - drScan("DeliveredQty"))
                                drSOPrintHeader("DiscountAmount") = ((drScan("LineDiscount") - PrvDisAmount) / (drScan("Quantity") - drScan("DeliveredQty"))) * drScan("PickupQty")
                                drSOPrintHeader("LineDiscount") = ((drScan("LineDiscount") - PrvDisAmount) / (drScan("Quantity") - drScan("DeliveredQty"))) * drScan("PickupQty")
                            Else
                                drSOPrintHeader("ExclTaxAmt") = ((newTax / (drScan("Quantity"))) * drScan("PickupQty")) * drScan("PickupQty")
                                drSOPrintHeader("TotalTaxAmount") = ((newTax / (drScan("Quantity"))) * drScan("PickupQty")) * drScan("PickupQty")
                                drSOPrintHeader("NetAmount") = ((vTotalNetAmt + newTax) / (drScan("Quantity"))) * drScan("PickupQty")
                                NetArticleRate = Math.Round((vTotalNetAmt + newTax) / (drScan("Quantity")), 0)
                                drSOPrintHeader("DiscountAmount") = ((drScan("LineDiscount") - PrvDisAmount) / (drScan("Quantity"))) * drScan("PickupQty")
                                drSOPrintHeader("LineDiscount") = ((drScan("LineDiscount") - PrvDisAmount) / (drScan("Quantity"))) * drScan("PickupQty")
                            End If

                            TotalSalesQty = drScan("PickUpQty") + IIf(drScan("DeliveredQty") IsNot DBNull.Value, drScan("DeliveredQty"), 0)

                            drSOPrintHeader("MinPayAmt") = ((drScan("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                            drSOPrintHeader("TotalPickupAmt") = NetArticleRate * drScan("PickupQty")

                        End If


                    End If
                Else
                    If dtTaxCalc.Rows.Count > 0 Then
                        'Dim PrvDisAmount = result(0)("DiscountAmount")
                        'Dim prvTaxAmount = IIf(resultTax(0)("TaxAmount") IsNot DBNull.Value, resultTax(0)("TaxAmount"), 0)
                        Dim prvdeliveredQty = drScan("DeliveredQty")
                        Dim Prvnetamount = drScan("DeliveredQty") * drScan.Item("SellingPrice") - PrvDisAmount + prvTaxAmount
                        Dim vTotalNetAmt As Double = 0
                        If (drScan.Item("LineDiscount") - PrvDisAmount) > 0 Then
                            vTotalNetAmt = (Math.Round(drScan.Item("SellingPrice") * (drScan.Item("Quantity") - prvdeliveredQty), 3)) - (drScan.Item("LineDiscount") - PrvDisAmount)
                        Else
                            vTotalNetAmt = (Math.Round(drScan.Item("SellingPrice") * (drScan.Item("Quantity") - prvdeliveredQty), 3))
                        End If

                        Dim pendingQty = drScan.Item("Quantity") - prvdeliveredQty
                        dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = vTotalNetAmt
                        objCM.getCalculatedDataSet(dtTaxCalc)

                        If pendingQty > 0 Then
                            drSOPrintHeader("ExclTaxAmt") = (Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2) / pendingQty) * drSOPrintHeader("PickupQty")
                            drSOPrintHeader("TotalTaxAmount") = (Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2) / pendingQty) * drSOPrintHeader("PickupQty")
                            drSOPrintHeader("NetAmount") = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / pendingQty
                            NetArticleRate = Math.Round((vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (pendingQty), 0)
                            drSOPrintHeader("DiscountAmount") = ((drScan("LineDiscount") - PrvDisAmount) / (pendingQty)) * drSOPrintHeader("PickupQty")
                            drSOPrintHeader("LineDiscount") = ((drScan("LineDiscount") - PrvDisAmount) / (pendingQty)) * drSOPrintHeader("PickupQty")
                        Else
                            drSOPrintHeader("ExclTaxAmt") = (Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2) / drScan.Item("Quantity")) * drSOPrintHeader("PickupQty")
                            drSOPrintHeader("TotalTaxAmount") = (Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2) / drScan.Item("Quantity")) * drSOPrintHeader("PickupQty")
                            drSOPrintHeader("NetAmount") = (vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / drScan.Item("Quantity")
                            NetArticleRate = Math.Round((vTotalNetAmt + Math.Round(dtTaxCalc.Compute("SUM(TAXAMOUNT)", ""), 2)) / (drScan.Item("Quantity")), 0)
                            drSOPrintHeader("DiscountAmount") = ((drScan("LineDiscount") - PrvDisAmount) / (drScan.Item("Quantity"))) * drSOPrintHeader("PickupQty")
                            drSOPrintHeader("LineDiscount") = ((drScan("LineDiscount") - PrvDisAmount) / (drScan.Item("Quantity"))) * drSOPrintHeader("PickupQty")
                        End If
                        TotalSalesQty = drScan("PickUpQty") + IIf(drScan("DeliveredQty") IsNot DBNull.Value, drScan("DeliveredQty"), 0)
                        drSOPrintHeader("MinPayAmt") = ((drScan("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate)
                        drSOPrintHeader("TotalPickupAmt") = NetArticleRate * drScan("PickupQty")
                        'drRem("Discount") = PrvDisAmount
                        'drRem("LineDiscount") = PrvDisAmount
                    End If
                End If

                dtpickupDetail.Rows.Add(drSOPrintHeader)
                ' NewDiscount = 0
                PrvDisAmount = 0
                prvTaxAmount = 0
            Next

        Catch ex As Exception

        End Try
    End Function

    Private Function PrepareSOTaxEditDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""

        Dim findKey(5) As Object
        pickupWiseDetails()
        Dim drSOPackDtl As DataRow
        Try
            Dim srno As Integer = 1
            Dim dtDiscDtl As New DataTable
            dtDiscDtl = objPCSO.GetPickUpTaxDetail(vSalesNo, clsAdmin.SiteCode)
            For Each drScan As DataRow In dsPackagingVar.Tables("PackagingMaterial").Rows
                If drScan("PickUpQty") > 0 Then 'Discount old 'AndAlso drScan("LineDiscount")

                    Dim drPickupDetail As DataRow() = dtpickupDetail.Select("BillLineNo='" + drScan("BillLineNo").ToString() + "'AND PkgLineNo='" + drScan("PkgLineNo").ToString() + "'")

                    If (CDbl(lblReceivedAmt.Text.Trim) >= CDbl(lblminadvancepaid.Text.Trim)) Then


                        Dim billLineNo As Integer = drScan("billLineNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                        findKey(0) = vSiteCode
                        findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                        findKey(2) = CtrlTxtOrderNo.Text
                        'findKey(3) = drScan("EAN").ToString
                        findKey(3) = drScan("billLineNo")
                        findKey(4) = drScan("pkgLineNo")
                        findKey(5) = 0
                        drSOPackDtl = dsMain.Tables("SOPackagingTaxDtl").Rows.Find(findKey)

                        If drSOPackDtl Is Nothing Then
                            drSOPackDtl = dsMain.Tables("SOPackagingTaxDtl").NewRow()
                            IsNewRow = True
                        End If
                        'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                        drSOPackDtl("BillLineNo") = drScan("billLineNo")
                        drSOPackDtl("PkgLineNo") = drScan("pkgLineNo")
                        'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                        '---- NEED to put BillNo in scan table to for print 
                        'drScan("BillLineNo") = billLineNo
                        drSOPackDtl("SrNo") = MaxTaxNo
                        drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                        drSOPackDtl("SiteCode") = vSiteCode
                        drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                        drSOPackDtl("EAN") = drScan("EAN")
                        If drScan("ArticleType").ToString() = "Combo" Then
                            Dim result As DataRow() = dtPackagingBox.Select("ArticleShortName='" + drScan("PckgMaterial").ToString() + "'")
                            If result.Length > 0 Then
                                drSOPackDtl("ArticleCode") = result(0)("ArticleCode")
                                'drSOPackDtl("BaseUnitofMeasure") = result(0)("BaseUnitofMeasure")
                            Else
                                drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                            End If
                        Else
                            drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        End If

                        Dim resultDisc As DataRow() = dtDiscDtl.Select("EAN='" + drScan("EAN").ToString() + "'")

                        drSOPackDtl("PickUpQuantity") = drScan("PickUpQty")
                        ' drSOPackDtl("TaxAmount") = ((drScan("PickUpQty") * drScan("SellingPrice")) / CDbl(CtrllblGrossAmt.Text.Trim())) * CDbl(CtrllblTaxAmt.Text.Trim)
                        '$$ added by ketan SO GST Changes 
                        ' drSOPackDtl("TaxAmount") = ((drScan("PickUpQty") * drScan("SellingPrice")) / drScan("GrossAmount")) * drScan("TotalTaxAmount")
                        If drPickupDetail.Length > 0 Then
                            Dim TXvalue = drPickupDetail(0)("ExclTaxAmt")
                            drSOPackDtl("TaxAmount") = TXvalue
                        Else
                            drSOPackDtl("TaxAmount") = 0
                        End If



                        drSOPackDtl("CREATEDAT") = vSiteCode
                        drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("UPDATEDAT") = vSiteCode
                        drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                        drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                        drSOPackDtl("STATUS") = True
                        If IIf(drSOPackDtl("TaxAmount") Is DBNull.Value, 0, drSOPackDtl("TaxAmount")) > 0 Then '' Added by ketan handle dBNull
                            Dim dr() = dsMain.Tables("SalesOrderTaxDtls").Select("SaleOrderNumber='" & CtrlTxtOrderNo.Text & "'")
                            If dr.Length > 0 Then
                                drSOPackDtl("TaxId") = dr(0)("TaxLabel")
                            End If
                        End If

                        If IsNewRow = True Then
                            dsMain.Tables("SOPackagingTaxDtl").Rows.Add(drSOPackDtl)
                            IsNewRow = False
                            MaxTaxNo = MaxTaxNo + 1
                        End If
                        srno = srno + 1
                    End If
                End If
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Tax data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareSOTaxDataforSave(ByRef dsMain As DataSet) As Boolean
        strSOStatus = ""

        Dim findKey(5) As Object
        Dim drSOPackDtl As DataRow

        Try
            Dim srno As Integer = 1
            Dim dtTaxDtl As New DataTable
            dtTaxDtl = objPCSO.GetPickUpTaxDetail(vSalesNo, clsAdmin.SiteCode)
            For Each drScan As DataRow In dtSOReturn.Rows
                If drScan("PickUpQty") > 0 Then 'Discount old 'AndAlso drScan("LineDiscount")

                    Dim billLineNo As Integer = drScan("billLineNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                    findKey(2) = CtrlTxtOrderNo.Text
                    ' findKey(3) = drScan("EAN").ToString
                    findKey(3) = drScan("billLineNo")
                    findKey(4) = drScan("pkgLineNo")
                    findKey(5) = 0
                    drSOPackDtl = dsMain.Tables("SOPackagingTaxDtl").Rows.Find(findKey)

                    If drSOPackDtl Is Nothing Then
                        drSOPackDtl = dsMain.Tables("SOPackagingTaxDtl").NewRow()
                        IsNewRow = True
                    End If
                    'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                    drSOPackDtl("BillLineNo") = drScan("billLineNo")
                    drSOPackDtl("PkgLineNo") = drScan("pkgLineNo")
                    'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                    '---- NEED to put BillNo in scan table to for print 
                    'drScan("BillLineNo") = billLineNo
                    drSOPackDtl("SrNo") = MaxTaxNo
                    drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                    drSOPackDtl("SiteCode") = vSiteCode
                    drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                    drSOPackDtl("EAN") = drScan("EAN")
                    If drScan("ArticleType").ToString() = "Combo" Then
                        Dim result As DataRow() = dtPackagingBox.Select("ArticleShortName='" + drScan("PackagingMaterial").ToString() + "'")
                        If result.Length > 0 Then
                            drSOPackDtl("ArticleCode") = result(0)("ArticleCode")
                            'drSOPackDtl("BaseUnitofMeasure") = result(0)("BaseUnitofMeasure")
                        Else
                            drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                        End If
                    Else
                        drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                    End If

                    Dim resultTax As DataRow() = dtTaxDtl.Select("EAN='" + drScan("EAN").ToString() + "'")


                    drSOPackDtl("PickUpQuantity") = -1 * drScan("PickUpQty")
                    If resultTax.Length > 0 Then
                        drSOPackDtl("TaxAmount") = -1 * (resultTax(0)("ReturnAmt") * drScan("PickUpQty"))
                    Else
                        drSOPackDtl("TaxAmount") = 0
                    End If
                    drSOPackDtl("CREATEDAT") = vSiteCode
                    drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("UPDATEDAT") = vSiteCode
                    drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("STATUS") = True

                    If IsNewRow = True Then
                        dsMain.Tables("SOPackagingTaxDtl").Rows.Add(drSOPackDtl)
                        IsNewRow = False
                        MaxTaxNo = MaxTaxNo + 1
                    End If
                    srno = srno + 1
                End If
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    Private Sub LoadRemarks(ByVal dt As DataTable, ByVal IsDeleted As Boolean)

        remarkPanel.Controls.Clear()


        If Not IsDeleted Then


            For Each drRemark As DataRow In dt.Rows
                Dim result As DataRow() = DtSoBulkRemarks.Select("SrNo='" + drRemark("SrNo").ToString() + "'")

                If result.Length = 0 Then
                    Dim rowDeliveryAddr = DtSoBulkRemarks.NewRow
                    rowDeliveryAddr("SrNo") = drRemark("SrNo")
                    rowDeliveryAddr("ArticleType") = drRemark("ArticleType")
                    rowDeliveryAddr("ArticleCode") = drRemark("ArticleCode")
                    rowDeliveryAddr("ArticleName") = drRemark("ArticleName")
                    rowDeliveryAddr("Remark") = drRemark("Remark")

                    DtSoBulkRemarks.Rows.InsertAt(rowDeliveryAddr, DtSoBulkRemarks.Rows.Count + 1)
                Else
                    If drRemark("Remark") <> "" Then
                        result(0)("Remark") = drRemark("Remark")
                    Else

                    End If
                End If

                DtSoBulkRemarks.AcceptChanges()
            Next

        End If
        For Each dr As DataRow In DtSoBulkRemarks.Rows
            AddRemarks(dr("ArticleName").ToString(), dr("Remark").ToString())
        Next
        AddBlankTableLayout()

    End Sub
    Dim lb As Label
    Dim lbl1 As Label

    Dim pn As TableLayoutPanel
    Private Sub AddRemarks(ByVal ArticleName As String, ByVal Remark As String)
        Try
            lb = New Label()

            lb.MaximumSize = New Size(0, 0)
            lb.AutoSize = True
            lb.Margin = New Padding(3, 2, 0, 0)
            lb.Name = "Remark"
            lb.Text = ArticleName
            lb.TextAlign = ContentAlignment.TopLeft
            lb.Dock = DockStyle.Fill
            lb.MinimumSize = New Size(130, 15)

            lbl1 = New Label()
            lbl1.MinimumSize = New Size(325, 15)
            lbl1.MaximumSize = New Size(0, 0)
            lbl1.Margin = New Padding(3, 2, 0, 0)
            lbl1.Name = "Remark"
            lbl1.Text = Remark
            lbl1.TextAlign = ContentAlignment.TopLeft
            lbl1.Dock = DockStyle.Fill
            lbl1.AutoSize = True


            pn = New TableLayoutPanel()
            pn.SuspendLayout()
            'pn.MaximumSize = New Size(0, 0)
            pn.Margin = New Padding(0)
            pn.Padding = New Padding(0)
            pn.AutoSize = True
            pn.MaximumSize = New Point(540, 800)
            pn.MaximumSize = New Point(My.Computer.Screen.WorkingArea.Width / 2.53, 800)
            'pn.Height = lbl1.PreferredHeight + 15
            pn.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 40.0!))
            pn.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 60.0!))
            pn.RowCount = 1
            pn.ColumnCount = 2
            pn.Controls.Add(lb, 0, 0)
            pn.Controls.Add(lbl1, 1, 0)
            pn.RowStyles.Add(New System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.AutoSize))
            pn.CellBorderStyle = TableLayoutPanelCellBorderStyle.Single
            remarkPanel.Controls.Add(pn)
            remarkPanel.HorizontalScroll.Visible = False
            pn.ResumeLayout()
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub AddBlankTableLayout()
        '''''Do a trick for avoiding conflict at UI ...Showing scroll on adding article remark
        Try

            pn = New TableLayoutPanel()
            pn.SuspendLayout()
            pn.Margin = New Padding(0)
            pn.Padding = New Padding(0)
            pn.Size = New Point(remarkPanel.Size.Width - 20, remarkPanel.Size.Height - 10)
            pn.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 40.0!))
            pn.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 60.0!))
            pn.RowCount = 1
            pn.ColumnCount = 2

            remarkPanel.Controls.Add(pn)
            remarkPanel.HorizontalScroll.Visible = False

        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub

    ''' <summary>
    ''' Preapring the Order Header data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareOrderHdrDataforSave(ByRef dsMain As DataSet) As Boolean
        Dim drOrderHdr As DataRow
        Dim findKey(2) As Object
        Try
            Dim clsCommon As New clsCommon
            Dim vOBNumber As String = String.Empty
            'vOBNumber = "OB" & clsAdmin.TerminalID & clsCommon.getDocumentNo("OutBound")            

            If OnlineConnect = True Then
                'Changed by Rohit to generate Document No. for proper sorting
                Try
                    vOBNumber = "OB" & clsAdmin.TerminalID & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                    vOBNumber = GenDocNo(vOBNumber, 15, clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode))
                Catch ex As Exception
                    vOBNumber = "OB" & clsAdmin.TerminalID & clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode)
                End Try

                Try
                    rbnLStatus.SmallImage = Spectrum.My.Resources.connected1.ToBitmap
                    rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus2")
                Catch ex As Exception

                End Try

                'End Change by Rohit
            Else
                'Changed by Rohit to generate Document No. for proper sorting
                Try
                    vOBNumber = "OOB" & clsAdmin.TerminalID & clsAdmin.Financialyear.Substring(clsAdmin.Financialyear.Length - 2, 2)
                    vOBNumber = GenDocNo(vOBNumber, 15, clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode))
                Catch ex As Exception
                    vOBNumber = "OOB" & clsAdmin.TerminalID & clsCommon.getDocumentNo("OutBound", clsAdmin.SiteCode)
                End Try

                Try
                    rbnLStatus.SmallImage = Spectrum.My.Resources.disconnected1.ToBitmap
                    rbnLStatus.Text = getValueByKey("ctrlrbnbaseform.rbnStatus1")
                Catch ex As Exception

                End Try
                'End Change by Rohit
            End If

            findKey(0) = vSiteCode
            findKey(1) = vfinancialYear
            findKey(2) = vOBNumber

            drOrderHdr = dsMain.Tables("OrderHdr").Rows.Find(findKey)
            If drOrderHdr Is Nothing Then
                drOrderHdr = dsMain.Tables("OrderHdr").NewRow
                IsNewRow = True
            End If

            drOrderHdr("SiteCode") = vSiteCode
            'If IsNewRow = False Then
            '    drOrderHdr("FinYear") = vfinancialYear
            'Else
            '    drOrderHdr("FinYear") = clsAdmin.Financialyear
            'End If
            drOrderHdr("FinYear") = vfinancialYear

            drOrderHdr("DocumentNumber") = vOBNumber
            drOrderHdr("DocumentType") = vDocType
            drOrderHdr("DocDate") = vCurrentDate
            drOrderHdr("SupplierCode") = "" ' clsDefaultConfiguration.SupplierCode
            drOrderHdr("PurchaseGroupCode") = DBNull.Value
            drOrderHdr("DeliverySiteCode") = vSiteCode
            drOrderHdr("ExpectedDeliveryDt") = DateTime.Now ' CtrlSalesInfo.CtrlDtExpDelDate.Value

            drOrderHdr("PaymentAfterDelDays") = DBNull.Value
            drOrderHdr("AdditionalTermsNConditions") = DBNull.Value
            drOrderHdr("AdditionalPaymentTerms") = DBNull.Value
            drOrderHdr("DocNetValue") = CDbl(CtrllblNetAmt.Text.Trim)
            drOrderHdr("DocGrossValue") = CDbl(CtrllblGrossAmt.Text.Trim)
            drOrderHdr("IsClosed") = True
            drOrderHdr("IsFreezed") = True
            drOrderHdr("SalesOrderRef") = CtrlTxtOrderNo.Text
            drOrderHdr("ReturnReasonCode") = " "
            drOrderHdr("Remarks") = ""
            drOrderHdr("ApprovedDate") = DBNull.Value
            drOrderHdr("ApprovedLevel") = DBNull.Value
            drOrderHdr("ApprovalLevel") = DBNull.Value
            drOrderHdr("AmmendmentNo") = DBNull.Value

            drOrderHdr("ClosedDate") = DBNull.Value
            drOrderHdr("Transporter") = DBNull.Value
            drOrderHdr("DocApprovalID") = DBNull.Value
            drOrderHdr("ParentOrderNo") = DBNull.Value

            drOrderHdr("CREATEDAT") = vSiteCode
            drOrderHdr("CREATEDBY") = clsAdmin.UserCode 'vUserName
            drOrderHdr("CREATEDON") = vCurrentDate
            drOrderHdr("UPDATEDAT") = vSiteCode
            drOrderHdr("UPDATEDBY") = clsAdmin.UserCode 'vUserName
            drOrderHdr("UPDATEDON") = vCurrentDate
            drOrderHdr("STATUS") = True
            drOrderHdr("SupplierCode") = " "

            If IsNewRow = True Then
                dsMain.Tables("OrderHdr").Rows.Add(drOrderHdr)
                IsNewRow = False
            End If

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function

    ''' <summary>
    ''' Preapring the Order Details data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareOrderDtlDataforSave(ByRef dsMain As DataSet) As Boolean
        Dim drOrderDtl As DataRow
        Dim rowIndex As Integer = 1
        Dim findKey(3) As Object
        Try
            If clsDefaultConfiguration.IsBatchManagementReq Then
                For Each barcode As SpectrumCommon.BtachbarcodeInfo In Batchbarcode
                    Dim drScan = dsScan.Tables(0).Select("EAN='" & barcode.EAN & "'")(0)
                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear
                    findKey(2) = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                    'findKey(3) = drScan("EAN")
                    findKey(3) = drScan("BillLineNo") 'rowIndex ''change by ketan add billline no in orderdtl table 

                    drOrderDtl = dsMain.Tables("OrderDtl").Rows.Find(findKey)
                    If drOrderDtl Is Nothing Then
                        drOrderDtl = dsMain.Tables("OrderDtl").NewRow
                        IsNewRow = True
                    End If
                    Dim Quantity = dsPackagingDelivery.Tables(0).Compute("Sum(Quantity)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim PickUpQuantity = dsPackagingDelivery.Tables(0).Compute("Sum(PickUpQty)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim CostAmount = _dsPackagingVar.Tables(0).Compute("Sum(CostAmount)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim GrossAmount = _dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim NetAmount = _dsPackagingVar.Tables(0).Compute("Sum(NetAmount)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    drOrderDtl("SiteCode") = vSiteCode

                    'If IsNewRow = False Then
                    '    drOrderDtl("FinYear") = vfinancialYear
                    'Else
                    '    drOrderDtl("FinYear") = clsAdmin.Financialyear
                    'End If
                    drOrderDtl("FinYear") = vfinancialYear

                    drOrderDtl("DocumentNumber") = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                    drOrderDtl("ArticleCode") = drScan("ArticleCode")
                    drOrderDtl("EAN") = drScan("EAN")

                    drOrderDtl("Qty") = Quantity
                    drOrderDtl("UnitofMeasure") = vUOM
                    drOrderDtl("LineNumber") = drScan("BillLineNo") 'rowIndex ''change by ketan add billline no in orderdtl table 
                    drOrderDtl("OpenQty") = DBNull.Value
                    drOrderDtl("DeliveredQty") = barcode.Qty
                    drOrderDtl("DeliveryCompleted") = DBNull.Value
                    drOrderDtl("PurchaseGroupCode") = DBNull.Value
                    drOrderDtl("RefDocument") = DBNull.Value
                    drOrderDtl("RefDocumentNo") = DBNull.Value
                    drOrderDtl("BarCode") = barcode.BatchBarcode
                    drOrderDtl("PONo") = DBNull.Value
                    drOrderDtl("BirthListId") = DBNull.Value
                    drOrderDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                    drOrderDtl("AllocationRule") = DBNull.Value
                    'drOrderDtl("MRP") = drScan("SellingPrice")
                    'drOrderDtl("MRP") = Math.Round(Quantity / NetAmount, clsDefaultConfiguration.DecimalPlaces)
                    drOrderDtl("MRP") = Math.Round(Quantity / NetAmount, 3)
                    drOrderDtl("CostPrice") = drScan("SellingPrice")
                    drOrderDtl("NetCostPrice") = drScan("SellingPrice")

                    drOrderDtl("ExciseDutyAmt") = DBNull.Value
                    drOrderDtl("ExciseDutyRate") = DBNull.Value
                    drOrderDtl("PurchaseTaxAmt") = DBNull.Value
                    drOrderDtl("PurchaseTaxRate") = DBNull.Value
                    drOrderDtl("AdditionalChargeAmt") = DBNull.Value
                    drOrderDtl("DiscountAmount") = drScan("LineDiscount")
                    drOrderDtl("AdditionalChargeRate") = DBNull.Value  'drScan("ExclTaxAmt")
                    drOrderDtl("DocValue") = DBNull.Value
                    drOrderDtl("InboundQty") = DBNull.Value
                    drOrderDtl("DayOpenDate") = clsAdmin.DayOpenDate

                    drOrderDtl("CREATEDAT") = vSiteCode
                    drOrderDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drOrderDtl("CREATEDON") = vCurrentDate
                    drOrderDtl("UPDATEDAT") = vSiteCode
                    drOrderDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drOrderDtl("UPDATEDON") = vCurrentDate
                    drOrderDtl("STATUS") = True

                    If IsNewRow = True Then
                        dsMain.Tables("OrderDtl").Rows.Add(drOrderDtl)
                        IsNewRow = False
                    End If
                    rowIndex = rowIndex + 1
                    'End If
                Next
            Else
                For Each drScan As DataRow In dsScan.Tables(0).Select("PickUpQty>0", "", DataViewRowState.CurrentRows)
                    'If drScan("PickUpQty") > 0 Then

                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear
                    findKey(2) = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                    'findKey(3) = drScan("EAN")
                    findKey(3) = drScan("BillLineNo") 'rowIndex ''change by ketan add billline no in orderdtl table 

                    drOrderDtl = dsMain.Tables("OrderDtl").Rows.Find(findKey)
                    If drOrderDtl Is Nothing Then
                        drOrderDtl = dsMain.Tables("OrderDtl").NewRow
                        IsNewRow = True
                    End If
                    Dim Quantity = dsPackagingDelivery.Tables(0).Compute("Sum(Quantity)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim PickUpQuantity = dsPackagingDelivery.Tables(0).Compute("Sum(PickUpQty)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim CostAmount = _dsPackagingVar.Tables(0).Compute("Sum(CostAmount)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim GrossAmount = _dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    Dim NetAmount = _dsPackagingVar.Tables(0).Compute("Sum(NetAmount)", " BillLineNo='" + drScan("SrNo").ToString() + "'")
                    drOrderDtl("SiteCode") = vSiteCode

                    'If IsNewRow = False Then
                    '    drOrderDtl("FinYear") = vfinancialYear
                    'Else
                    '    drOrderDtl("FinYear") = clsAdmin.Financialyear
                    'End If
                    drOrderDtl("FinYear") = vfinancialYear 'vipin 18.01.2018

                    drOrderDtl("DocumentNumber") = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                    drOrderDtl("ArticleCode") = drScan("ArticleCode")
                    drOrderDtl("EAN") = drScan("EAN")

                    drOrderDtl("Qty") = Quantity
                    drOrderDtl("UnitofMeasure") = vUOM
                    drOrderDtl("LineNumber") = drScan("BillLineNo") 'rowIndex ''change by ketan add billline no in orderdtl table 
                    drOrderDtl("OpenQty") = DBNull.Value
                    drOrderDtl("DeliveredQty") = PickUpQuantity
                    drOrderDtl("DeliveryCompleted") = DBNull.Value
                    drOrderDtl("PurchaseGroupCode") = DBNull.Value
                    drOrderDtl("RefDocument") = DBNull.Value
                    drOrderDtl("RefDocumentNo") = DBNull.Value
                    drOrderDtl("BarCode") = drScan("BatchBarCode")
                    drOrderDtl("PONo") = DBNull.Value
                    drOrderDtl("BirthListId") = DBNull.Value
                    drOrderDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                    drOrderDtl("AllocationRule") = DBNull.Value
                    'drOrderDtl("MRP") = drScan("SellingPrice")
                    ' drOrderDtl("MRP") = Math.Round(NetAmount / Quantity, clsDefaultConfiguration.DecimalPlaces)
                    drOrderDtl("MRP") = Math.Round(NetAmount / Quantity, 3)
                    drOrderDtl("CostPrice") = drScan("SellingPrice")
                    drOrderDtl("NetCostPrice") = drScan("SellingPrice")

                    drOrderDtl("ExciseDutyAmt") = DBNull.Value
                    drOrderDtl("ExciseDutyRate") = DBNull.Value
                    drOrderDtl("PurchaseTaxAmt") = DBNull.Value
                    drOrderDtl("PurchaseTaxRate") = DBNull.Value
                    drOrderDtl("AdditionalChargeAmt") = DBNull.Value
                    drOrderDtl("DiscountAmount") = drScan("LineDiscount")
                    drOrderDtl("AdditionalChargeRate") = DBNull.Value  'drScan("ExclTaxAmt")
                    drOrderDtl("DocValue") = DBNull.Value
                    drOrderDtl("InboundQty") = DBNull.Value
                    drOrderDtl("DayOpenDate") = clsAdmin.DayOpenDate

                    drOrderDtl("CREATEDAT") = vSiteCode
                    drOrderDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drOrderDtl("CREATEDON") = vCurrentDate
                    drOrderDtl("UPDATEDAT") = vSiteCode
                    drOrderDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drOrderDtl("UPDATEDON") = vCurrentDate
                    drOrderDtl("STATUS") = True

                    If IsNewRow = True Then
                        dsMain.Tables("OrderDtl").Rows.Add(drOrderDtl)
                        IsNewRow = False
                    End If
                    rowIndex = rowIndex + 1
                    'End If
                Next
            End If


            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Preapring the Sales Order Packaging pickup history data for save
    ''' </summary>
    ''' <param name="dsMain"></param>
    ''' <returns>True/False</returns>
    ''' <remarks></remarks>
    Private Function PrepareOrderVariationDeliveryDataforSave(ByRef dsMain As DataSet) As Boolean

        Try

            strSOStatus = ""
            Dim drSOPackDtl As DataRow
            Dim findKey(6) As Object
            ''---- Code Added By Mahesh for Bulk Combo ----

            'If Not dsPackagingVar.Tables("PackagingMaterial").Columns.Contains("RowIndex") Then
            '    dsMain.Tables("SalesOrderDTL").Columns.Add("RowIndex", Type.GetType("System.Int16"))
            'End If

            For Each drScan As DataRow In dsPackagingDelivery.Tables("PackagingDelivery").Rows


                If drScan("pickupqty") > 0 Then

                    'Dim billLineNo As Integer = drScan("SrNo") 'dsMain.Tables("SalesOrderDTL").Rows.Count + 1
                    findKey(0) = vSiteCode
                    findKey(1) = vfinancialYear 'clsAdmin.Financialyear
                    findKey(2) = CtrlTxtOrderNo.Text
                    'findKey(3) = drScan("EAN").ToString
                    findKey(3) = drScan("BillLineNo")
                    findKey(4) = drScan("pkgLineNo")
                    findKey(5) = drScan("deliveryLineNo")
                    findKey(6) = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                    Dim result As DataRow() = dsPackagingVar.Tables(0).Select("PkgLineNo='" + drScan("PkgLineNo").ToString() + "'")
                    drSOPackDtl = dsMain.Tables("PkgOrderDtl").Rows.Find(findKey)

                    If drSOPackDtl Is Nothing Then
                        drSOPackDtl = dsMain.Tables("PkgOrderDtl").NewRow()
                        IsNewRow = True
                    End If
                    'drSODtl("BatchBarcode") = drScan("BatchBarcode")
                    drSOPackDtl("BillLineNo") = drScan("BillLineNo")
                    drSOPackDtl("PkgLineNo") = drScan("PkgLineNo")
                    drSOPackDtl("DeliveryLineNo") = drScan("deliveryLineNo")
                    If result.Length > 0 Then
                        drSOPackDtl("PckgSize") = result(0)("PckgSize")
                        If drScan("Quantity") > 0 AndAlso result(0)("PckgSize") > 0 Then
                            drSOPackDtl("PckgQty") = result(0)("PckgSize") * drScan("Quantity")
                        End If


                        drSOPackDtl("PckgType") = result(0)("PckgType")
                    End If

                    'drSODtl("RowIndex") = billLineNo 'drScan("RowIndex")
                    '---- NEED to put BillNo in scan table to for print 
                    'drScan("BillLineNo") = billLineNo

                    drSOPackDtl("SaleOrderNumber") = CtrlTxtOrderNo.Text
                    drSOPackDtl("SiteCode") = vSiteCode
                    drSOPackDtl("FinYear") = vfinancialYear 'clsAdmin.Financialyear
                    drSOPackDtl("EAN") = drScan("EAN")
                    drSOPackDtl("DocumentNo") = dsMain.Tables("OrderHdr").Rows(0)("DocumentNumber")
                    drSOPackDtl("ArticleCode") = drScan("ArticleCode")
                    drSOPackDtl("IsHeader") = drScan("IsHeader")
                    drSOPackDtl("IsCombo") = drScan("IsCombo")


                    drSOPackDtl("DeliveredQty") = drScan("PickUpQty")
                    drSOPackDtl("Quantity") = drScan("Quantity")
                    drSOPackDtl("UnitofMeasure") = drScan("UnitOfMeasure")



                    drSOPackDtl("CREATEDAT") = vSiteCode
                    drSOPackDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("CREATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("UPDATEDAT") = vSiteCode
                    drSOPackDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                    drSOPackDtl("UPDATEDON") = objComn.GetCurrentDate
                    drSOPackDtl("STATUS") = True


                    If IsNewRow = True Then
                        dsMain.Tables("PkgOrderDtl").Rows.Add(drSOPackDtl)
                        IsNewRow = False
                    End If
                End If
            Next

            Return True



        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function
    Private Function PrepareClpHdrDataforSave(ByRef dsMain As DataSet) As Boolean
        Dim drClpHdr As DataRow
        Try
            drClpHdr = dsMain.Tables("CLPTransaction").NewRow

            drClpHdr("SiteCode") = vSiteCode
            drClpHdr("BillNo") = "" ' CtrlSalesInfo.CtrlTxtOrderNo.Text
            drClpHdr("BillDate") = vCurrentDate.Date
            drClpHdr("AccumLationPoints") = TotalPoints
            drClpHdr("RedemptionPoints") = 0
            drClpHdr("BalAccumlationPoints") = TotalPoints
            drClpHdr("ClpProgramId") = clsAdmin.CLPProgram
            drClpHdr("ClpCustomerId") = "" 'CtrlCustDtls1.lblCustNoValue.Text
            drClpHdr("IsRedemptionProcess") = False
            drClpHdr("CREATEDAT") = vSiteCode
            drClpHdr("CREATEDBY") = clsAdmin.UserCode 'vUserName
            drClpHdr("CREATEDON") = vCurrentDate
            drClpHdr("UPDATEDAT") = vSiteCode
            drClpHdr("UPDATEDBY") = clsAdmin.UserCode 'vUserName
            drClpHdr("UPDATEDON") = vCurrentDate
            drClpHdr("STATUS") = True

            dsMain.Tables("CLPTransaction").Rows.Add(drClpHdr)
            Return True

        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function

    Private Function PrepareClpDtlDataforSave(ByRef dsMain As DataSet) As Boolean
        Dim drClpDtl As DataRow
        Try
            Dim vRowNo As Integer = 1

            For Each drCLP As DataRow In dsScan.Tables(0).Select("(PickUpQty>0 Or DeliveredQty>0) And IsCLP='True'")
                drClpDtl = dsMain.Tables("CLPTransactionsDetails").NewRow

                drClpDtl("SiteCode") = vSiteCode
                drClpDtl("BillNo") = "" ' CtrlSalesInfo.CtrlTxtOrderNo.Text
                drClpDtl("BillLineNo") = vRowNo
                drClpDtl("EAN") = drCLP("EAN")
                drClpDtl("ArticleCode") = drCLP("ArticleCode")
                drClpDtl("SellingPrice") = drCLP("SellingPrice")
                drClpDtl("Quantity") = drCLP("Quantity")
                drClpDtl("CLPPoints") = drCLP("CLPPoints")
                drClpDtl("CLPDiscount") = drCLP("CLPDiscount")
                drClpDtl("CREATEDAT") = vSiteCode
                drClpDtl("CREATEDBY") = clsAdmin.UserCode 'vUserName
                drClpDtl("CREATEDON") = vCurrentDate
                drClpDtl("UPDATEDAT") = vSiteCode
                drClpDtl("UPDATEDBY") = clsAdmin.UserCode 'vUserName
                drClpDtl("UPDATEDON") = vCurrentDate
                drClpDtl("STATUS") = True
                dsMain.Tables("CLPTransactionsDetails").Rows.Add(drClpDtl)

                vRowNo += 1
            Next

            Return True
        Catch ex As Exception
            IsNewRow = False
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function


    Private Function PrintSalesOrders(ByVal drSite As DataRow, ByVal drHAdds As DataRow, Optional ByVal drDAdds As DataRow = Nothing) As Boolean
        Try
            'Dim PrintSo As New System.Text.StringBuilder
            'If dsScan Is Nothing Then
            '    Exit Function
            'End If

            'PrintSo.Length = 0
            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
            'PrintSo.Append("                          SALES ORDER                                 " & vbCrLf)
            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)
            'PrintSo.Append("Company Name   : " & "CreativeIT India Ltd" & "     Company Code : " & "CRITI02" & vbCrLf)

            'If vIsPrintOfficialAddressAllowed = False Then
            '    If Not (drSite Is Nothing) Then
            '        PrintSo.Append("Store Name         : " & drSite.Item("SiteOfficialName") & "                Store Code   : " & vSiteCode & vbCrLf)
            '        PrintSo.Append("Store Address       : " & drSite.Item("SiteAddressLn1") & vbCrLf & "                            " & _
            '                     drSite.Item("SiteAddressLn2") & " " & drSite.Item("SiteAddressLn3") & _
            '                     drSite.Item("SitePinCode") & vbCrLf)
            '    End If
            'Else
            '    PrintSo.Append(vbCrLf & "Print Official Address " & vbCrLf)
            'End If

            'If vHeaderNote = True Then
            '    PrintSo.Append(vbCrLf & "Header Information is Welcome" & vbCrLf)
            'End If

            'PrintSo.Append(vbCrLf & "----------------------------------------------------------------------------------------------------" & vbCrLf)
            'PrintSo.Append("Sales Order No              : " & CtrlSalesInfo.CtrlTxtOrderNo.Text & "                    Date    : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
            'PrintSo.Append("Expected Delivery Date  : " & Format(CtrlSalesInfo.CtrlDtExpDelDate.Value, vDateFormat) & vbCrLf)
            'PrintSo.Append("Cashier Name                : " & vUserName & vbCrLf & vbCrLf)

            'PrintSo.Append("Customer Name    : " & CtrlCustDtls1.lblCustNameValue.Text & "          Customer Code : " & vCustomerNo & vbCrLf)
            'If Not drHAdds Is Nothing Then
            '    PrintSo.Append("Home Address       : " & drHAdds.Item("Address").ToString & vbCrLf)
            '    PrintSo.Append("                   : " & drHAdds.Item("City") & ", " & drHAdds.Item("State") & ", " & drHAdds.Item("Country") & ", " & drHAdds.Item("PinCode") & vbCrLf & vbCrLf)
            'End If

            'If drDelvAdds Is Nothing Then
            '    PrintSo.Append("Delivery Address : " & CtrlCustDtls1.lblAddressValue.Text)
            '    PrintSo.Append("Tel. No.  	   : " & CtrlCustDtls1.lblTelNoValue.Text & vbCrLf & vbCrLf)
            'Else
            '    PrintSo.Append("Delivery Address : " & drDAdds.Item("Address").ToString & vbCrLf)
            '    PrintSo.Append("                          : " & drDAdds.Item("City") & ", " & drDAdds.Item("State") & ", " & drDAdds.Item("Country") & ", " & drDAdds.Item("PinCode").ToString.Trim & vbCrLf)
            '    PrintSo.Append("Tel. No.  	             : " & drDAdds.Item("OfficeNo") & vbCrLf & vbCrLf)
            'End If

            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
            'PrintSo.Append("Item Code       Item Desc                               Qty       Price      Disc%  Tax%   NetAmt" & vbCrLf)
            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)

            'For Each drDtl As DataRow In dsScan.Tables("ItemScanDetails").Select("IsStatus IN ('Inserted','Updated')")
            '    PrintSo.Append(drDtl("ArticleCode") & Space(16 - drDtl("ArticleCode").ToString.Length) & _
            '                  drDtl("Discription") & Space(40 - drDtl("Discription").ToString.Length) & _
            '                  drDtl("Quantity") & Space(10 - drDtl("Quantity").ToString.Length) & _
            '                  Format(drDtl("SellingPrice"), "0.0") & Space(10 - drDtl("SellingPrice").ToString.Length) & _
            '                  drDtl("Discount") & Space(10 - drDtl("Discount").ToString.Length) & _
            '                  drDtl("ExclTaxAmt") & Space(10 - drDtl("ExclTaxAmt").ToString.Length) & Format(drDtl("NetAmount"), "0.0") & vbCrLf)
            'Next

            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

            'PrintSo.Append("Total Qty    : " & lblOrderQty.Text & vbCrLf)
            'PrintSo.Append("Gross Amt  : " & CtrlCashSummary1.lbltxt1 & vbCrLf)
            'PrintSo.Append("Disc  Amt   : " & CtrlCashSummary1.lbltxt2 & vbCrLf)
            'PrintSo.Append("Incl. Amt   : " & Format(CDbl(dsScan.Tables("ItemScanDetails").Compute("Sum(IncTaxAmt)", ""))), "0.00" & vbCrLf)
            'PrintSo.Append("Excl. Amt   : " & Format(CDbl(dsScan.Tables("ItemScanDetails").Compute("Sum(ExclTaxAmt)", ""))), "0.00" & vbCrLf)
            'PrintSo.Append("Net   Amt   : " & CtrlCashSummary1.lbltxt4 & vbCrLf & vbCrLf)

            'If vIsPrintingTaxInfoAllowed = True Then
            '    PrintSo.Append("Print Tax Details..............." & vbCrLf & vbCrLf)
            'End If

            'PrintSo.Append("<Terms & Condition>" & vbCrLf & vbCrLf)

            'PrintSo.Append("Authorized Sign:...............            Customer Sign:................")

            'If vIsPromotionalMessageAllowed = True Then
            '    PrintSo.Append(vbCrLf & "Promotional Message is Welcome" & vbCrLf)
            'End If
            'If vFooterNote = True Then
            '    PrintSo.Append(vbCrLf & "Footer Information is Welcome" & vbCrLf)
            'End If

            'If vIsPrintPreviewAllowed = True Then
            '    fnPrint(PrintSo.ToString, "")          'Print Preview
            'End If
            'fnPrint(PrintSo.ToString, "PRN")   'Direct Print

            ''PrintSo.Append("")                 'Set Debug Point
            SalesPersonName = IIf(CtrlSalesPerson.CtrlSalesPersons.SelectedIndex < 0, "", CtrlSalesPerson.CtrlSalesPersons.Text)
            Dim dsOtherCharges As New DataSet
            dsOtherCharges.Clear()
            Dim dt As DataTable
            If dsMain.Tables.Contains("SalesOrderOtherCharges") Then
                dt = dsMain.Tables("SalesOrderOtherCharges").Copy()
            End If
            If Not dt Is Nothing AndAlso dt.Rows.Count = 0 AndAlso Not TempOtherChargesTable Is Nothing Then
                dt = TempOtherChargesTable.Copy()
            ElseIf dt Is Nothing Then
                dt = TempOtherChargesTable.Copy()
            End If
            dsOtherCharges.Tables.Add(dt)
            dt.TableName = "NewOtherCharges"
            Dim strRemark As String = "" 'CtrlSalesInfo.CtrlTxtRemarks.Text

            'Dim dtOld As DataTable = dsMain.Tables("SalesOrderOtherCharges").Copy()
            'dsOtherCharges.Tables.Add(dtOld)
            Dim strSOStatus As String = ""


            '----Changes to show credit sale amount in sales invoice
            Dim crdsaleadjustamount As Double = 0
            Dim salesordernumber As String = ""
            If Not dsMain.Tables("SalesInvoice") Is Nothing AndAlso dsMain.Tables("SalesInvoice").Rows.Count > 0 Then
                For Each x In dsMain.Tables("SalesInvoice").Rows
                    salesordernumber = x("DocumentNumber")
                Next
            End If

            Dim crdsale As Double = 0
            Dim dtCreditSaleData As New DataTable
            Dim objclsReturn As New clsCashMemoReturn
            dtCreditSaleData = objclsReturn.getCreditSaleBillData("'" + salesordernumber + "'")
            If dtCreditSaleData.Rows.Count > 0 AndAlso Not dtCreditSaleData Is Nothing Then
                For Each y In dtCreditSaleData.Rows
                    crdsaleadjustamount = y("CreditSaleAdjustment")
                    crdsale = y("CreditSale")
                Next
            End If
            If crdsaleadjustamount > 0 Then
                crdsale = crdsale - crdsaleadjustamount
            End If

            If Not dsPayment Is Nothing AndAlso dsPayment.Tables.Contains("MSTRecieptType") Then

                If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                    strSOStatus = "Closed"
                Else
                    strSOStatus = "Open"

                End If
                '---abc
                'Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.Status, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dsPayment.Tables("MSTRecieptType"), CtrlSalesInfo.CtrlTxtCustOrdRef.Text, vSalesInvcNo, "", clsDefaultConfiguration.BillRoundOffAt, Nothing, dtPrinterInfo, strSOStatus, dsOtherCharges, ShowFullName:=clsDefaultConfiguration.PrintItemFullName _
                '                                                     , strReturnReason:=strRemark, dtSOBulkComboHDRPrint:=DtSoBulkComboHdr, dtSOBulkComboDtlPrint:=DtSoBulkComboDtl, SalesOrderCreationDate:=vSalesOrderCreationDate, SalesOrderDeliveryDate:=vSalesOrderExpectedDeliveryDate, strSalesPerson:=SalesPersonName, CreditSale:=crdsale)
            Else
                ' this is add to get status in print of SO document when call in edit
                'bug 251
                If lblPickupQty.Text <> String.Empty And lbldeliveredqty.Text <> String.Empty Then
                    If Val(lblOrderQty.Text) = Val(lblPickupQty.Text) + Val(lbldeliveredqty.Text) Then
                        strSOStatus = "Closed"
                    Else
                        strSOStatus = "Open"

                    End If
                End If

                ' this is add to get status in print of SO document when call in edit
                '---abc
                'Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.Status, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), Nothing, CtrlSalesInfo.CtrlTxtCustOrdRef.Text, vSalesInvcNo, "", clsDefaultConfiguration.BillRoundOffAt, Nothing, dtPrinterInfo, strSOStatus, dsOtherCharges, ShowFullName:=clsDefaultConfiguration.PrintItemFullName _
                '                                                       , strReturnReason:=strRemark, dtSOBulkComboHDRPrint:=DtSoBulkComboHdr, dtSOBulkComboDtlPrint:=DtSoBulkComboDtl, SalesOrderCreationDate:=vSalesOrderCreationDate, SalesOrderDeliveryDate:=vSalesOrderExpectedDeliveryDate, strSalesPerson:=SalesPersonName, CreditSale:=crdsale)

            End If
            'added By ketan SO Print
            Dim dtSiteInfo As DataTable = objComn.GetSiteInfo(clsAdmin.SiteCode)
            _pickupHistory = objPCSO.GetSalesOrderPickupHistory(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
            dtStrPrint = objPCSO.GetSalesOrderSTRPrint(clsAdmin.SiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
            SOStrDetails()
            GetSOPrintAddress()
            SOPrintRemarks()
            SOPrintDeliveryDetails()
            SOPrintPaymentDetails()
            SOPrintOrderDetails()
            SOPrintOrderComboDetails()
            SOPrintHeader(dtSiteInfo, dtCustmInfo)
            SOPrintPaymentDetails1()
            SOPrintPickupHistory()
            soprintarticlepaymentwisedetails()
            SOPrintReturnOrderComboDetails()
            DtCustDtlForSOPrint = objComn.GetCustDetailForSoPrint(dtCustmInfo.Rows(0)("CustomerNo").ToString())
            DtComboGridData = objComn.GetComboDtlForSoPrint(lblSalesOrderNo.Text)

            BarCodestring = ImageToBase64(CtrlTxtOrderNo.Text)
            'Print SP Pdf 
            '-----Added By Prasad for Invoice and Delivery Challan of Savoy Client
            If clsDefaultConfiguration.IsSavoy Then
                SOPrintInvoiceChallanHeader(dtSiteInfo, dtCustmInfo)
                SOPrintInvoiceChallan()
                GenerateSoInvoiceChallanPrint()
                GenerateSoDeliveryChallanPrint()
            Else
                  If clsCommon.checkDiscSpce(clsDefaultConfiguration.DayCloseReportPath.Substring(0, 3)) = False Then
                    ShowMessage("Insufficient disk space for saving files", "")
                End If
                GenerateSOPrint()
                GenerateOrderPreparationAsPerDeliveryDetails(dtDeliveryDetails)
                'GenerateOrderPreparationPrint()
                'GenerateSoDeliveryPrint()
            End If

            'GenerateOrderPreparationPrint()
            'GenerateSoDeliveryPrint()

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function


    Dim NEWdtDeliveryDetails As DataTable
    Dim NEWdtOrderComboDetails As DataTable
    Dim NewdtRemark As DataTable
    Private Function GenerateOrderPreparationAsPerDeliveryDetails(ByVal dtDeliveryDetails As DataTable)
        Try
            ' Dim TEMPdtDeliveryDetails = dtDeliveryDetails
            Dim DVdtOrderComboDetails As New DataView(dtOrderComboDetails)
            Dim NewdvRemark As New DataView(dtRemark)
            NewdtRemark = dtRemark.Copy
            Dim dvDeliveryDate As New DataView(dtDeliveryDetails)
            Dim dvDeliveryDateNEW As New DataView(dtDeliveryDetails)
            NEWdtOrderComboDetails = dtOrderComboDetails.Copy
            NEWdtDeliveryDetails = dtDeliveryDetails
            dvDeliveryDate = dvDeliveryDate.ToTable(True, "DeliveryTime", "DeliveryAddress").DefaultView
            dvDeliveryDate.Sort = "DeliveryTime ASC"
            '' SO Preparation Print call from here for Consolidated purpose 
            GenerateOrderPreparationPrint(True)

            If dvDeliveryDate.Count > 1 Then
                Dim i As Integer = 1
                For Each dr As DataRowView In dvDeliveryDate
                    dvDeliveryDateNEW.RowFilter = "DeliveryAddress='" & dr("DeliveryAddress").ToString & "' AND DeliveryTime='" & dr("DeliveryTime").ToString & "'"

                    ' dvDeliveryDateNEW.RowFilter = "DeliveryTime='" & dr("DeliveryTime").ToString & "'"
                    NEWdtOrderComboDetails.Rows.Clear()
                    NEWdtDeliveryDetails = dvDeliveryDateNEW.ToTable()
                    Dim datatable As DataTable
                    For Each drCombo As DataRowView In dvDeliveryDateNEW
                        DVdtOrderComboDetails.RowFilter = "SrNo='" & drCombo("SrNo").ToString & "'"
                        datatable = DVdtOrderComboDetails.ToTable
                        For Each drPrintCombo As DataRow In datatable.Rows
                            NEWdtOrderComboDetails.ImportRow(drPrintCombo)
                        Next
                    Next
                    If Not dtRemark Is Nothing AndAlso dtRemark.Rows.Count > 0 Then
                        NewdtRemark.Rows.Clear()
                        For Each drRemark As DataRowView In dvDeliveryDateNEW
                            NewdvRemark.RowFilter = "BillLineNo='" & drRemark("BillLineNo").ToString & "'"
                            datatable = NewdvRemark.ToTable
                            For Each drPrintRemark As DataRow In datatable.Rows
                                NewdtRemark.ImportRow(drPrintRemark)
                            Next
                        Next

                    End If
                    '' added by ketan Combo variation detail artical add in print 
                    objPCSO.SOPrintComboVariationDetails(dtOrderComboDetails, NEWdtOrderComboDetails)
                    ''SO Preparation Print call from here for Individual bifurcations  
                    GenerateOrderPreparationPrint(False, i)
                    i = i + 1
                Next
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Function

    Private Function PrintSalesOrdersReturn(ByVal drSite As DataRow, ByVal drHAdds As DataRow) As Boolean
        Try
            SalesPersonName = IIf(CtrlSalesPerson.CtrlSalesPersons.SelectedIndex < 0, "", CtrlSalesPerson.CtrlSalesPersons.Text)
            '---abc
            Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.SOReturnStatus, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesNo, dtCustmInfo, dsScanReturn.Tables("ItemScanDetails"), Nothing, CtrlTxtOrderNo.Text, vSalesInvcNo, "", clsDefaultConfiguration.BillRoundOffAt, Nothing, dtPrinterInfo, "Open", Nothing, txtReturnReason.Text, ShowFullName:=clsDefaultConfiguration.PrintItemFullName, strSalesPerson:=SalesPersonName)

            'Dim PrintSo As New System.Text.StringBuilder
            'If dsScan Is Nothing Then
            '    Exit Function
            'End If

            'PrintSo.Length = 0
            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
            'PrintSo.Append("                          SALES ORDER RETURN                                " & vbCrLf)
            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)
            'PrintSo.Append("Company Name   : " & "CreativeIT India Ltd" & "     Company Code : " & "CRITI02" & vbCrLf)

            'If vIsPrintOfficialAddressAllowed = False Then
            '    If Not (drSite Is Nothing) Then
            '        PrintSo.Append("Store Name         : " & drSite.Item("SiteOfficialName") & "                Store Code   : " & vSiteCode & vbCrLf)
            '        PrintSo.Append("Store Address       : " & drSite.Item("SiteAddressLn1") & vbCrLf & "                            " & _
            '                     drSite.Item("SiteAddressLn2") & " " & drSite.Item("SiteAddressLn3") & _
            '                     drSite.Item("SitePinCode") & vbCrLf)
            '    End If
            'Else
            '    PrintSo.Append(vbCrLf & "Print Official Address " & vbCrLf)
            'End If

            'If vHeaderNote = True Then
            '    PrintSo.Append(vbCrLf & "Header Information is Welcome" & vbCrLf)
            'End If

            'PrintSo.Append(vbCrLf & "----------------------------------------------------------------------------------------------------" & vbCrLf)
            'PrintSo.Append("Sales Order No              : " & CtrlSalesInfo.CtrlTxtOrderNo.Text & "                    Date    : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
            'PrintSo.Append("Cashier Name                : " & vUserName & vbCrLf & vbCrLf)

            'PrintSo.Append("Customer Name    : " & CtrlCustDtls1.lblCustNameValue.Text & "          Customer Code : " & vCustomerNo & vbCrLf)

            'PrintSo.Append("Home Address     : " & drHAdds.Item("Address").ToString & vbCrLf)
            'PrintSo.Append("                 : " & drHAdds.Item("City") & ", " & drHAdds.Item("State") & ", " & drHAdds.Item("Country") & ", " & drHAdds.Item("PinCode") & vbCrLf & vbCrLf)

            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
            'PrintSo.Append("Item Code       Item Desc                               Order Qty       ReturnQty       Price      Disc%  Tax%   NetAmt" & vbCrLf)
            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)

            'For Each drDtl As DataRow In dsScanReturn.Tables("ItemScanDetails").Select("PickUpQty>0 and IsStatus='Inserted'")
            '    PrintSo.Append(drDtl("ArticleCode") & Space(16 - drDtl("ArticleCode").ToString.Length) & _
            '                  drDtl("Discription") & Space(40 - drDtl("Discription").ToString.Length) & _
            '                  drDtl("Quantity") & Space(10 - drDtl("Quantity").ToString.Length) & _
            '                  drDtl("PickUpQty") & Space(10 - drDtl("PickUpQty").ToString.Length) & _
            '                  Format(drDtl("SellingPrice"), "0.0") & Space(10 - drDtl("SellingPrice").ToString.Length) & _
            '                  drDtl("Discount") & Space(10 - drDtl("Discount").ToString.Length) & _
            '                  drDtl("ExclTaxAmt") & Space(10 - drDtl("ExclTaxAmt").ToString.Length) & Format(drDtl("NetAmount"), "0.0") & vbCrLf)
            'Next

            'PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

            'If vIsPrintingTaxInfoAllowed = True Then
            '    PrintSo.Append("Print Tax Details..............." & vbCrLf & vbCrLf)
            'End If

            'PrintSo.Append("<Terms & Condition>" & vbCrLf & vbCrLf)

            'PrintSo.Append("Authorized Sign:...............            Customer Sign:................")

            'If vIsPromotionalMessageAllowed = True Then
            '    PrintSo.Append(vbCrLf & "Promotional Message is Welcome" & vbCrLf)
            'End If
            'If vFooterNote = True Then
            '    PrintSo.Append(vbCrLf & "Footer Information is Welcome" & vbCrLf)
            'End If

            'If vIsPrintPreviewAllowed = True Then
            '    fnPrint(PrintSo.ToString, "")          'Print Preview
            'End If
            'fnPrint(PrintSo.ToString, "PRN")   'Direct Print

            ''PrintSo.Append("")                 'Set Debug Point

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Function

    'Private Function PrintCreditVoucher(ByVal drSite As DataRow, ByVal VoucherAmt As Decimal) As Boolean
    '    Try
    '        Dim PrintSo As New System.Text.StringBuilder
    '        If dsScan Is Nothing Then
    '            Exit Function
    '        End If

    '        PrintSo.Length = 0
    '        PrintSo.Append("                          CREDIT VOUCHER AGAINST CUSTOMER RETURN                                " & vbCrLf & vbCrLf)
    '        '--changed by rama on 12-aug-2009 as voucher no print wrong bug no-0000841
    '        'PrintSo.Append("Credit Note / Voucher No : " & vTerminalID & CtrlSalesInfo.CtrlTxtOrderNo.Text & "     Date    : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
    '        PrintSo.Append("Credit Note / Voucher No : " & CVoucherNo & "     Date    : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
    '        '--
    '        PrintSo.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

    '        If vHeaderNote = True Then
    '            PrintSo.Append(vbCrLf & "Header Information is Welcome" & vbCrLf)
    '        End If

    '        If Not (drSite Is Nothing) Then
    '            PrintSo.Append("Store Name         : " & drSite.Item("SiteOfficialName") & "                Store Code   : " & vSiteCode & vbCrLf)
    '            PrintSo.Append("Store Address       : " & drSite.Item("SiteAddressLn1") & vbCrLf & "                            " & _
    '                         drSite.Item("SiteAddressLn2") & " " & drSite.Item("SiteAddressLn3") & _
    '                         drSite.Item("SitePinCode") & vbCrLf)
    '        End If
    '        PrintSo.Append("Store Tax Name1 :       Date    : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
    '        PrintSo.Append("Store Tax NameN :       Date    : " & Format(vCurrentDate, vDateFormat) & vbCrLf)

    '        If Not dsPayment.Tables("MSTRecieptType") Is Nothing AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
    '            PrintSo.Append("Text Credit Note :" & vCurrencyCode & " " & VoucherAmt & vbCrLf)
    '        End If
    '        PrintSo.Append("         Applicable at :" & drSite.Item("SiteOfficialName") & vbCrLf)
    '        PrintSo.Append("Issued against S.O. No. :" & CtrlSalesInfo.CtrlTxtOrderNo.Text & "   Date: " & Format(vCurrentDate, vDateFormat) & vbCrLf)

    '        'bug no-0000841
    '        PrintSo.Append("Valid for " & CVVoucherDay & " days " & vbCrLf)
    '        PrintSo.Append("From issue date if stamped and signed." & vbCrLf)
    '        PrintSo.Append("Specific and unique numbering (same as the Voucher number)" & vbCrLf & vbCrLf)

    '        PrintSo.Append("                                          _______________" & vbCrLf & vbCrLf)
    '        PrintSo.Append("                                          Signed" & vbCrLf)

    '        PrintSo.Append("<Terms & Condition If Any>" & vbCrLf & vbCrLf)

    '        If vFooterNote = True Then
    '            PrintSo.Append(vbCrLf & "Footer Information is Welcome" & vbCrLf)
    '        End If

    '        If vIsPrintPreviewAllowed = True Then
    '            fnPrint(PrintSo.ToString, "")          'Print Preview
    '        End If
    '        fnPrint(PrintSo.ToString, "PRN")   'Direct Print

    '        'PrintSo.Append("")                 'Set Debug Point

    '    Catch ex As Exception
    '        ShowMessage(ex.Message, getValueByKey("CLAE05"))
    '    End Try
    'End Function

    Private Function PrintSalesOrdersInvoice(ByVal drSite As DataRow, ByVal drHAdds As DataRow, Optional ByVal drDAdds As DataRow = Nothing, Optional ByVal dtZInvc As DataTable = Nothing) As Boolean
        'Dim PrintInvc As New System.Text.StringBuilder

        'Try
        '    If dsScan Is Nothing Then
        '        Exit Function
        '    End If

        '    PrintInvc.Length = 0
        '    PrintInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
        '    PrintInvc.Append("                          SALES INVOICE                                 " & vbCrLf)
        '    PrintInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

        '    PrintInvc.Append("Company Name   : " & "CreativeIT India Ltd" & "     Company Code : " & "CRITI02" & vbCrLf)

        '    If vIsPrintOfficialAddressAllowed = False Then
        '        If Not (drSite Is Nothing) Then
        '            PrintInvc.Append("Store Name         : " & drSite.Item("SiteOfficialName") & "                Store Code   : " & vSiteCode & vbCrLf)
        '            PrintInvc.Append("Store Address       : " & drSite.Item("SiteAddressLn1") & vbCrLf & "                            " & _
        '                         drSite.Item("SiteAddressLn2") & " " & drSite.Item("SiteAddressLn3") & _
        '                         drSite.Item("SitePinCode") & vbCrLf)
        '        End If
        '    Else
        '        PrintInvc.Append(vbCrLf & "Print Official Address " & vbCrLf)
        '    End If

        '    If vHeaderNote = True Then
        '        PrintInvc.Append(vbCrLf & "Header Information is Welcome" & vbCrLf)
        '    End If

        '    PrintInvc.Append(vbCrLf & "----------------------------------------------------------------------------------------------------" & vbCrLf)
        '    PrintInvc.Append("Sales Invoice No            : " & vSalesInvcNo & "  Reference Sales Order : " & CtrlSalesInfo.CtrlTxtOrderNo.Text & "   Date : " & Format(vCurrentDate, "dd-MM-yyyy") & vbCrLf)
        '    PrintInvc.Append("Expected Delivery Date  : " & Format(CtrlSalesInfo.CtrlDtExpDelDate.Value, vDateFormat) & vbCrLf)
        '    PrintInvc.Append("Cashier Name                : " & vUserName & vbCrLf & vbCrLf)

        '    PrintInvc.Append("Customer Name    : " & CtrlCustDtls1.lblCustNameValue.Text & "          Customer Code : " & vCustomerNo & vbCrLf)

        '    PrintInvc.Append("Home Address       : " & drHAdds.Item("Address").ToString & vbCrLf)
        '    PrintInvc.Append("                           : " & drHAdds.Item("City") & ", " & drHAdds.Item("State") & ", " & drHAdds.Item("Country") & ", " & drHAdds.Item("PinCode") & vbCrLf & vbCrLf)

        '    If drDelvAdds Is Nothing Then
        '        PrintInvc.Append("Delivery Address : " & CtrlCustDtls1.lblAddressValue.Text)
        '        PrintInvc.Append("Tel. No.  	   : " & CtrlCustDtls1.lblTelNoValue.Text & vbCrLf & vbCrLf)
        '    Else
        '        PrintInvc.Append("Delivery Address : " & drDAdds.Item("Address").ToString & vbCrLf)
        '        PrintInvc.Append("                          : " & drDAdds.Item("City") & ", " & drDAdds.Item("State") & ", " & drDAdds.Item("Country") & ", " & drDAdds.Item("PinCode").ToString.Trim & vbCrLf)
        '        PrintInvc.Append("Tel. No.  	             : " & drDAdds.Item("OfficeNo") & vbCrLf & vbCrLf)
        '    End If

        '    PrintInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
        '    PrintInvc.Append("Item Code       Item Desc                               Qty       Price      Disc%  Tax%   NetAmt" & vbCrLf)
        '    PrintInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)

        '    For Each drDtl As DataRow In dsScan.Tables("ItemScanDetails").Rows
        '        PrintInvc.Append(drDtl("ArticleCode") & Space(16 - drDtl("ArticleCode").ToString.Length) & _
        '                      drDtl("Discription") & Space(40 - drDtl("Discription").ToString.Length) & _
        '                      drDtl("Quantity") & Space(10 - drDtl("Quantity").ToString.Length) & _
        '                      Format(drDtl("SellingPrice"), "0.0") & Space(10 - drDtl("SellingPrice").ToString.Length) & _
        '                      drDtl("Discount") & Space(10 - drDtl("Discount").ToString.Length) & _
        '                      drDtl("ExclTaxAmt") & Space(10 - drDtl("ExclTaxAmt").ToString.Length) & Format(drDtl("NetAmount"), "0.0") & vbCrLf)
        '    Next
        '    PrintInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

        '    PrintInvc.Append("Total Qty    : " & lblOrderQty.Text & vbCrLf)
        '    PrintInvc.Append("Gross Amt  : " & CtrlCashSummary1.lbltxt1 & vbCrLf)
        '    PrintInvc.Append("Disc  Amt   : " & CtrlCashSummary1.lbltxt2 & vbCrLf)
        '    PrintInvc.Append("Incl. Amt   : " & Format(CDbl(dsScan.Tables("ItemScanDetails").Compute("Sum(IncTaxAmt)", ""))), "0.00" & vbCrLf)
        '    PrintInvc.Append("Excl. Amt   : " & Format(CDbl(dsScan.Tables("ItemScanDetails").Compute("Sum(ExclTaxAmt)", ""))), "0.00" & vbCrLf)
        '    PrintInvc.Append("Net   Amt   : " & CtrlCashSummary1.lbltxt4 & vbCrLf & vbCrLf)

        '    PrintInvc.Append("Payment Received :" & vbCrLf)
        '    PrintInvc.Append("Minimum Advance To Pay: (INR)  " & CtrlCashSummary1.lbltxt5 & vbCrLf & vbCrLf)

        '    PrintInvc.Append("Advance Amount Paid :" & vbCrLf)
        '    'PrintInvc.Append("Tender      :" & vbCrLf)

        '    If dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
        '        Dim RowIndexPayment As Integer = 0
        '        For Each drPayment As DataRow In dsPayment.Tables("MSTRecieptType").Rows
        '            PrintInvc.Append("Tender      :" & drPayment("RecieptType").ToString() & vbCrLf)
        '            If RowIndexPayment = 0 Then
        '                PrintInvc.Append("Tender Info :" & drPayment("Amount") & "  Date : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
        '            End If
        '            If RowIndexPayment > 0 Then
        '                PrintInvc.Append("Tender Info :" & drPayment("Amount") & vbCrLf)
        '            End If
        '            RowIndexPayment += 1
        '        Next

        '    End If

        '    PrintInvc.Append(vbCrLf & "Total Paid Amount:" & vbCrLf)
        '    PrintInvc.Append("Tender      :" & vbCrLf)
        '    If dsMain.Tables("SalesInvoice").Rows.Count > 0 Then
        '        PrintInvc.Append("Tender Info :" & dsMain.Tables("SalesInvoice").Compute("Sum(AmountTendered)", "") & "  Date : " & dsMain.Tables("SalesInvoice").Rows(0).Item("CREATEDON") & vbCrLf)
        '        PrintInvc.Append("Tender Info :" & vbCrLf)
        '    Else
        '        PrintInvc.Append("Tender Info :" & CtrlCashSummary1.lbltxt5 & vbCrLf)
        '    End If

        '    PrintInvc.Append("Balance Amount Due: " & CtrlCashSummary1.lbltxt6 & vbCrLf & vbCrLf)

        '    If vIsPrintingTaxInfoAllowed = True Then
        '        PrintInvc.Append("Print Tax Details..............." & vbCrLf & vbCrLf)
        '    End If

        '    PrintInvc.Append("<Terms & Condition>" & vbCrLf & vbCrLf)

        '    PrintInvc.Append("Authorized Sign:...............            Customer Sign:................" & vbCrLf)

        '    If vIsPromotionalMessageAllowed = True Then
        '        PrintInvc.Append(vbCrLf & "Promotional Message is Welcome" & vbCrLf)
        '    End If
        '    If vFooterNote = True Then
        '        PrintInvc.Append(vbCrLf & "Footer Information is Welcome" & vbCrLf)
        '    End If

        '    If clsDefaultConfiguration.IsPrintPreviewAllowed = True Then
        '        fnPrint(PrintInvc.ToString, "")          'Print Preview
        '    End If
        '    fnPrint(PrintInvc.ToString, "PRN")   'Direct Print

        '    'PrintInvc.Append("")                 'Set Debug Point
        Try
            Dim dsOtherCharges As New DataSet
            dsOtherCharges.Clear()
            Dim dt As DataTable
            If dsMain.Tables.Contains("SalesOrderOtherCharges") Then
                dt = dsMain.Tables("SalesOrderOtherCharges").Copy()
            End If
            If Not dt Is Nothing AndAlso dt.Rows.Count = 0 Then
                dt = TempOtherChargesTable.Copy()
            ElseIf dt Is Nothing Then
                dt = TempOtherChargesTable.Copy()
            End If
            dsOtherCharges.Tables.Add(dt)
            dt.TableName = "NewOtherCharges"
            '---abc
            'If dtZInvc IsNot Nothing Then
            '    Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.Payment, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dtZInvc, CtrlSalesInfo.CtrlTxtCustOrdRef.Text, vSalesInvcNo, "", clsDefaultConfiguration.BillRoundOffAt, Nothing, dtPrinterInfo, "", dsOtherCharges, "", dtSalesOrderTaxDetails, ShowFullName:=clsDefaultConfiguration.PrintItemFullName _
            '                                                            , dtSOBulkComboHDRPrint:=DtSoBulkComboHdr, dtSOBulkComboDtlPrint:=DtSoBulkComboDtl, SalesOrderDeliveryDate:=vSalesOrderExpectedDeliveryDate)
            'Else
            '    Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.Payment, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dsPayment.Tables("MSTRecieptType"), CtrlSalesInfo.CtrlTxtCustOrdRef.Text, vSalesInvcNo, "", clsDefaultConfiguration.BillRoundOffAt, Nothing, dtPrinterInfo, "", dsOtherCharges, "", dtSalesOrderTaxDetails, ShowFullName:=clsDefaultConfiguration.PrintItemFullName _
            '                                                            , dtSOBulkComboHDRPrint:=DtSoBulkComboHdr, dtSOBulkComboDtlPrint:=DtSoBulkComboDtl, SalesOrderDeliveryDate:=vSalesOrderExpectedDeliveryDate)
            'End If

        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function

    Private Function PrintSalesOrdersDelivery(ByVal drSite As DataRow, ByVal drHAdds As DataRow, Optional ByVal drDAdds As DataRow = Nothing) As Boolean
        'Dim PrintDelInvc As New System.Text.StringBuilder

        'Try
        '    If dsScan Is Nothing Then
        '        Exit Function
        '    End If

        '    PrintDelInvc.Length = 0
        '    PrintDelInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
        '    PrintDelInvc.Append("                          SALES OUTBOUND DELIVERY                       " & vbCrLf)
        '    PrintDelInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

        '    PrintDelInvc.Append("Company Name   : " & "CreativeIT India Ltd" & "     Company Code : " & "CRITI02" & vbCrLf)

        '    If vIsPrintOfficialAddressAllowed = False Then
        '        If Not (drSite Is Nothing) Then
        '            PrintDelInvc.Append("Store Name         : " & drSite.Item("SiteOfficialName") & "                Store Code   : " & vSiteCode & vbCrLf)
        '            PrintDelInvc.Append("Store Address       : " & drSite.Item("SiteAddressLn1") & vbCrLf & "                            " & _
        '                         drSite.Item("SiteAddressLn2") & " " & drSite.Item("SiteAddressLn3") & _
        '                         drSite.Item("SitePinCode") & vbCrLf)
        '        End If
        '    Else
        '        PrintDelInvc.Append(vbCrLf & "Print Official Address " & vbCrLf)
        '    End If

        '    If vHeaderNote = True Then
        '        PrintDelInvc.Append(vbCrLf & "Header Information is Welcome" & vbCrLf)
        '    End If

        '    PrintDelInvc.Append(vbCrLf & "----------------------------------------------------------------------------------------------------" & vbCrLf)
        '    PrintDelInvc.Append("Sales Invoice No            : " & vSalesInvcNo & "  Reference Sales Order : " & CtrlSalesInfo.CtrlTxtOrderNo.Text & "   Date : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
        '    PrintDelInvc.Append("Expected Delivery Date  : " & Format(CtrlSalesInfo.CtrlDtExpDelDate.Value, vDateFormat) & vbCrLf)
        '    PrintDelInvc.Append("Cashier Name                : " & vUserName & vbCrLf & vbCrLf)

        '    PrintDelInvc.Append("Customer Name    : " & CtrlCustDtls1.lblCustNameValue.Text & "          Customer Code : " & vCustomerNo & vbCrLf)

        '    PrintDelInvc.Append("Home Address       : " & drHAdds.Item("Address").ToString & vbCrLf)
        '    PrintDelInvc.Append("                           : " & drHAdds.Item("City") & ", " & drHAdds.Item("State") & ", " & drHAdds.Item("Country") & ", " & drHAdds.Item("PinCode") & vbCrLf & vbCrLf)

        '    If drDelvAdds Is Nothing Then
        '        PrintDelInvc.Append("Delivery Address : " & CtrlCustDtls1.lblAddressValue.Text)
        '        PrintDelInvc.Append("Tel. No.  	   : " & CtrlCustDtls1.lblTelNoValue.Text & vbCrLf & vbCrLf)
        '    Else
        '        PrintDelInvc.Append("Delivery Address : " & drDAdds.Item("Address").ToString & vbCrLf)
        '        PrintDelInvc.Append("                          : " & drDAdds.Item("City") & ", " & drDAdds.Item("State") & ", " & drDAdds.Item("Country") & ", " & drDAdds.Item("PinCode").ToString.Trim & vbCrLf)
        '        PrintDelInvc.Append("Tel. No.  	             : " & drDAdds.Item("OfficeNo") & vbCrLf & vbCrLf)
        '    End If

        '    PrintDelInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)
        '    PrintDelInvc.Append("Item Code       Item Desc                               Qty       Price      Disc%  Tax%   NetAmt" & vbCrLf)
        '    PrintDelInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf)

        '    Dim vNetAmount As Double = 0.0
        '    Dim vDiscount As Double = 0.0
        '    Dim vExclTaxAmt As Double = 0.0
        '    For Each drDtl As DataRow In dsScan.Tables("ItemScanDetails").Select("PickUpQty > 0")

        '        vDiscount = drDtl("PickUpQty") * (drDtl("LineDiscount") / drDtl("Quantity"))
        '        vExclTaxAmt = drDtl("PickUpQty") * (drDtl("ExclTaxAmt") / drDtl("Quantity"))
        '        vNetAmount = (drDtl("PickUpQty") * drDtl("SellingPrice")) + vExclTaxAmt - vDiscount

        '        PrintDelInvc.Append(drDtl("ArticleCode") & Space(16 - drDtl("ArticleCode").ToString.Length) & _
        '                      drDtl("Discription") & Space(40 - drDtl("Discription").ToString.Length) & _
        '                      drDtl("PickUpQty") & Space(10 - drDtl("PickUpQty").ToString.Length) & _
        '                      Format(drDtl("SellingPrice"), "0.0") & Space(10 - drDtl("SellingPrice").ToString.Length) & _
        '                      drDtl("Discount") & Space(10 - drDtl("Discount").ToString.Length) & _
        '                      drDtl("ExclTaxAmt") & Space(10 - drDtl("ExclTaxAmt").ToString.Length) & Format(vNetAmount, "0.0") & vbCrLf)
        '    Next
        '    PrintDelInvc.Append("----------------------------------------------------------------------------------------------------" & vbCrLf & vbCrLf)

        '    PrintDelInvc.Append("Total Qty : " & lblOrderQty.Text & vbCrLf)
        '    PrintDelInvc.Append("PickUpQty : " & lblPickupQty.Text & vbCrLf)
        '    PrintDelInvc.Append("Gross Amt : " & CtrlCashSummary1.lbltxt1 & vbCrLf)
        '    PrintDelInvc.Append("Disc  Amt : " & CtrlCashSummary1.lbltxt2 & vbCrLf)
        '    PrintDelInvc.Append("Incl. Amt : " & dsScan.Tables("ItemScanDetails").Compute("SUM(IncTaxAmt)", "") & vbCrLf)
        '    PrintDelInvc.Append("Excl. Amt : " & dsScan.Tables("ItemScanDetails").Compute("SUM(ExclTaxAmt)", "") & vbCrLf)
        '    PrintDelInvc.Append("Net   Amt : " & CtrlCashSummary1.lbltxt4 & vbCrLf & vbCrLf)

        '    PrintDelInvc.Append("Payment Received :" & vbCrLf)
        '    PrintDelInvc.Append("Minimum Advance To Pay: (INR)  " & CtrlCashSummary1.lbltxt5 & vbCrLf & vbCrLf)

        '    PrintDelInvc.Append("Advance Amount Paid :" & vbCrLf)
        '    PrintDelInvc.Append("Tender      :" & vbCrLf)

        '    If Not (dsPayment.Tables("MSTRecieptType") Is Nothing) AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
        '        Dim RowIndexPayment As Integer = 0
        '        For Each drPayment As DataRow In dsPayment.Tables("MSTRecieptType").Rows
        '            If RowIndexPayment = 0 Then
        '                PrintDelInvc.Append("Tender Info :" & drPayment("Amount") & "  Date : " & Format(vCurrentDate, vDateFormat) & vbCrLf)
        '            End If
        '            If RowIndexPayment > 0 Then
        '                PrintDelInvc.Append("Tender Info :" & drPayment("Amount") & vbCrLf)
        '            End If
        '            RowIndexPayment += 1
        '        Next

        '    End If

        '    PrintDelInvc.Append(vbCrLf & "Total Paid Amount:" & vbCrLf)
        '    PrintDelInvc.Append("Tender      :" & vbCrLf)
        '    If dsMain.Tables("SalesInvoice").Rows.Count > 0 Then
        '        PrintDelInvc.Append("Tender Info :" & dsMain.Tables("SalesInvoice").Compute("Sum(AmountTendered)", "") & "  Date : " & dsMain.Tables("SalesInvoice").Rows(0).Item("CREATEDON") & vbCrLf)
        '        PrintDelInvc.Append("Tender Info :" & vbCrLf)
        '    Else
        '        PrintDelInvc.Append("Tender Info :" & CtrlCashSummary1.lbltxt5 & vbCrLf)
        '    End If

        '    PrintDelInvc.Append("Balance Amount Due: " & CtrlCashSummary1.lbltxt6 & vbCrLf & vbCrLf)

        '    If vIsPrintingTaxInfoAllowed = True Then
        '        PrintDelInvc.Append("Print Tax Details..............." & vbCrLf & vbCrLf)
        '    End If

        '    PrintDelInvc.Append("<Terms & Condition>" & vbCrLf & vbCrLf)

        '    PrintDelInvc.Append("Authorized Sign:..............." & vbTab & "Customer Sign:................")

        '    If vIsPromotionalMessageAllowed = True Then
        '        PrintDelInvc.Append(vbCrLf & "Promotional Message is Welcome" & vbCrLf)
        '    End If
        '    If vFooterNote = True Then
        '        PrintDelInvc.Append(vbCrLf & "Footer Information is Welcome" & vbCrLf)
        '    End If

        '    If vIsPrintPreviewAllowed = True Then
        '        fnPrint(PrintDelInvc.ToString, "")          'Print Preview
        '    End If
        '    fnPrint(PrintDelInvc.ToString, "PRN")   'Direct Print

        '    'PrintDelInvc.Append("")                 'Set Debug Point

        Try
            '---abc
            'Dim strRemark As String = CtrlSalesInfo.CtrlTxtRemarks.Text
            'SalesPersonName = IIf(CtrlSalesPerson.CtrlSalesPersons.SelectedIndex < 0, "", CtrlSalesPerson.CtrlSalesPersons.Text)
            'Dim objPrintDll As New SpectrumPrint.clsPrintSalesOrder(vIsPrintPreviewAllowed, clsDefaultConfiguration.RoundOffRequired, SpectrumPrint.clsPrintSalesOrder.PrintSOTransactionSet.DeliveryNote, clsAdmin.SiteCode, clsAdmin.CurrencyCode, clsAdmin.UserName, vSalesNo, CtrlCustDtls1.dtCustmInfo, dsScan.Tables("ItemScanDetails"), dsPayment.Tables("MSTRecieptType"), CtrlSalesInfo.CtrlTxtCustOrdRef.Text,
            '                                                        vSalesInvcNo, "", clsDefaultConfiguration.BillRoundOffAt, Nothing, dtPrinterInfo, strReturnReason:=strRemark, ShowFullName:=clsDefaultConfiguration.PrintItemFullName _
            '                                                     , dtSOBulkComboHDRPrint:=DtSoBulkComboHdr, dtSOBulkComboDtlPrint:=DtSoBulkComboDtl, SalesOrderDeliveryDate:=vSalesOrderExpectedDeliveryDate, strSalesPerson:=SalesPersonName)



        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function

#End Region
#Region "Common Button Action"


    Private IsGiftVoucher As Boolean

    ''' <summary>
    ''' Accept Payment for current Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>

    Private Sub BtnAcceptPayment_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 'Handles BtnSOAcceptPayment.Click
        Try
            grdSOItems.FinishEditing()

            If boolIsReturn = False Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    'ShowMessage("Please Scan Article first", "Sales Order Information")
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                    'ElseIf CDbl(lblminadvancepaid.Text.Trim) <= 0 Then
                    '    BtnSaveSalesOrder_Click(sender, e)
                    '    Exit Sub
                ElseIf Not CDbl(CtrllblBaltoPay.Text) > Decimal.Zero AndAlso Not CDbl(CtrllblBaltoPay.Text) < Decimal.Zero Then
                    ShowMessage(getValueByKey("BL073"), "BL073 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                If IsBtnSave Then
                    rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                End If
                IsBtnSave = False
                Dim objPayment As New frmNAcceptPaymentPC()
                objPayment.TotalBillAmount = CDbl(CtrllblBaltoPay.Text)
                objPayment.ParentRelation = "SalesOrder"

                If CDbl(CtrllblBaltoPay.Text) < 0 Then
                    objPayment.MinimumBillAmount = CDbl(CtrllblBaltoPay.Text)
                ElseIf CDbl(CtrllblNetAmt.Text) = CDbl(lblminadvancepaid.Text) Then
                    objPayment.MinimumBillAmount = CDbl(CtrllblBaltoPay.Text)
                Else
                    objPayment.MinimumBillAmount = CDbl(lblminadvancepaid.Text)
                End If
                ' CtrlCustDtls1.lblCustTypeValue(lblCustTypeValue)
                'If CtrlCustDtls1.lblCustTypeValue.Text <> String.Empty Then
                objPayment.CLPCustomerCardNumber = vCustomerNo
                'End If
                objPayment.AcceptEditBillDataSet = dsPayment
                objPayment.PaymentType = clsAcceptPayment.PaymentType.Advance

                If Val(lblPickupQty.Text) = 0 Then
                    objPayment.AvoidCreditSalesTender = True
                End If
                objPayment.CreditSaleLimitSOPickUpAmt = Val(lblminadvancepaid.Text)
                'Dim obj As New frmSpecialPrompt("What you want to pay")
                'obj.ShowTextBox = True
                'obj.ShowDialog()
                'If Not obj.GetResult Is Nothing Then
                '    objPayment.CustomerWantPay = obj.GetResult
                'End If

                '  New form for accepting payment in sales order.
                Dim preMinAmout As String = "0"
                'lblminadvancepaid.Text = CDbl(lblminadvancepaid.Text) - CDbl(CtrllblCreditSale.Text)
                If CDbl(CDbl(CtrllblBaltoPay.Text.Trim)) < 0 AndAlso Not (CDbl(CDbl(CtrllblBaltoPay.Text.Trim)) = CDbl(CDbl(lblReceivedAmt.Text.Trim))) Then
                Else
                    Dim Obj As New frmNHowMuchtoPay
                    Obj.CtrlTxtMinAmt.Text = lblminadvancepaid.Text
                    preMinAmout = lblminadvancepaid.Text
                    Obj.CtrlTxtPickAmt.Text = PickAmtToPay() 'Math.Round(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "") Is DBNull.Value, 0, dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "")), 2)
                    If CDbl(preMinAmout) < CDbl(Obj.CtrlTxtPickAmt.Text) Then
                        Obj.CtrlTxtPickAmt.Text = preMinAmout
                    End If
                    If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                        If CDbl(CtrllblBaltoPay.Text) > CDbl(Obj.CtrlTxtPickAmt.Text) Then
                            Obj.CtrlTxtPickAmt.Text = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                        End If
                    End If
                    Obj.CtrlTxtPickAmt.Text = MyRound(CDbl(Obj.CtrlTxtPickAmt.Text), clsDefaultConfiguration.BillRoundOffAt)
                    Obj.TotalBalAmt = CDbl(CtrllblBaltoPay.Text)
                    Obj.ctrlTxtHowMuchPay.Text = CDbl(lblminadvancepaid.Text)
                    Obj.NetAmount = CtrllblNetAmt.Text
                    Obj.CreditSales = CtrllblCreditSale.Text
                    Obj.AmtPaid = CtrllblAmtPaid.Text
                    Obj.IsEditSalesOrder = True
                    If Obj.TotalBalAmt > 0 Then
                        Obj.ShowDialog(Me)  ' this is add on 24.feb.2010 because this screen appear alone if user toggle with ALT key
                    End If


                    If Obj.DialogResult = Windows.Forms.DialogResult.Cancel Then
                        'IsBtnSave = True
                        IsBtnSave = Obj.IsNew
                        lblminadvancepaid.Text = Obj.CtrlTxtMinAmt.Text
                        If Obj.blnAllowtoGoPaymentScreen = False Then
                            Exit Sub
                        End If
                        If Obj.ctrlTxtHowMuchPay.Text = Decimal.Zero Then
                            BtnSaveSalesOrder_Click(sender, e, True)
                            Exit Sub
                        End If
                    Else
                        lblminadvancepaid.Text = preMinAmout
                        Exit Sub
                    End If
                    ' end New form for accepting payment in sales order.
                    If Not Obj.ctrlTxtHowMuchPay Is Nothing Then
                        objPayment.CustomerWantPay = Obj.ctrlTxtHowMuchPay.Text
                        objPayment.ctrlPayCash.txtCash.Value = Obj.ctrlTxtHowMuchPay.Text
                    End If

                End If


                objPayment.TotalPick = PickAmtToPay()
                If CDbl(preMinAmout) < CDbl(objPayment.TotalPick) Then
                    objPayment.TotalPick = preMinAmout
                End If
                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(objPayment.TotalPick) Then
                        objPayment.TotalPick = CDbl(CtrllblBaltoPay.Text)
                    End If
                End If
                objPayment.IsChangeTender = True
                objPayment.RoundAt = clsDefaultConfiguration.BillRoundOffAt

                Dim dtCustomer As New DataTable   '' added by nikhil to get customerdetails for PC
                dtCustomer = objComn.GetCustomerDetails(CustomerNo, clsAdmin.SiteCode)
                If Not dtCustomer Is Nothing AndAlso dtCustomer.Rows.Count > 0 Then
                    objPayment.CustName = dtCustomer.Rows(0)("NameOnCard").ToString
                    objPayment.CompName = dtCustomer.Rows(0)("CompanyName").ToString
                    objPayment.MobNumber = dtCustomer.Rows(0)("Mobileno").ToString
                End If
                objPayment.IsCreditSale = True 'vipin
                objPayment.ShowDialog(Me)
                'added by Khusrao Adil for savoy
                OrderUpdatePaymentTermId = objPayment.PaymentTermNameId
                '
                _dsPayment = New DataSet
                _dsPayment = objPayment.ReciptTotalAmount()


                If _dsPayment.Tables.Count > 0 Then
                    If _dsPayment.Tables(0).Rows.Count > 0 Then
                        For Each dr2 In _dsPayment.Tables(0).Rows  'vipin
                            If dr2("NEFTReferenceNo") <> "-" Then
                                dr2("Number") = dr2("NEFTReferenceNo")
                            End If

                            If dr2("RTGSReferenceNo") <> "-" Then
                                dr2("Number") = dr2("NEFTReferenceNo")
                            End If
                            dr2("RefNo_4") = dr2("Remarks")
                        Next
                    End If
                End If


                If objPayment.IsCancelAcceptPayment = False AndAlso _dsPayment.Tables.Count > 0 Then

                    Dim dv As New DataView(_dsPayment.Tables(0), "RecieptTypeCode='CreditVouc(I)'", "", DataViewRowState.CurrentRows)
                    If dv.Count > 0 Then
                        IssuingCV = True
                    End If
                    CalculateSalesOrderSummory(dsScan)
                Else
                    lblminadvancepaid.Text = preMinAmout
                    Exit Sub
                End If
                objPayment.Close()
                Me.Select()



                If objPayment.Action = "Save" Then
                    IsGiftVoucher = False

                    'Added by Rohit for CR5938

                    _dDueDate = objPayment.dDueDate
                    _strRemarks = objPayment.strRemarks

                    BtnSaveSalesOrder_Click(sender, e, True)
                Else
                    IsBtnSave = True
                End If
                If objPayment.Action = "Gift" Then
                    IsGiftVoucher = True
                    GiftReceiptMessage = objPayment.GiftReceiptMessage

                    'Added by Rohit for CR5938

                    _dDueDate = objPayment.dDueDate
                    _strRemarks = objPayment.strRemarks

                    BtnSaveSalesOrder_Click(sender, e)
                Else
                    IsBtnSave = True
                End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub
    Private Sub BtnPayCash_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try

            grdSOItems.FinishEditing()

            If boolIsReturn = False Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    'ShowMessage("Please Scan Article first", "Sales Order Information")
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                ElseIf Not CDbl(CtrllblBaltoPay.Text) > Decimal.Zero Then
                    ShowMessage(getValueByKey("BL073"), "BL073 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                IsBtnSave = False
                'Dim objCash As New frmSpecialPrompt("Enter Amount ")
                'objCash.lblMessage.Text = " Bill Amount is " & CDbl(CtrlCashSummary1.lbltxt4)
                'objCash.ShowTextBox = True
                'objCash.lblMessage.Visible = True
                'objCash.ShowDialog()
                'Dim Value As Double = objCash.GetResult
                'objCash.Dispose()
                'If Value > 0 Then
                '    If Value > CDbl(CtrlCashSummary1.lbltxt4) Then
                '        Dim ReturnAmt As Double = Value - CDbl(CtrlCashSummary1.lbltxt4)
                '        Dim strshowmsg As String = ""
                '        strshowmsg = "Bill Amt to Pay " & CDbl(CtrlCashSummary1.lbltxt4) & vbLf
                '        strshowmsg = strshowmsg & "Customer Paid " & Value & vbLf
                '        strshowmsg = strshowmsg & "Return to Customer " & ReturnAmt & " Amount" & vbLf
                '        ShowMessage(strshowmsg, "Information")
                '    End If
                '    If Value < CDbl(CtrlCashSummary1.lbltxt4) Then
                '        ShowMessage(getValueByKey("CM032"), "CM032")
                '        'ShowMessage("Amount is not Settle ", "Information")
                '        Exit Sub
                '    End If

                '    Dim objPayment As New frmNAcceptPayment()
                '    objPayment.ParentRelation = "SalesOrder"
                '    objPayment.TotalBillAmount = Math.Round(CDbl(CtrlCashSummary1.lbltxt1), 0)
                '    objPayment.MinimumBillAmount = Math.Round(CDbl(CtrlCashSummary1.lbltxt5), 0)

                '    objPayment.PaymentType = clsAcceptPayment.PaymentType.Advance
                '    objPayment.Show()

                '    objPayment.TotalBillAmount = CtrlCashSummary1.lbltxt4
                '    objPayment.Enabled = False
                '    objPayment.cboRecieptType.SelectedValue = "Cash"
                '    objPayment.TotalBillAmount = CtrlCashSummary1.lbltxt4
                '    objPayment.InsertReceiptCashDetails()

                '    _dsPayment = New DataSet
                '    _dsPayment = objPayment.ReciptTotalAmount()
                '    If objPayment.IsCancelAcceptPayment = False Then
                '        CalculateSalesOrderSummory(dsScan)
                '    End If

                '    If dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables(0).Rows.Count > 0 Then
                '        objPayment.Close()
                '        BtnSaveSalesOrder_Click(sender, e)
                '    End If

                'End If

                Dim Obj As New frmNHowMuchtoPay
                Dim preMinAmout As String = "0"
                'lblminadvancepaid.Text = CDbl(lblminadvancepaid.Text) - CDbl(CtrllblCreditSale.Text)
                Obj.CtrlTxtMinAmt.Text = lblminadvancepaid.Text
                preMinAmout = lblminadvancepaid.Text
                Obj.CtrlTxtPickAmt.Text = PickAmtToPay() 'Math.Round(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "") Is DBNull.Value, 0, dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "")), 2)
                'If CDbl(preMinAmout) < CDbl(Obj.CtrlTxtPickAmt.Text) Then
                '    Obj.CtrlTxtPickAmt.Text = preMinAmout
                'End If

                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(Obj.CtrlTxtPickAmt.Text) Then
                        Obj.CtrlTxtPickAmt.Text = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                    End If
                End If

                Obj.CtrlTxtPickAmt.Text = MyRound(Obj.CtrlTxtPickAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                Obj.TotalBalAmt = CDbl(CtrllblBaltoPay.Text)
                Obj.ctrlTxtHowMuchPay.Text = CDbl(lblminadvancepaid.Text)
                Obj.NetAmount = CtrllblNetAmt.Text
                Obj.CreditSales = CtrllblCreditSale.Text
                Obj.AmtPaid = CtrllblAmtPaid.Text
                Obj.IsEditSalesOrder = True
                Obj.ShowDialog()

                If Obj.DialogResult = Windows.Forms.DialogResult.Cancel Then
                    'IsBtnSave = True
                    IsBtnSave = Obj.IsNew
                    lblminadvancepaid.Text = Obj.CtrlTxtMinAmt.Text
                    If Obj.blnAllowtoGoPaymentScreen = False Then
                        Exit Sub
                    End If
                    If Obj.ctrlTxtHowMuchPay.Text = Decimal.Zero Then
                        BtnSaveSalesOrder_Click(sender, e, True)
                        Exit Sub
                    End If
                Else
                    lblminadvancepaid.Text = preMinAmout
                    Exit Sub
                End If
                Dim objPaymentByCash As New frmNAcceptPaymentByCash("SO")
                objPaymentByCash.TotalBillAmount = CDbl(CtrllblBaltoPay.Text)
                objPaymentByCash.TotalMinimumAmount = CDbl(lblminadvancepaid.Text)
                'Dim obj As New frmSpecialPrompt("What you want to pay")
                'obj.ShowTextBox = True
                'obj.ShowDialog()
                'If Not obj.GetResult Is Nothing Then
                '    objPaymentByCash.CustomerWantPay = obj.GetResult
                'End If
                If Not Obj.ctrlTxtHowMuchPay Is Nothing Then
                    objPaymentByCash.CustomerWantPay = Obj.ctrlTxtHowMuchPay.Text
                End If
                objPaymentByCash.ShowDialog()

                If Not (objPaymentByCash.IsCancelAcceptPayment) Then
                    If Not objPaymentByCash.ReciptTotalAmount Is Nothing And objPaymentByCash.ReciptTotalAmount.Tables.Contains("MSTRecieptType") Then
                        _dsPayment = objPaymentByCash.ReciptTotalAmount
                        'Dim ds As New DataSet()
                        'ds.Tables.Add(dt)

                        objPaymentByCash.Close()
                        'If Not ds Is Nothing Then
                        If objPaymentByCash.Action = My.Resources.AcceptPaymentActionTypeSave Then
                            lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            BtnSaveSalesOrder_Click(sender, e)
                        ElseIf objPaymentByCash.Action = My.Resources.AcceptPaymentActionTypeGift Then
                            IsGiftVoucher = True
                            GiftReceiptMessage = objPaymentByCash.GiftReceiptMessage
                            lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            BtnSaveSalesOrder_Click(sender, e)
                        End If

                        'End If
                    Else
                        lblminadvancepaid.Text = preMinAmout
                        ShowMessage(getValueByKey("SO070"), "SO070 - " & getValueByKey("CLAE05"))
                    End If
                Else
                    IsBtnSave = True
                    lblminadvancepaid.Text = preMinAmout
                End If
            End If

        Catch ex As Exception
            ShowMessage(getValueByKey("CM033"), "CM033 - " & getValueByKey("CLAE04"))
            LogException(ex)
            'ShowMessage("Error in Updating cash payment data ", "Information")
        End Try


    End Sub
    Private Sub BtnPayCard_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            grdSOItems.FinishEditing()

            If boolIsReturn = False Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    'ShowMessage("Please Scan Article first", "Sales Order Information")
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                ElseIf Not CDbl(CtrllblBaltoPay.Text) > Decimal.Zero Then
                    ShowMessage(getValueByKey("BL073"), "BL073 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                IsBtnSave = False
                Dim Obj As New frmNHowMuchtoPay
                Dim preMinAmout As String = "0"
                'lblminadvancepaid.Text = CDbl(lblminadvancepaid.Text) - CDbl(CtrllblCreditSale.Text)
                Obj.CtrlTxtMinAmt.Text = lblminadvancepaid.Text
                preMinAmout = lblminadvancepaid.Text
                Obj.CtrlTxtPickAmt.Text = PickAmtToPay() 'Math.Round(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "") Is DBNull.Value, 0, dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "")), 2)
                'If CDbl(preMinAmout) < CDbl(Obj.CtrlTxtPickAmt.Text) Then
                '    Obj.CtrlTxtPickAmt.Text = preMinAmout
                'End If
                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(Obj.CtrlTxtPickAmt.Text) Then
                        Obj.CtrlTxtPickAmt.Text = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                    End If
                End If
                Obj.CtrlTxtPickAmt.Text = MyRound(Obj.CtrlTxtPickAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                Obj.TotalBalAmt = CDbl(CtrllblBaltoPay.Text)
                Obj.ctrlTxtHowMuchPay.Text = CDbl(lblminadvancepaid.Text)
                Obj.NetAmount = CtrllblNetAmt.Text
                Obj.CreditSales = CtrllblCreditSale.Text
                Obj.AmtPaid = CtrllblAmtPaid.Text
                Obj.IsEditSalesOrder = True
                Obj.ShowDialog()

                If Obj.DialogResult = Windows.Forms.DialogResult.Cancel Then
                    'IsBtnSave = True
                    IsBtnSave = Obj.IsNew
                    lblminadvancepaid.Text = Obj.CtrlTxtMinAmt.Text
                    If Obj.blnAllowtoGoPaymentScreen = False Then
                        Exit Sub
                    End If
                    If Obj.ctrlTxtHowMuchPay.Text = Decimal.Zero Then
                        BtnSaveSalesOrder_Click(sender, e, True)
                        Exit Sub
                    End If
                Else
                    lblminadvancepaid.Text = preMinAmout
                    Exit Sub
                End If
                Dim objPayment As New frmNAcceptPaymentByCard("SO")
                objPayment.TotalBillAmount = CDbl(CtrllblBaltoPay.Text)
                objPayment.TotalMinAmount = CDbl(lblminadvancepaid.Text)
                '   

                If clsDefaultConfiguration.IsNewSalesOrder Then
                    objPayment.txtCalCollectAmount.Text = Obj.ctrlTxtHowMuchPay.Text     'vipin on 22-06-2017
                    objPayment.lblBillAmount.Text = CDbl(CtrllblNetAmt.Text)
                End If

                'objPayment.cboCurrency.SelectedIndex = 1
                'AS Discussed with Santosh code Comment for PC CR 
                'If Not Obj.ctrlTxtHowMuchPay Is Nothing Then
                '    objPayment.CustomerWantPay = Obj.ctrlTxtHowMuchPay.Text
                'End If
                objPayment.ShowDialog()
                Dim selectedTenderName As String = objPayment.SelectedTenderName
                Dim strSelectedTenderCode As String = objPayment.CardTenderCode
                objPayment.Close()
                If Not (objPayment.IsCancelAcceptPayment) Then
                    If Not objPayment.ReciptTotalAmount Is Nothing And objPayment.ReciptTotalAmount.Tables.Contains("MSTRecieptType") Then
                        _dsPayment = objPayment.ReciptTotalAmount
                        'Dim ds As New DataSet()
                        'ds.Tables.Add(dt)
                        objPayment.Close()
                        'If Not ds Is Nothing Then
                        If objPayment.Action = My.Resources.AcceptPaymentActionTypeSave Then
                            lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            BtnSaveSalesOrder_Click(sender, e)
                        End If
                        If objPayment.Action = My.Resources.AcceptPaymentActionTypeGift Then
                            lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            IsGiftVoucher = True
                            GiftReceiptMessage = objPayment.GiftReceiptMessage
                            BtnSaveSalesOrder_Click(sender, e)
                        End If
                    Else
                        lblminadvancepaid.Text = preMinAmout
                        ShowMessage(getValueByKey("SO070"), "SO070 - " & getValueByKey("CLAE04"))
                    End If
                Else
                    IsBtnSave = True
                    lblminadvancepaid.Text = preMinAmout
                End If
            End If

        Catch ex As Exception
            ShowMessage(getValueByKey("CM038"), "CM038 - " & getValueByKey("CLAE04"))
            LogException(ex)
        End Try
    End Sub
    Private Sub BtnPayCheque_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            grdSOItems.FinishEditing()

            If boolIsReturn = False Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    'ShowMessage("Please Scan Article first", "Sales Order Information")
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                ElseIf Not CDbl(CtrllblBaltoPay.Text) > Decimal.Zero Then
                    ShowMessage(getValueByKey("BL073"), "BL073 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                IsBtnSave = False
                Dim Obj As New frmNHowMuchtoPay
                Dim preMinAmout As String = "0"
                'lblminadvancepaid.Text = CDbl(lblminadvancepaid.Text) - CDbl(CtrllblCreditSale.Text)
                Obj.CtrlTxtMinAmt.Text = lblminadvancepaid.Text
                preMinAmout = lblminadvancepaid.Text
                Obj.CtrlTxtPickAmt.Text = PickAmtToPay() 'Math.Round(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "") Is DBNull.Value, 0, dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "")), 2)
                'If CDbl(preMinAmout) < CDbl(Obj.CtrlTxtPickAmt.Text) Then
                '    Obj.CtrlTxtPickAmt.Text = preMinAmout
                'End If
                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(Obj.CtrlTxtPickAmt.Text) Then
                        Obj.CtrlTxtPickAmt.Text = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                    End If
                End If
                Obj.CtrlTxtPickAmt.Text = MyRound(Obj.CtrlTxtPickAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                Obj.TotalBalAmt = CDbl(CtrllblBaltoPay.Text)
                Obj.ctrlTxtHowMuchPay.Text = CDbl(lblminadvancepaid.Text)
                Obj.NetAmount = CtrllblNetAmt.Text
                Obj.CreditSales = CtrllblCreditSale.Text
                Obj.AmtPaid = CtrllblAmtPaid.Text
                Obj.IsEditSalesOrder = True
                Obj.ShowDialog()

                If Obj.DialogResult = Windows.Forms.DialogResult.Cancel Then
                    'IsBtnSave = True
                    IsBtnSave = Obj.IsNew
                    lblminadvancepaid.Text = Obj.CtrlTxtMinAmt.Text
                    If Obj.blnAllowtoGoPaymentScreen = False Then
                        Exit Sub
                    End If
                    If Obj.ctrlTxtHowMuchPay.Text = Decimal.Zero Then
                        BtnSaveSalesOrder_Click(sender, e, True)
                        Exit Sub
                    End If
                Else
                    lblminadvancepaid.Text = preMinAmout
                    Exit Sub
                End If
                Dim objCheck As New frmNCheckPayment("SO")
                '  objCheck.BillAmount = CDbl(CtrllblBaltoPay.Text)
                If clsDefaultConfiguration.IsNewSalesOrder Then
                    objCheck.BillAmount = CDbl(Obj.CtrlTxtMinAmt.Text)
                    objCheck.txtBillAmount.Text = CDbl(CtrllblNetAmt.Text)
                Else
                    objCheck.BillAmount = CDbl(CtrllblBaltoPay.Text)
                End If
                objCheck.TotalMinAmount = CDbl(lblminadvancepaid.Text)
                'AS Discussed with Santosh code Comment for PC CR 
                'If Not Obj.ctrlTxtHowMuchPay Is Nothing Then
                '    objCheck.CustomerWantPay = Obj.ctrlTxtHowMuchPay.Text
                'End If
                objCheck.ShowDialog()

                'If objCheck.CheckAmount > 0 Then
                '    objCheck.Close()
                '    Dim objPayment As New frmNAcceptPayment()
                '    objPayment.Show()
                '    objPayment.TotalBillAmount = CtrlCashSummary1.lbltxt4
                '    objPayment.Enabled = False
                '    objPayment.cboRecieptType.SelectedValue = "Cheque"
                '    objPayment.TotalBillAmount = CtrlCashSummary1.lbltxt4
                '    'objPayment.cboCurrency.SelectedIndex = 1
                '    objPayment.InsertCheque(objCheck.CheckAmount, objCheck.CheckNo, objCheck.CheckDate, objCheck.MicrNo, objCheck.BankName)
                '    _dsPayment = New DataSet
                '    _dsPayment = objPayment.ReciptTotalAmount()
                '    objPayment.Close()
                '    If dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables(0).Rows.Count > 0 Then
                '        CalculateSalesOrderSummory(dsScan)
                '        BtnSaveSalesOrder_Click(sender, e)
                '    End If
                'End If
                If objCheck.IsCancelAcceptPayment = False Then
                    If Not objCheck.ReciptTotalAmount Is Nothing And objCheck.ReciptTotalAmount.Tables.Contains("MSTRecieptType") Then
                        _dsPayment = New DataSet
                        _dsPayment = objCheck.ReciptTotalAmount
                        'Dim ds As New DataSet()
                        'ds.Tables.Add(dt)
                        objCheck.Close()
                        'If Not ds Is Nothing Then
                        If dsPayment.Tables.Count > 0 AndAlso dsPayment.Tables(0).Rows.Count > 0 Then
                            If objCheck.Action = My.Resources.AcceptPaymentActionTypeSave Then
                                CalculateSalesOrderSummory(dsScan)
                                lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                                BtnSaveSalesOrder_Click(sender, e)
                            ElseIf objCheck.Action = My.Resources.AcceptPaymentActionTypeGift Then
                                CalculateSalesOrderSummory(dsScan)
                                IsGiftVoucher = True
                                GiftReceiptMessage = objCheck.GiftReceiptMessage
                                lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                                BtnSaveSalesOrder_Click(sender, e)
                            End If

                        End If
                    Else
                        lblminadvancepaid.Text = preMinAmout
                        ShowMessage(getValueByKey("SO070"), "SO070 - " & getValueByKey("CLAE05"))
                    End If
                Else
                    IsBtnSave = True
                    lblminadvancepaid.Text = preMinAmout
                End If
            End If

        Catch ex As Exception
            LogException(ex)
        End Try

    End Sub

    '' added by nikhil
    Private Sub BtnPayNEFT_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Try
            grdSOItems.FinishEditing()

            If boolIsReturn = False Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    'ShowMessage("Please Scan Article first", "Sales Order Information")
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                ElseIf Not CDbl(CtrllblBaltoPay.Text) > Decimal.Zero Then
                    ShowMessage(getValueByKey("BL073"), "BL073 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                IsBtnSave = False
                Dim Obj As New frmNHowMuchtoPay
                Dim preMinAmout As String = "0"
                'lblminadvancepaid.Text = CDbl(lblminadvancepaid.Text) - CDbl(CtrllblCreditSale.Text)
                Obj.CtrlTxtMinAmt.Text = lblminadvancepaid.Text
                preMinAmout = lblminadvancepaid.Text
                Obj.CtrlTxtPickAmt.Text = PickAmtToPay() 'Math.Round(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "") Is DBNull.Value, 0, dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "")), 2)
                'If CDbl(preMinAmout) < CDbl(Obj.CtrlTxtPickAmt.Text) Then
                '    Obj.CtrlTxtPickAmt.Text = preMinAmout
                'End If

                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(Obj.CtrlTxtPickAmt.Text) Then
                        Obj.CtrlTxtPickAmt.Text = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                    End If
                End If

                Obj.CtrlTxtPickAmt.Text = MyRound(Obj.CtrlTxtPickAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                Obj.TotalBalAmt = CDbl(CtrllblBaltoPay.Text)
                Obj.ctrlTxtHowMuchPay.Text = CDbl(lblminadvancepaid.Text)
                Obj.NetAmount = CtrllblNetAmt.Text
                Obj.CreditSales = CtrllblCreditSale.Text
                Obj.AmtPaid = CtrllblAmtPaid.Text
                Obj.IsEditSalesOrder = True
                Obj.ShowDialog()

                If Obj.DialogResult = Windows.Forms.DialogResult.Cancel Then
                    'IsBtnSave = True
                    IsBtnSave = Obj.IsNew
                    lblminadvancepaid.Text = Obj.CtrlTxtMinAmt.Text
                    If Obj.blnAllowtoGoPaymentScreen = False Then
                        Exit Sub
                    End If
                    If Obj.ctrlTxtHowMuchPay.Text = Decimal.Zero Then
                        BtnSaveSalesOrder_Click(sender, e, True)
                        Exit Sub
                    End If
                Else
                    lblminadvancepaid.Text = preMinAmout
                    Exit Sub
                End If




                Dim objPaymentByCash As New frmNAcceptPaymentByNEFTRTGS()
                objPaymentByCash.BillAmount = CDbl(CtrllblBaltoPay.Text)
                objPaymentByCash.BalAmount = CDbl(lblminadvancepaid.Text)
                objPaymentByCash.TenderTypeCode = "NEFT"
                objPaymentByCash.DocumentType = "SO"
                'Dim obj As New frmSpecialPrompt("What you want to pay")
                'obj.ShowTextBox = True
                'obj.ShowDialog()
                'If Not obj.GetResult Is Nothing Then
                '    objPaymentByCash.CustomerWantPay = obj.GetResult
                'End If
                If Not Obj.ctrlTxtHowMuchPay Is Nothing Then
                    objPaymentByCash.BalAmount = Obj.ctrlTxtHowMuchPay.Text
                End If
                objPaymentByCash.ShowDialog()

                If Not (objPaymentByCash.IsCancelAcceptPayment) Then
                    If Not objPaymentByCash.ReciptTotalAmount Is Nothing And objPaymentByCash.ReciptTotalAmount.Tables.Contains("MSTRecieptType") Then
                        _dsPayment = objPaymentByCash.ReciptTotalAmount
                        'Dim ds As New DataSet()
                        'ds.Tables.Add(dt)

                        objPaymentByCash.Close()
                        'If Not ds Is Nothing Then
                        If objPaymentByCash.Action = My.Resources.AcceptPaymentActionTypeSave Then
                            lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            BtnSaveSalesOrder_Click(sender, e)
                            'ElseIf objPaymentByCash.Action = My.Resources.Cancel Then
                            '    IsGiftVoucher = True
                            '    GiftReceiptMessage = objPaymentByCash.GiftReceiptMessage
                            '    lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            '    BtnSaveSalesOrder_Click(sender, e)
                        End If

                        'End If
                    Else
                        lblminadvancepaid.Text = preMinAmout
                        ShowMessage(getValueByKey("SO070"), "SO070 - " & getValueByKey("CLAE05"))
                    End If
                Else
                    IsBtnSave = True
                    lblminadvancepaid.Text = preMinAmout
                End If
            End If

        Catch ex As Exception
            ShowMessage(getValueByKey("CM033"), "CM033 - " & getValueByKey("CLAE04"))
            LogException(ex)
            'ShowMessage("Error in Updating cash payment data ", "Information")
        End Try
    End Sub
    Private Sub BtnPayRTGS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            grdSOItems.FinishEditing()

            If boolIsReturn = False Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    'ShowMessage("Please Scan Article first", "Sales Order Information")
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                ElseIf Not CDbl(CtrllblBaltoPay.Text) > Decimal.Zero Then
                    ShowMessage(getValueByKey("BL073"), "BL073 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                rbbtnDefaultPromo_Click(rbbtnDefaultPromo, New System.EventArgs)
                IsBtnSave = False
                Dim Obj As New frmNHowMuchtoPay
                Dim preMinAmout As String = "0"
                'lblminadvancepaid.Text = CDbl(lblminadvancepaid.Text) - CDbl(CtrllblCreditSale.Text)
                Obj.CtrlTxtMinAmt.Text = lblminadvancepaid.Text
                preMinAmout = lblminadvancepaid.Text
                Obj.CtrlTxtPickAmt.Text = PickAmtToPay() 'Math.Round(IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "") Is DBNull.Value, 0, dsScan.Tables("ItemScanDetails").Compute("SUM(TotalPickUpAmt)", "")), 2)
                'If CDbl(preMinAmout) < CDbl(Obj.CtrlTxtPickAmt.Text) Then
                '    Obj.CtrlTxtPickAmt.Text = preMinAmout
                'End If

                If CDbl(lblPickupQty.Text) + CDbl(lbldeliveredqty.Text) = CDbl(lblOrderQty.Text) Then
                    If CDbl(CtrllblBaltoPay.Text) > CDbl(Obj.CtrlTxtPickAmt.Text) Then
                        Obj.CtrlTxtPickAmt.Text = CDbl(CtrllblBaltoPay.Text) - CDbl(CtrllblCreditSale.Text)
                    End If
                End If

                Obj.CtrlTxtPickAmt.Text = MyRound(Obj.CtrlTxtPickAmt.Text, clsDefaultConfiguration.BillRoundOffAt)
                Obj.TotalBalAmt = CDbl(CtrllblBaltoPay.Text)
                Obj.ctrlTxtHowMuchPay.Text = CDbl(lblminadvancepaid.Text)
                Obj.NetAmount = CtrllblNetAmt.Text
                Obj.CreditSales = CtrllblCreditSale.Text
                Obj.AmtPaid = CtrllblAmtPaid.Text
                Obj.IsEditSalesOrder = True
                Obj.ShowDialog()

                If Obj.DialogResult = Windows.Forms.DialogResult.Cancel Then
                    'IsBtnSave = True
                    IsBtnSave = Obj.IsNew
                    lblminadvancepaid.Text = Obj.CtrlTxtMinAmt.Text
                    If Obj.blnAllowtoGoPaymentScreen = False Then
                        Exit Sub
                    End If
                    If Obj.ctrlTxtHowMuchPay.Text = Decimal.Zero Then
                        BtnSaveSalesOrder_Click(sender, e, True)
                        Exit Sub
                    End If
                Else
                    lblminadvancepaid.Text = preMinAmout
                    Exit Sub
                End If
                Dim objPaymentByCash As New frmNAcceptPaymentByNEFTRTGS()
                objPaymentByCash.BillAmount = CDbl(CtrllblBaltoPay.Text)
                objPaymentByCash.BalAmount = CDbl(lblminadvancepaid.Text)
                objPaymentByCash.TenderTypeCode = "RTGS"
                objPaymentByCash.DocumentType = "SO"
                'Dim obj As New frmSpecialPrompt("What you want to pay")
                'obj.ShowTextBox = True
                'obj.ShowDialog()
                'If Not obj.GetResult Is Nothing Then
                '    objPaymentByCash.CustomerWantPay = obj.GetResult
                'End If
                If Not Obj.ctrlTxtHowMuchPay Is Nothing Then
                    objPaymentByCash.BalAmount = Obj.ctrlTxtHowMuchPay.Text
                End If
                objPaymentByCash.ShowDialog()

                If Not (objPaymentByCash.IsCancelAcceptPayment) Then
                    If Not objPaymentByCash.ReciptTotalAmount Is Nothing And objPaymentByCash.ReciptTotalAmount.Tables.Contains("MSTRecieptType") Then
                        _dsPayment = objPaymentByCash.ReciptTotalAmount
                        'Dim ds As New DataSet()
                        'ds.Tables.Add(dt)

                        objPaymentByCash.Close()
                        'If Not ds Is Nothing Then
                        If objPaymentByCash.Action = My.Resources.AcceptPaymentActionTypeSave Then
                            lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            BtnSaveSalesOrder_Click(sender, e)
                            'ElseIf objPaymentByCash.Action = My.Resources.Cancel Then
                            '    IsGiftVoucher = True
                            '    GiftReceiptMessage = objPaymentByCash.GiftReceiptMessage
                            '    lblReceivedAmt.Text = CDbl(dsPayment.Tables(0).Compute("Sum(Amount)", ""))
                            '    BtnSaveSalesOrder_Click(sender, e)
                        End If

                        'End If
                    Else
                        lblminadvancepaid.Text = preMinAmout
                        ShowMessage(getValueByKey("SO070"), "SO070 - " & getValueByKey("CLAE05"))
                    End If
                Else
                    IsBtnSave = True
                    lblminadvancepaid.Text = preMinAmout
                End If
            End If

        Catch ex As Exception
            ShowMessage(getValueByKey("CM033"), "CM033 - " & getValueByKey("CLAE04"))
            LogException(ex)
            'ShowMessage("Error in Updating cash payment data ", "Information")
        End Try
    End Sub
    ''' <summary>
    ''' Add Other Charges and Tax in Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub BtnAddOtherCharges_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 'Handles BtnSOOtherCharges.Click
        Try
            If dsScan.Tables(0).Rows.Count > 0 Then
                If IsApplyPromotion = True Then
                    'RemoveApplyPromotion(_dsScan)
                End If
            Else
                ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
                'ShowMessage("Please Select Sales Order first", "Sales Order Information")
                Exit Sub
            End If

            Dim objOpenAddOtherCharges As New frmNAddOthrChrgForSO
            Dim dt As DataTable = dsMain.Tables("SalesOrderOtherCharges").Copy()
            If dtOtherCharges.Rows.Count <= 0 Then
                dtOtherCharges = dt
            End If
            'If Not dsMain.Tables("SalesOrderOtherCharges") Is Nothing AndAlso dsMain.Tables("SalesOrderOtherCharges").Rows.Count > 0 Then
            objOpenAddOtherCharges.dtOtherCharge = dtOtherCharges.Copy()
            'End If
            objOpenAddOtherCharges.SalesOrderNo = vSalesNo
            objOpenAddOtherCharges.ShowDialog()
            If objOpenAddOtherCharges.CancelOthercharges = True Then
                Exit Sub
            End If
            dtOtherCharges = objOpenAddOtherCharges.dtOtherCharge
            'dsMain.Tables.Remove("SalesOrderOtherCharges")
            'dsMain.Tables.Add(dtOtherCharges)
            CalculateSalesOrderSummory(dsScan)
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub

    ''' <summary>
    ''' Applying the Promotion in Current Sales Order
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>Manual Promotion may be(%,fixed price off,Fixed price sale) </remarks>
    Private Sub cmdDefaultPromo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdDefaultPromo.Click
        Try
            If IsQuantityChange = False Then
                ShowMessage(getValueByKey("SO043"), "SO043 - " & getValueByKey("CLAE04"))
                'ShowMessage("Please Change Order Quantity first", "Sales Order Information")
                Exit Sub
            End If

            If Not (dsScan.Tables(0).Rows.Count > 0) Then
                ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
                'ShowMessage("Please Select Sales Order first", "Sales Order Information")
                Exit Sub
            End If

            dsScanProm.Tables(0).Clear()
            Dim dvProm As DataView
            dvProm = New DataView(dsScan.Tables(0), "IsStatus<>'Deleted'", "", DataViewRowState.CurrentRows)

            If dvProm.ToTable.Rows.Count > 0 Then
                dsScanProm.Tables(0).Merge(dvProm.ToTable)
                dsScanProm.AcceptChanges()
                dvProm.Dispose()
            Else
                'ShowMessage("Promotion is not applied properly", "Upchanged Sales Order Items")
            End If

            Dim obj As New clsApplyPromotion
            obj.MainTable = "PackagingMaterial"
            obj.ExclusiveTaxFieldName = "ExclTaxAmt"
            obj.TotalDiscountField = "Discount"
            obj.GrossAmtField = "GrossAmt"
            isPromotionApplied = True
            'If clsDefaultConfiguration.IsPromotionManually = True Then

            '    'If MsgBox(getValueByKey("SO021"), MsgBoxStyle.YesNo, "SO021") = MsgBoxResult.Yes Then
            '    If UCase(sender.id) = UCase("cmdApplySelectedPromo") Then
            '        Dim dtList As DataTable
            '        dtList = obj.GetListofActivePromotions(vSiteCode)

            '        If Not dtList Is Nothing Then
            '            Dim objView As New frmNCommonSearch
            '            objView.SetData = dtList
            '            objView.ShowDialog()

            '            If Not objView.search Is Nothing Then
            '                Dim offerno As String = objView.search(0)

            '                If obj.CheckValidations(offerno) = True Then
            '                    Dim dtValidation As DataTable = obj.GetAllQuestions(offerno)
            '                    Dim StrQues As String = ""

            '                    For Each dr As DataRow In dtValidation.Rows
            '                        StrQues = StrQues & dr("QuestionName").ToString() & ","
            '                    Next

            '                    If StrQues.Contains("Autho") = True AndAlso StrQues.Contains("Voucher") = True Then
            '                        dsScanProm.Tables(0).Columns("Discount").ColumnName = "TotalDiscount"
            '                        dsScanProm.Tables(0).Columns("ExclTaxAmt").ColumnName = "EXCLUSIVETAX"
            '                        CheckInterTransactionAuth("ORD", dsScanProm.Tables(0))
            '                        dsScanProm.Tables(0).Columns("TotalDiscount").ColumnName = "Discount"
            '                        dsScanProm.Tables(0).Columns("EXCLUSIVETAX").ColumnName = "ExclTaxAmt"
            '                        IsApplyPromotion = True
            '                    ElseIf StrQues.Contains("Autho") = True Then
            '                        If CheckInterTransactionAuth("DAUTH", _dsScan.Tables(0)) = True Then
            '                            obj.ApplySelectedPromotion(offerno, dsScanProm, vSiteCode)
            '                            IsApplyPromotion = True
            '                        End If
            '                    End If
            '                Else
            '                    obj.ApplySelectedPromotion(offerno, dsScanProm, vSiteCode)
            '                End If

            '            End If
            '        End If
            '    Else
            '        ShowMessage(getValueByKey("SO022"), "SO022 - " & getValueByKey("CLAE04"))
            '        'ShowMessage("Default Schemes is applied Now", "Message")
            '        obj.CalculatedDs(dsScanProm, vSiteCode)
            '        IsApplyPromotion = True
            '    End If
            'Else
            ShowMessage(getValueByKey("SO022"), "SO022 - " & getValueByKey("CLAE04"))
            '    'ShowMessage("Default Schemes is applied Now", "Message")
            obj.CalculatedDs(dsScanProm, vSiteCode)
            IsApplyPromotion = True
            'End If

            ReCalculateSalesOrder()
            CalculateSalesOrderSummory(dsScanProm)
            RefreshLoadSOData()

        Catch ex As Exception
            ShowMessage(getValueByKey("SO023"), "SO023 - " & getValueByKey("CLAE04"))
            LogException(ex)
            'ShowMessage("Promotion is not applied properly", "Error")
        End Try
    End Sub

    ''' <summary>
    ''' Calculate Sales Order Summary and Show in Screen
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub ReCalculateSalesOrder()
        Try
            For Each drDisc As DataRow In _dsScan.Tables(0).Select("IsStatus <>'Deleted'")
                drProm = dsScanProm.Tables(0).Select("EAN = '" & drDisc("EAN") & "' And IsStatus <>'Deleted'")
                If drProm.Length > 0 Then

                    drDisc("TotalDiscPercentage") = Math.Round(drProm(0).Item("TotalDiscPercentage"), 3)
                    drDisc("Discount") = Math.Round(drProm(0).Item("Discount"), 2)
                    drDisc("PromotionId") = IIf(drProm(0).Item("FirstLevel") = "", 0, drProm(0).Item("FirstLevel")) & "," & IIf(drProm(0).Item("TopLevel") = "", 0, drProm(0).Item("TopLevel"))

                    If drDisc("PromotionId") = "0,0" Then
                        drDisc("LineDiscount") = Math.Round((drProm(0).Item("GrossAmt") * drProm(0).Item("TotalDiscPercentage")) / 100, 3)
                    Else
                        drDisc("LineDiscount") = Math.Round(drProm(0).Item("LineDiscount"), 3)
                    End If
                    If clsDefaultConfiguration.ExclusiveTaxAfterDisc = True Then
                        Dim totalamt As Double = drProm(0).Item("GrossAmt") - drDisc("Discount")
                        Dim objcom As New clsSaleOrderCommon
                        '---abc
                        ' objcom.CreateDataSetForTaxCalculation(drDisc("ARTICLECODE"), totalamt, drDisc, dsMain, CtrlSalesInfo.CtrlTxtOrderNo.Text, drDisc("EAN"))
                    End If
                    drDisc("NetAmount") = Math.Round(drProm(0).Item("GrossAmt") - drDisc("LineDiscount"), 2)

                    TotalSalesQty = drDisc("PickUpQty") + drDisc("DeliveredQty")
                    NetArticleRate = drDisc("NetAmount") / drDisc("Quantity")
                    drDisc("MinPayAmt") = Math.Round(((drDisc("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)

                    drDisc("FirstLevel") = drProm(0).Item("FirstLevel")
                    drDisc("TopLevel") = drProm(0).Item("TopLevel")
                End If
            Next
            _dsScan.AcceptChanges()

        Catch ex As Exception
            ShowMessage(getValueByKey("SO044"), "SO044 - " & getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub

#End Region
    Private Sub BtnSOPrint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'ShowMessage(getValueByKey("SO025"), "SO025")
        'If Not drDelvAdds Is Nothing Then
        '    PrintSalesOrders(drSiteInfo, drHomeAdds, dsMain.Tables("SalesOrderOtherCharges"))
        'Else

        'Rakesh-21.10.2013-8252: Display message as Please select order first!
        If (dsScan.Tables("ItemScanDetails") Is Nothing OrElse dsScan.Tables("ItemScanDetails").Rows.Count < 1) Then
            ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
        Else
            BtnSOPrint.Visible = False
            PrintSalesOrders(drSiteInfo, drHomeAdds, drDelvAdds)
            If EditCallFromOrderPackagingScreen = True Then
                DisableScreenControls()
            Else
                BtnSOPrint.Visible = True
            End If
        End If

        'ResetSalesOrder()
        'CtrlSalesInfo.CtrlTxtOrderNo.Text = String.Empty
        'AutoLogout(FrmTranCode, Me, lblLoggedIn)
        'End If

        'ShowMessage("Print Sales Order service currently not available", "Print Sales Order Informaion")
    End Sub
    Private Sub BtnSOStockCheck_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'ShowMessage(getValueByKey("SO024"), "SO024 - " & getValueByKey("CLAE05"))
        'ShowMessage("Stock Check service currently not available", "Stock Check Informaion")
    End Sub
    Private Sub BtnSOCalculater_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'ShowMessage("Calculator service currently not available", "Calculator Informaion")
    End Sub
    Private Sub BtnSOClose_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 'Handles BtnSOClose.Click
        If dsScan.Tables(0).Rows.Count > 0 Then

            If MsgBox(getValueByKey("SO045"), MsgBoxStyle.YesNo, "SO045 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                Me.Close()
            End If
        Else
            Me.Close()
        End If
    End Sub
    Private Sub BtnSOCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 'Handles BtnSOCancel.Click
        BtnSOSave.Visible = True
        BtnSOPrint.Visible = True
        rbnGrpCMPromotion.Visible = False
        BtnSOAcceptPayment.Visible = True
        BtnSOOtherCharges.Visible = True

        'BtnSOReturn.Visible = True
        BtnSOCancel.Visible = False
        LbReturnReason.Visible = False
        txtReturnReason.Visible = False

        'LbItemScan.Visible = True
        CtrlSalesPerson.CtrlTxtBox.Visible = True
        BtnSearchItem.Visible = True

        'TabSalesOrder.TabPages.Add(tabSales)
        'TabSalesOrder.TabPages.Remove(tabReturn)

        'TabSalesOrder.TabPages.Remove(tabPayment)
        'TabSalesOrder.TabPages.Add(tabPayment)

        IsAllowedSalesReturn = False

        vDocType = vDocTypeCreation
    End Sub
    Private Sub BtnSOReturn_Click(ByVal sender As Object, ByVal e As System.EventArgs) 'Handles BtnSOReturn.Click
        If CheckInterTransactionAuth("SOReturn", dsScan.Tables(0), 0, 0, 0, 0) = True Then

            BtnSOSave.Visible = True
            BtnSOPrint.Visible = False
            rbnGrpCMPromotion.Visible = False
            BtnSOAcceptPayment.Visible = False
            BtnSOOtherCharges.Visible = False

            'BtnSOReturn.Visible = False
            BtnSOCancel.Visible = True
            LbReturnReason.Visible = True
            txtReturnReason.Visible = True
            IsBtnSave = False
            '---abc
            '  CtrlSalesInfo.CtrlDtExpDelDate.ReadOnly = True
            'LbItemScan.Visible = False
            'CtrlSalesPerson.CtrlTxtBox.Visible = False
            BtnSearchItem.Visible = False

            'TabSalesOrder.TabPages.Remove(tabSales)
            'TabSalesOrder.TabPages.Add(tabReturn)

            'TabSalesOrder.TabPages.Remove(tabPayment)
            'TabSalesOrder.TabPages.Add(tabPayment)

            'TabSalesOrder.SelectedIndex = 2
            If CtrlBtnReturn.Tag <> "Return" Then
                IsAllowedSalesReturn = True
            Else
                IsAllowedSalesReturn = False
            End If
            'GridDeliverdSetting()
            If dtSOReturn.Rows.Count > 0 Then
                For Each dr As DataRow In dtSOReturn.Rows
                    Dim result As DataRow() = dtTempOrderAddresses.Select("AddressKey='" + dr("DeliveryAddress").ToString() + "' ")
                    If result.Length > 0 Then
                        dr("DeliveryAddress") = result(0)("AddressValue")
                    End If
                Next
            End If
            dtSOReturn = objPCSO.SetSalesOrderReturnSO(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
            grdSOItemRetuns.DataSource = dtSOReturn
            GridReturnSetting()
            vDocType = vDocTypeReturn
        Else

            ShowMessage(getValueByKey("SO046"), "SO046 - " & getValueByKey("CLAE04"))

            'ShowMessage("You can not return Sales Article beacuse You are not Authorisation. ", "Sales Order Information")
        End If
    End Sub
    Private Sub grdSOItemRetuns_AfterEdit(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.RowColEventArgs) Handles grdSOItemRetuns.AfterEdit

        If grdSOItemRetuns.Cols(grdSOItemRetuns.Col).Name = "PickupQty" Then
            Try
                Dim vPickupQty As Double = IIf(grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty") Is DBNull.Value, -1, grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty"))
                Dim drCheckIfSingleNos As New DataView(dtSOReturn, "ArticleCode='" & grdSOItemRetuns.Item(grdSOItemRetuns.Row, "ArticleCode") & "' AND UnitOfMeasure='NOS'", "", DataViewRowState.CurrentRows)
                If drCheckIfSingleNos.Count > 0 Then
                    Dim vreturnQty = vPickupQty.ToString.Split(".")
                    If vreturnQty.Length = 2 Then
                        If vreturnQty(1) > 0 Then
                            ShowMessage("Return Qty For Single Where UOM is NOS should not be in decimal", "Information")
                            grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty") = 0
                            Exit Sub
                        End If
                    End If
                End If

                If Not (vPickupQty >= 0) Then
                    'ShowMessage(getValueByKey("SO008"), "SO008 - " & getValueByKey("CLAE04"))
                    ShowMessage("Return Quantity cannot less than 1.", "Return Quantity Information")
                    grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty") = 0
                End If

                'Dim dvDeliveredQty As New DataView(dsScanReturn.Tables("ItemScanDetails"), "EAN='" & grdSOItemRetuns.Item(grdSOItemRetuns.Row, "EAN") & "'", "", DataViewRowState.CurrentRows)
                'If dvDeliveredQty.Count > 0 Then
                '    dvDeliveredQty.AllowEdit = True

                '    For Each drPickupQty As DataRowView In dvDeliveredQty
                '        If vPickupQty <= CDbl(drPickupQty("DeliveredQty")) Then
                '            drPickupQty("PickupQty") = grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty")
                '            drPickupQty("IsStatus") = "Return"
                '        Else
                '            grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty") = 0
                '            'ShowMessage("Return Quantity (" & vPickupQty & ") cannot greater than Delivered Quantity (" & CDbl(drPickupQty("DeliveredQty")) & ").", "Return Article Information")
                '            ShowMessage(String.Format(getValueByKey("SO083"), vPickupQty, CDbl(drPickupQty("DeliveredQty"))), "SO083 - " & getValueByKey("CLAE04"))
                '        End If
                '    Next

                '    dsScanReturn.AcceptChanges()
                'End If
                Dim dvDeliveredQty As New DataView(dtSOReturn, "EAN='" & grdSOItemRetuns.Item(grdSOItemRetuns.Row, "EAN") & "' And SrNo='" & grdSOItemRetuns.Item(grdSOItemRetuns.Row, "SrNo") & "'", "", DataViewRowState.CurrentRows)
                If dvDeliveredQty.Count > 0 Then
                    dvDeliveredQty.AllowEdit = True

                    For Each drPickupQty As DataRowView In dvDeliveredQty
                        If vPickupQty <= CDbl(drPickupQty("DeliveredQty")) Then
                            drPickupQty("PickupQty") = grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty")
                            ' drPickupQty("IsStatus") = "Return"
                        Else
                            grdSOItemRetuns.Item(grdSOItemRetuns.Row, "PickupQty") = 0
                            'ShowMessage("Return Quantity (" & vPickupQty & ") cannot greater than Delivered Quantity (" & CDbl(drPickupQty("DeliveredQty")) & ").", "Return Article Information")
                            ShowMessage(String.Format(getValueByKey("SO083"), vPickupQty, CDbl(drPickupQty("DeliveredQty"))), "SO083 - " & getValueByKey("CLAE04"))
                        End If
                    Next

                    dtSOReturn.AcceptChanges()
                End If

            Catch ex As Exception
                ShowMessage(ex.Message, getValueByKey("CLAE05"))
                LogException(ex)
            End Try
        End If

    End Sub
    Private Sub BtnSOCloseManualSO_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 'Handles BtnSOCloseManualSO.Click
        'If clsDefaultConfiguration.IsBatchManagementReq Then
        '    MessageBox.Show("Please close Sales order from Outbound Screen")
        '    Exit Sub
        'Else
        objSO.IsMannualClose = True
        objSO.SelectedCurrencyIndex = clsAdmin.CurrencyCode
        objSO.CurrencyCode = clsAdmin.CurrencyCode
        isLeaved = True
        Dim crdsale As Double = 0.0
        Dim crdsaleadjustamount As Double = 0.0
        Dim PaymentToBeSettled As Double = 0.0
        Dim PenaltyAmount As Double = 0.0
        Dim pendingCreditSale As Double = 0.0
        Dim pickupamount As Double = 0.0
        Dim cashpaid As Double = 0
        If Not (dsScan.Tables("ItemScanDetails") Is Nothing) AndAlso dsScan.Tables("ItemScanDetails").Rows.Count > 0 Then
            '---abc
            'If (String.IsNullOrEmpty(vSalesNo) Or CtrlSalesInfo.CtrlTxtOrderNo.Text.Trim <> vSalesNo Or grdSOItems.Rows.Count <= 1) Then
            '    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
            '    Exit Sub
            'End If

            If MsgBox(getValueByKey("SO078"), MsgBoxStyle.YesNo, "SO078 - " & getValueByKey("CLAE04")) = MsgBoxResult.No Then
                Exit Sub
            End If

            Dim articlePrice = Decimal.Zero, pendingTotalNetAmount = Decimal.Zero, advanceAmountPaid = Decimal.Zero, CVIssueAmount As Decimal = Decimal.Zero
            Try
                '------Checked By Prasad as all Status were Looping 
                For Each drDtls As DataRow In dsMain.Tables("SOItemPackagingBoxDtl").Select("Status=True")
                    articlePrice = drDtls("NetAmount") / drDtls("Quantity")
                    pendingTotalNetAmount += articlePrice * (drDtls("Quantity") - drDtls("DeliveredQty"))
                    pickupamount += articlePrice * drDtls("DeliveredQty")
                Next
                pendingTotalNetAmount = FormatNumber(pendingTotalNetAmount, 0)
                advanceAmountPaid = pendingTotalNetAmount - dsMain.Tables("SalesOrderHDR").Rows(0)("BalanceAmount")

                cashpaid = dsMain.Tables("SalesOrderHDR").Rows(0)("AdvanceAmt")

                If (clsDefaultConfiguration.PenaltyPercentageInClose = 0) Then
                    CVIssueAmount = advanceAmountPaid

                ElseIf (clsDefaultConfiguration.PenaltyPercentageInClose > 0) Then

                    If (advanceAmountPaid = 0) Then
                        CVIssueAmount = ((clsDefaultConfiguration.PenaltyPercentageInClose * pendingTotalNetAmount) / 100) * -1

                    ElseIf (advanceAmountPaid > 0) Then
                        CVIssueAmount = advanceAmountPaid - ((clsDefaultConfiguration.PenaltyPercentageInClose * pendingTotalNetAmount) / 100)
                    End If
                End If

                Dim salesordernumber As String = ""
                If dsMain.Tables("SalesInvoice").Rows.Count > 0 AndAlso Not dsMain.Tables("SalesInvoice") Is Nothing Then
                    If dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").Length > 0 Then
                        Dim dt As DataTable = dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").CopyToDataTable
                        If dt.Rows.Count > 0 AndAlso Not dt Is Nothing Then
                            salesordernumber = dt.Rows(0)("DocumentNumber")
                            For Each x In dt.Rows
                                crdsale += x("AmountTendered")

                            Next

                        End If
                    End If
                End If
                If crdsale > 0 Then
                    cashpaid = cashpaid - crdsale
                End If
                Dim dtCreditSaleData As New DataTable
                Dim objclsReturn As New clsCashMemoReturn
                dtCreditSaleData = objclsReturn.getCreditSaleBillData("'" + salesordernumber + "'")
                If dtCreditSaleData.Rows.Count > 0 AndAlso Not dtCreditSaleData Is Nothing Then
                    For Each y In dtCreditSaleData.Rows
                        crdsaleadjustamount += y("CreditSaleAdjustment")
                    Next
                End If

                'If crdsaleadjustamount > 0 Or crdsale > 0 Then
                '    '  NetCrdSale = crdsale - crdsaleadjustamount
                '    'vAdvanceAmount = vAdvanceAmount + crdsaleadjustamount
                '    cashpaid = cashpaid + crdsaleadjustamount
                'End If

                PenaltyAmount = ((clsDefaultConfiguration.PenaltyPercentageInCancel * pendingTotalNetAmount) / 100)
                Dim WriteOffAmt = objPCSO.GetWriteOffAmt(CtrlTxtOrderNo.Text, clsAdmin.SiteCode, clsAdmin.Financialyear)
                If crdsale > 0 Then
                    PaymentToBeSettled = pickupamount - cashpaid - crdsaleadjustamount + PenaltyAmount - WriteOffAmt
                Else
                    PaymentToBeSettled = CVIssueAmount
                End If

                pendingCreditSale = crdsale - crdsaleadjustamount

                '-Added By Prasad to Minus Credit Sale Amt From Write Off Amt
                pendingCreditSale = pendingCreditSale - WriteOffAmt
            Catch ex As Exception
                ShowMessage(ex.Message, getValueByKey("CLAE05"))
                LogException(ex)
            End Try

            If crdsale <> 0 Then
                If MsgBox(String.Format(getValueByKey("SO092"),
                                 MyRound(pendingTotalNetAmount, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                MyRound(cashpaid, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                      crdsaleadjustamount,
                                pendingCreditSale,
                                 clsDefaultConfiguration.PenaltyPercentageInClose,
                     MyRound(PenaltyAmount, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                 MyRound(PaymentToBeSettled, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)),
                             MsgBoxStyle.YesNo, "SO092 - " & getValueByKey("SO087")) = MsgBoxResult.No Then
                    Exit Sub
                End If
            Else
                If MsgBox(String.Format(getValueByKey("SO088"),
                                        MyRound(pendingTotalNetAmount, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                        MyRound(cashpaid, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                        clsDefaultConfiguration.PenaltyPercentageInClose,
                                        MyRound(CVIssueAmount * -1, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)),
                                    MsgBoxStyle.YesNo, "SO078 - " & getValueByKey("SO087")) = MsgBoxResult.No Then
                    Exit Sub
                End If
            End If

            Try
                If crdsale > 0 Then
                    CVIssueAmount = MyRound(PaymentToBeSettled, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)
                Else
                    CVIssueAmount = MyRound(CVIssueAmount * -1, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)
                End If
                If CVIssueAmount <> 0 Then
                    Dim objPayment As New frmNAcceptPaymentPC()
                    getclpsettings()
                    objPayment.TotalBillAmount = CVIssueAmount
                    objPayment.AcceptEditBillDataSet = dsPayment
                    objPayment.PaymentType = clsAcceptPayment.PaymentType.Accept
                    objPayment.ShowDialog()

                    _dsPayment = New DataSet
                    _dsPayment = objPayment.ReciptTotalAmount()
                    objPayment.Close()

                    If (objPayment.IsCancelAcceptPayment) Then
                        Return
                    End If
                End If

                dsMain.Tables("SalesOrderHDR").RejectChanges()
                dsMain.Tables("SalesOrderHDRAudit").RejectChanges()
                dsMain.Tables("SalesOrderDTL").RejectChanges()
                dsMain.Tables("SalesOrderDTLAudit").RejectChanges()
                dsMain.Tables("SalesOrderTaxDtls").RejectChanges()
                dsMain.Tables("SalesOrderOtherCharges").RejectChanges()
                dsMain.Tables("SalesInvoice").RejectChanges()
                dsMain.Tables("OrderHdr").RejectChanges()
                dsMain.Tables("OrderDtl").RejectChanges()

                dsMain.Tables("SalesOrderHDR").Rows(0).Item("PenaltyAmount") = IIf(CVIssueAmount > 0, CVIssueAmount, 0)
                dsMain.Tables("SalesOrderHDR").Rows(0).Item("SOStatus") = "Closed"
                dsMain.Tables("SalesOrderHDR").Rows(0).Item("UPDATEDON") = vCurrentDate
                dsMain.Tables("SalesOrderHDR").Rows(0).Item("UPDATEDBY") = clsAdmin.UserCode
                dsMain.Tables("SalesOrderHDR").Rows(0).Item("UPDATEDAT") = clsAdmin.SiteCode

                If Not (PrepareInvcDataforSave(dsMain) = True) Then
                    Exit Sub
                End If
                '---abc
                If objPCSO.PrepareSaveData(vSalesInvcNo, clsAdmin.DayOpenDate, clsAdmin.CLPProgram, vCustomerNo, dsMain, False, IsNextInvoiceNo, vSiteCode, CtrlTxtOrderNo.Text, clsDefaultConfiguration.StockStorageLocation, clsAdmin.CVProgram, "SalesOrder", vfinancialYear, clsAdmin.UserCode, clsAdmin.CurrentDate, IsOutboundCreated) = True Then

                    If Not dsPayment.Tables("MSTRecieptType") Is Nothing AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
                        Dim totalPay As Decimal
                        For Each dr As DataRow In dsPayment.Tables("MSTRecieptType").Select("RecieptTypeCode='CreditVouc(I)'", "", DataViewRowState.CurrentRows)
                            totalPay = IIf(dr("Amount") > 0, dr("Amount"), dr("Amount") * -1)

                            clsVoucher.PrintGiftVoucherAndCreditNote("SalesOrder", clsAdmin.SiteCode, "CreditNote", String.Empty, totalPay, String.Empty, clsAdmin.UserName, CtrlTxtOrderNo.Text, clsAdmin.CurrencyCode, clsAdmin.CurrentDate, BarCodeType)
                        Next
                    End If

                    ShowMessage(getValueByKey("SO039"), "SO039 - " & getValueByKey("CLAE04"))

                    ResetSalesOrder()
                    isLeaved = False
                    CtrlTxtOrderNo.Text = String.Empty
                    objSO.IsMannualClose = False
                Else
                    ShowMessage(getValueByKey("SO040"), "SO040 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Sales Order does not Updated", "Sales Order")
                End If

            Catch ex As Exception
                ShowMessage(ex.Message, getValueByKey("CLAE05"))
                LogException(ex)
            End Try
        Else
            ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
            'ShowMessage("Please Select Sales Order first", "Sales Order Information")

        End If
        'End If

    End Sub

    Private Sub CtrlBtnReturn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CtrlBtnReturn.Click
        If (vSalesNo = "" Or vSalesNo = String.Empty) Then
            ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
            Exit Sub
        End If

        If OnlineConnect = False Then
            ShowMessage(getValueByKey("SOO84"), "SOO84 - " & getValueByKey("CLAE04"))
            Exit Sub
        End If
        If CtrlBtnReturn.Tag = "Return" Or CtrlBtnReturn.Tag = "" Then
            '  If IsApplyPromotion Then
            '------added by ketan discount not clear in return case as per old so
            'cmdClrAllPromo_Click(sender, e)
            'End If

            TabSalesOrder.TabPages("TabPageItemDetailsReturn").TabVisible = True
            TabSalesOrder.TabPages("TabPageItemDetailsReturn").Select()
            TabSalesOrder.TabPages("TabPageItemDetails").TabVisible = False
            TabSalesOrder.TabPages("TabPageOrderDetails").TabVisible = False
            CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = False
            rbnGrpCMPromotion1.Enabled = False
            rbngAddCombo.Enabled = False
            rbnGrpCST.Enabled = False
            CtrlBtnReturn.Text = "Cancel Return"
            CtrlBtnReturn.Tag = "Cancel Return"
            TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetailsReturn")
            vDocType = vDocTypeReturn
            boolIsReturn = True
        Else
            TabSalesOrder.TabPages("TabPageItemDetailsReturn").TabVisible = False
            TabSalesOrder.TabPages("TabPageItemDetails").TabVisible = True
            TabSalesOrder.TabPages("TabPageOrderDetails").TabVisible = True
            CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = True
            rbnGrpCMPromotion1.Enabled = True
            rbngAddCombo.Enabled = True
            rbnGrpCST.Enabled = True
            TabSalesOrder.TabPages("TabPageItemDetails").Select()
            TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetails")
            CtrlBtnReturn.Text = "Return"
            CtrlBtnReturn.Tag = "Return"
            vDocType = vDocTypeCreation
            boolIsReturn = False
        End If
    End Sub
    Private Sub GridItemSetting()
        Try

            'AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "EAN".ToUpper() _
            For colno = 1 To grdSOItems.Cols.Count - 1
                If grdSOItems.Cols(colno).Name.ToUpper() <> "DISCRIPTION".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "ArticleCode".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "SellingPrice".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "Quantity".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "DeliveredQty".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "IsCLP".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "Discount".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "DEL".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "PLUS".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "SrNo".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "ArticleType".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "UOM".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "ReservedQty".ToUpper() _
                     AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "TaxPer".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "TotalTaxAmt".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "DeliverySiteCode".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "PckgSize".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "PckgQty".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "PackagingType".ToUpper() _
                     AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "PackagingMaterial".ToUpper() _
                      AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "NetAmt".ToUpper() _
                    AndAlso grdSOItems.Cols(colno).Name.ToUpper() <> "NetAmount".ToUpper() Then

                    HideColumns(grdSOItems, False, grdSOItems.Cols(colno).Name)
                End If
            Next



            grdSOItems.Cols("DEL").Caption = ""
            grdSOItems.Cols("DEL").Width = 20
            grdSOItems.Cols("DEL").ComboList = "..."
            grdSOItems.Cols("PLUS").Caption = ""
            grdSOItems.Cols("PLUS").Width = 25
            grdSOItems.Cols("SrNo").Width = 43
            grdSOItems.Cols("SrNo").Caption = "Sr. No."
            grdSOItems.Cols("SrNo").DataType = Type.GetType("System.Decimal")
            ''IIf(resourceMgr Is Nothing, "Item Code", getValueByKey("frmcashmemo.DgBulkComboGrid.articlecode"))
            grdSOItems.Cols("SrNo").AllowEditing = False

            'grdSOItems.Cols("EAN").Visible = False
            grdSOItems.Cols("ArticleType").Caption = "Article Type"
            grdSOItems.Cols("ArticleType").Width = 80
            grdSOItems.Cols("ArticleType").AllowEditing = False
            grdSOItems.Cols("ArticleType").Visible = True
            grdSOItems.Cols("ArticleCode").Caption = "Article Code"
            grdSOItems.Cols("ArticleCode").Width = 81
            grdSOItems.Cols("ArticleCode").AllowEditing = False
            grdSOItems.Cols("ArticleCode").Visible = True
            grdSOItems.Cols("Discription").Caption = "Article Desc." ' getValueByKey("frmnsalesorderupdate.grdSOItems.discription")
            '   grdSOItems.Cols("Discription").Width = 300
            grdSOItems.Cols("Discription").Width = 208
            grdSOItems.Cols("Discription").AllowEditing = False
            grdSOItems.Cols("UOM").Caption = "UOM"
            grdSOItems.Cols("UOM").Width = 39
            grdSOItems.Cols("UOM").AllowEditing = False
            grdSOItems.Cols("UOM").Visible = True
            'added by Khusrao Adil
            ' for savoy
            If clsDefaultConfiguration.BarcodeDisplayAllowed Then
                If clsDefaultConfiguration.IsSavoy Then
                    grdSOItems.Cols("EAN").Caption = "Model No."
                    grdSOItems.Cols("EAN").Width = 130
                    grdSOItems.Cols("EAN").AllowEditing = False
                    grdSOItems.Cols("EAN").Visible = True
                Else
                    grdSOItems.Cols("EAN").Visible = False
                End If
            Else
                grdSOItems.Cols("EAN").Visible = False
            End If
            'grdSOItems.Cols("SellingPrice").Caption = "Price" 'getValueByKey("frmnsalesordercreation.grdSOItems.sellingprice")
            grdSOItems.Cols("SellingPrice").Caption = "Price" 'getValueByKey("frmnsalesorderupdate.grdSOItems.sellingprice")
            grdSOItems.Cols("SellingPrice").Width = 55
            grdSOItems.Cols("SellingPrice").AllowEditing = False
            '  grdSOItems.Cols("SellingPrice").DataType = Type.GetType("System.Int32")
            grdSOItems.Cols("SellingPrice").DataType = Type.GetType("System.Decimal")
            '   grdSOItems.Cols("SellingPrice").Format = "0"
            grdSOItems.Cols("SellingPrice").Format = "0.00"
            grdSOItems.Cols("Quantity").Caption = "Order Qty" 'getValueByKey("frmnsalesorderupdate.grdSOItems.quantity")
            grdSOItems.Cols("Quantity").Width = 67
            'grdSOItems.Cols("Quantity").EditMask = "999999999"
            grdSOItems.Cols("Quantity").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("Quantity").Format = "0.000"
            grdSOItems.Cols("PickUpQty").Caption = "PickUp Qty"
            grdSOItems.Cols("PickUpQty").Width = 107
            grdSOItems.Cols("PickUpQty").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("PickUpQty").Format = "0.000"
            grdSOItems.Cols("PickUpQty").AllowEditing = False
            grdSOItems.Cols("DeliveredQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitems.deliveredqty")
            grdSOItems.Cols("DeliveredQty").Width = 92
            grdSOItems.Cols("DeliveredQty").Format = "0.000"
            grdSOItems.Cols("DeliveredQty").AllowEditing = False
            'grdSOItems.Cols("PckgSize").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.pickupqty")
            grdSOItems.Cols("PckgSize").Width = 93
            grdSOItems.Cols("PckgSize").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("PckgSize").Format = "0.000"
            'grdSOItems.Cols("PckgSize").AllowEditing = False

            'grdSOItems.Cols("PckgQty").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.pickupqty")
            grdSOItems.Cols("PckgQty").Width = 99
            grdSOItems.Cols("PckgQty").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("PckgQty").Format = "0.000"
            grdSOItems.Cols("Discount").AllowEditing = False
            grdSOItems.Cols("Discount").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("Discount").Format = "0.00"
            grdSOItems.Cols("Discount").Width = 55
            If clsDefaultConfiguration.IsBatchManagementReq Then
                grdSOItems.Cols("PickUpQty").AllowEditing = False
            End If

            Dim DtPackgingTypes = objComn.GetPackagingBox(clsAdmin.SiteCode, 1)  '1=packaging types
            Dim PackagingTypeList As String
            PackagingTypeList = PackagingTypeList & " " & "|"
            For index = 0 To DtPackgingTypes.Rows.Count - 1
                PackagingTypeList = PackagingTypeList & DtPackgingTypes(index)(0) & "|"
            Next index
            If PackagingTypeList.Length > 0 Then
                PackagingTypeList = PackagingTypeList.Substring(0, PackagingTypeList.Length - 1)
            End If

            grdSOItems.Cols("PackagingType").Width = 102
            grdSOItems.Cols("PackagingType").Caption = "Packaging Type"
            '// IIf(resourceMgr Is Nothing, "Disc%", getValueByKey("frmcashmemo.DgBulkComboGrid.quantity"))
            grdSOItems.Cols("PackagingType").AllowEditing = True
            grdSOItems.Cols("PackagingType").ComboList = PackagingTypeList



            dtPackagingBox = objComn.GetPackagingBoxDataSet(clsDefaultConfiguration.PackagingBoxLastNodeCode)
            Dim PackagingMaterialList As String
            For index = 0 To dtPackagingBox.Rows.Count - 1
                PackagingMaterialList = PackagingMaterialList & dtPackagingBox(index)(2) & "|"
            Next index
            If PackagingMaterialList.Length > 0 Then
                PackagingMaterialList = PackagingMaterialList.Substring(0, PackagingMaterialList.Length - 1)
            End If

            grdSOItems.Cols("PackagingMaterial").Width = 123
            grdSOItems.Cols("PackagingMaterial").Caption = "Packaging Material"
            '// IIf(resourceMgr Is Nothing, "Disc%", getValueByKey("frmcashmemo.DgBulkComboGrid.quantity"))
            grdSOItems.Cols("PackagingMaterial").AllowEditing = True
            grdSOItems.Cols("PackagingMaterial").ComboList = PackagingMaterialList

            'grdSOItems.Cols("TOTALDISCPERCENTAGE").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.totaldiscpercentage")
            'grdSOItems.Cols("TOTALDISCPERCENTAGE").Width = 45
            'grdSOItems.Cols("TOTALDISCPERCENTAGE").Format = "0.00"
            'grdSOItems.Cols("TOTALDISCPERCENTAGE").AllowEditing = False
            grdSOItems.Cols("NetAmount").Caption = "Gross Amt." 'getValueByKey("frmnsalesorderupdate.grdSOItems.netamount")
            grdSOItems.Cols("NetAmount").Width = 54
            grdSOItems.Cols("NetAmount").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("NetAmount").Format = "0.00"
            grdSOItems.Cols("NetAmount").AllowEditing = False
            grdSOItems.Cols("NetAmount").Width = 90

            grdSOItems.Cols("NetAmt").Caption = "Net Amt" 'getValueByKey("frmnsalesorderupdate.grdSOItems.netamount")
            grdSOItems.Cols("NetAmt").Width = 54
            grdSOItems.Cols("NetAmt").DataType = Type.GetType("System.Decimal")
            grdSOItems.Cols("NetAmt").Format = "0.00"
            grdSOItems.Cols("NetAmt").AllowEditing = False
            grdSOItems.Cols("NetAmt").Width = 90
            'grdSOItems.Cols("ExpDelDate").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.expdeldate")
            'grdSOItems.Cols("ExpDelDate").Width = 140
            'grdSOItems.Cols("ExpDelDate").Format = "g"
            'grdSOItems.Cols("Stock").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.stock")
            'grdSOItems.Cols("Stock").Width = 45
            'grdSOItems.Cols("Stock").AllowEditing = False
            grdSOItems.Cols("IsCLP").Caption = "Points Applicable?" 'getValueByKey("frmnsalesorderupdate.grdSOItems.isclp")
            grdSOItems.Cols("IsCLP").Width = 120
            grdSOItems.Cols("ReservedQty").Caption = "Reserved On" 'getValueByKey("frmnsalesorderupdate.grdSOItems.reservedqty")
            grdSOItems.Cols("ReservedQty").Width = 85
            grdSOItems.Cols("ReservedQty").Format = "0.000"
            'grdSOItems.Cols("ReservedQty").DataType = Type.GetType("System.Boolean")
            'grdSOItems.Cols("IsCLP").DataType = Type.GetType("System.Boolean")
            'ExclTaxAmt
            grdSOItems.Cols("TotalTaxAmt").Caption = "Article Level Tax" 'getValueByKey("frmnsalesordercreation.grdSOItems.excltaxamt")
            grdSOItems.Cols("TotalTaxAmt").Width = 106
            grdSOItems.Cols("TotalTaxAmt").AllowEditing = False
            grdSOItems.Cols("TotalTaxAmt").Format = "0.00"
            grdSOItems.Cols("DeliverySiteCode").Width = 120

            '' added by ketan PC GST UI Changes
            grdSOItems.Cols("TaxPer").Caption = "Tax %" 'getValueByKey("frmnsalesordercreation.grdSOItems.excltaxamt")
            grdSOItems.Cols("TaxPer").Width = 55
            grdSOItems.Cols("TaxPer").AllowEditing = False
            grdSOItems.Cols("TaxPer").Format = "0.00"

            'grdSOItems.AutoSizeCols()
            grdSOItems.Cols("Del").Width = 20
            grdSOItems.KeyActionTab = C1.Win.C1FlexGrid.KeyActionEnum.None

            'If clsDefaultConfiguration.ThemeSelect = "Theme 1" Then
            '    For i = 0 To grdSOItems.Cols.Count - 1
            '        grdSOItems.Cols(i).Caption = grdSOItems.Cols(i).Caption.ToUpper
            '    Next
            'End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub GridDeliverdSetting()
        Try
            ' AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "EAN".ToUpper() _
            For colno = 1 To dgDeliveryLocation.Cols.Count - 1
                If dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DISCRIPTION".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "ArticleCode".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "Quantity".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "IsCLP".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DEL".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PLUS".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "SrNo".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DispSrNo".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "ArticleType".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "UOM".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "ReservedQty".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliverySiteCode".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PckgSize".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
                     AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PickUp".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PendingQty".ToUpper() _
                     AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "STR".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliveryDate".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliveryTime".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliveryAddress".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PckgQty".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PackagingType".ToUpper() _
                     AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PackagingMaterial".ToUpper() _
                     AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "LastPickDate".ToUpper() _
                    AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "NetAmount".ToUpper() Then
                    HideColumns(dgDeliveryLocation, False, dgDeliveryLocation.Cols(colno).Name)
                End If
            Next
            ''AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "LastPickDate".ToUpper() _
            If clsDefaultConfiguration.PackageFiedlsAllowed Then
                dgDeliveryLocation.Cols("PcKgSize").Visible = True
                dgDeliveryLocation.Cols("PcKgQty").Visible = True
                dgDeliveryLocation.Cols("PcKgSize").AllowEditing = False
                dgDeliveryLocation.Cols("PcKgQty").AllowEditing = False
                dgDeliveryLocation.Cols("PcKgSize").Width = 93
                dgDeliveryLocation.Cols("PcKgQty").Width = 99
            Else
                dgDeliveryLocation.Cols("PcKgSize").Visible = False
                dgDeliveryLocation.Cols("PcKgQty").Visible = False
            End If

            dgDeliveryLocation.Cols("DEL").Caption = ""
            dgDeliveryLocation.Cols("DEL").Width = 20
            dgDeliveryLocation.Cols("DEL").ComboList = "..."
            dgDeliveryLocation.Cols("PLUS").Caption = ""
            dgDeliveryLocation.Cols("PLUS").Width = 23
            dgDeliveryLocation.Cols("SrNo").Width = 43
            dgDeliveryLocation.Cols("SrNo").Caption = "Sr. No."
            dgDeliveryLocation.Cols("SrNo").TextAlign = TextAlignEnum.RightCenter
            ''IIf(resourceMgr Is Nothing, "Item Code", getValueByKey("frmcashmemo.DgBulkComboGrid.articlecode"))
            dgDeliveryLocation.Cols("SrNo").AllowEditing = False
            dgDeliveryLocation.Cols("ArticleType").AllowEditing = False
            dgDeliveryLocation.Cols("ArticleType").Width = 70
            dgDeliveryLocation.Cols("Discription").Width = 235
            dgDeliveryLocation.Cols("Discription").AllowEditing = False
            'grdSOItems.Cols("Quantity").EditMask = "999999999"

            dgDeliveryLocation.Cols("Quantity").DataType = Type.GetType("System.Decimal")
            dgDeliveryLocation.Cols("Quantity").Format = "0.000"
            dgDeliveryLocation.Cols("Quantity").Width = 70
            dgDeliveryLocation.Cols("PickUpQty").DataType = Type.GetType("System.Decimal")
            dgDeliveryLocation.Cols("PickUpQty").Format = "0.000"
            dgDeliveryLocation.Cols("PickUpQty").Width = 82
            dgDeliveryLocation.Cols("PickUpQty").Caption = "Pckg pickUp"
            dgDeliveryLocation.Cols("PickUpQty").Visible = False
            '-------New
            dgDeliveryLocation.Cols("PickUp").DataType = Type.GetType("System.Decimal")
            dgDeliveryLocation.Cols("PickUp").Format = "0.000"
            dgDeliveryLocation.Cols("PickUp").Width = 90
            dgDeliveryLocation.Cols("PickUp").Caption = "Pick Up Qty"
            '-------
            'grdSOItems.Cols("Quantity").EditMask = "999999999"
            dgDeliveryLocation.Cols("PendingQty").DataType = Type.GetType("System.Decimal")
            dgDeliveryLocation.Cols("PendingQty").Format = "0.000"
            dgDeliveryLocation.Cols("PendingQty").AllowEditing = False
            dgDeliveryLocation.Cols("PendingQty").Width = 82
            ' grdSOItems.Cols("DeliveryDate").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.expdeldate")
            dgDeliveryLocation.Cols("DeliveryDate").Width = 111
            dgDeliveryLocation.Cols("DeliveryDate").DataType = Type.GetType("System.DateTime")
            dgDeliveryLocation.Cols("DeliveryDate").Format = "d"
            dgDeliveryLocation.Cols("DeliveryDate").TextAlign = TextAlignEnum.CenterCenter
            dgDeliveryLocation.Cols("DeliveryTime").Width = 111
            dgDeliveryLocation.Cols("DeliveryTime").DataType = Type.GetType("System.DateTime")
            dgDeliveryLocation.Cols("DeliveryTime").Format = "HH:mm"
            dgDeliveryLocation.Cols("DeliveryTime").TextAlign = TextAlignEnum.CenterCenter
            dgDeliveryLocation.Cols("UOM").AllowEditing = False
            dgDeliveryLocation.Cols("PackagingMaterial").AllowEditing = False
            Dim isFirstSite As Integer = 0
            Dim AddressList As String
            Dim IsAddresAdded As Boolean = False
            For index = 0 To dtTempOrderAddresses.Rows.Count - 1
                If dtTempOrderAddresses(index)(1).trim <> "" AndAlso dtTempOrderAddresses(index)(1).trim <> "" Then
                    If dtTempOrderAddresses(index)(2) = "Store" AndAlso isFirstSite = 0 Then
                        isFirstSite = 1
                    End If
                    If isFirstSite = 1 AndAlso dtTempOrderAddresses(index)(2) = "Store" AndAlso IsAddresAdded Then
                        isFirstSite = 2
                        AddressList = AddressList & "-----------------------------" & "|"
                        AddressList = AddressList & dtTempOrderAddresses(index)(1) & "|"
                    Else
                        If dtTempOrderAddresses(index)(2) = "Address" Then
                            IsAddresAdded = True
                        End If

                        AddressList = AddressList & dtTempOrderAddresses(index)(1) & "|"
                    End If

                End If

            Next index
            If AddressList IsNot Nothing Then
                If AddressList.Length > 0 Then
                    AddressList = AddressList.Substring(0, AddressList.Length - 1)
                End If
            End If
            dgDeliveryLocation.Cols("PackagingMaterial").Width = 158
            dgDeliveryLocation.Cols("DeliveryAddress").Width = 219
            'grdSOItems.Cols("DeliveryAddress").Caption = "Packaging Type"
            '// IIf(resourceMgr Is Nothing, "Disc%", getValueByKey("frmcashmemo.DgBulkComboGrid.quantity"))
            dgDeliveryLocation.Cols("DeliveryAddress").AllowEditing = True
            dgDeliveryLocation.Cols("DeliveryAddress").ComboList = AddressList
            dgDeliveryLocation.Cols("DispSrNo").DataType = Type.GetType("System.Decimal")
            dgDeliveryLocation.Cols("UOM").Width = 50
            dgDeliveryLocation.Cols("LastPickDate").DataType = Type.GetType("System.DateTime")
            dgDeliveryLocation.Cols("LastPickDate").Width = 158
            dgDeliveryLocation.Cols("LastPickDate").Format = "yyyy-MM-dd hh:mm tt"
            dgDeliveryLocation.Cols("LastPickDate").AllowEditing = False
            '  grdSOItems.Cols("Discription").Width = 210
            dgDeliveryLocation.Cols("STR").Width = 70
            dgDeliveryLocation.Cols("STR").TextAlign = TextAlignEnum.CenterCenter

            dgDeliveryLocation.KeyActionTab = C1.Win.C1FlexGrid.KeyActionEnum.None
            If clsDefaultConfiguration.IsSavoy Then
                grdSOItems.Cols("PackagingMaterial").Visible = False
                grdSOItems.Cols("PckgSize").Visible = False
                grdSOItems.Cols("PckgQty").Visible = False
                grdSOItems.Cols("PackagingType").Visible = False

            End If
            If clsDefaultConfiguration.IsSavoy Then
                dgDeliveryLocation.Cols("PackagingMaterial").Visible = False
                dgDeliveryLocation.Cols("PckgSize").Visible = False
                dgDeliveryLocation.Cols("PckgQty").Visible = False
                dgDeliveryLocation.Cols("PackagingType").Visible = False
                dgDeliveryLocation.Cols("STR").Visible = False
            End If
            'If clsDefaultConfiguration.ThemeSelect = "Theme 1" Then
            '    For i = 0 To dgDeliveryLocation.Cols.Count - 1
            '        dgDeliveryLocation.Cols(i).Caption = dgDeliveryLocation.Cols(i).Caption.ToUpper
            '    Next
            'End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Sub DisablebuttonsForSavoy()
        cmdGenerateSTR.Visible = False
        lblStrRaised.Visible = False
        lblDispStrRaised.Visible = False
        TabPageItemSTRDetails.TabVisible = False
        rbnGrpCMPromotion1.Visible = False
    End Sub
    Private Sub GridSTRSetting()
        Try


            ''AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "LastPickDate".ToUpper() _
            grdSTRDetails.AllowEditing = False
            grdSTRDetails.Cols("SrNo").Width = 60
            grdSTRDetails.Cols("SrNo").Caption = "Sr. No."
            grdSTRDetails.Cols("SrNo").TextAlign = TextAlignEnum.LeftCenter
            ''IIf(resourceMgr Is Nothing, "Item Code", getValueByKey("frmcashmemo.DgBulkComboGrid.articlecode"))
            grdSTRDetails.Cols("SrNo").AllowEditing = False
            grdSTRDetails.Cols("GeneratedOn").AllowEditing = False
            grdSTRDetails.Cols("GeneratedOn").Width = 160
            grdSTRDetails.Cols("GeneratedOn").Caption = "Generated On Date & Time"
            grdSTRDetails.Cols("GeneratedOn").Format = "g"
            grdSTRDetails.Cols("STRNo").AllowEditing = False
            grdSTRDetails.Cols("STRNo").Width = 120
            grdSTRDetails.Cols("STRNo").Caption = "STR No"
            grdSTRDetails.Cols("Requested").AllowEditing = False
            grdSTRDetails.Cols("Requested").Width = 120
            grdSTRDetails.Cols("Requested").Caption = "Requested from site"
            ' grdSOItems.Cols("DeliveryDate").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.expdeldate")
            grdSTRDetails.Cols("STRDate").Width = 140
            grdSTRDetails.Cols("STRDate").DataType = Type.GetType("System.DateTime")
            grdSTRDetails.Cols("STRDate").Format = "d"
            grdSTRDetails.Cols("STRDate").Caption = "STR Date"
            grdSTRDetails.Cols("STRTime").Width = 140
            grdSTRDetails.Cols("STRTime").DataType = Type.GetType("System.DateTime")
            grdSTRDetails.Cols("STRTime").Format = "t"
            grdSTRDetails.Cols("STRTime").Caption = "STR Time"
            grdSTRDetails.Cols("GeneratedBY").Caption = "Generated By"
            grdSTRDetails.Cols("GeneratedBY").Width = 140

            grdSTRDetails.KeyActionTab = C1.Win.C1FlexGrid.KeyActionEnum.None
            'If clsDefaultConfiguration.ThemeSelect = "Theme 1" Then
            '    For i = 0 To grdSTRDetails.Cols.Count - 1
            '        grdSTRDetails.Cols(i).Caption = grdSTRDetails.Cols(i).Caption.ToUpper
            '    Next
            'End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    'Private Sub GridDeliverdSetting()
    '    Try
    '        'grdSOItemRetuns.Cols("Del").Caption = ""
    '        'grdSOItemRetuns.Cols("Del").Width = 20
    '        grdSOItemRetuns.Cols("Del").Visible = False
    '        For colno = 1 To grdSOItems.Cols.Count - 1
    '            If grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DISCRIPTION".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "ArticleCode".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "SellingPrice".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "Quantity".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "TotalDiscPercentage".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "IsCLP".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "TotalDiscount".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DEL".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "ExpDelDate".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "ReservedQty".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "TotalTaxAmt".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DeliveredQty".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "EditBarcode".ToUpper() _
    '                AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "NetAmount".ToUpper() Then
    '                HideColumns(grdSOItemRetuns, False, grdSOItemRetuns.Cols(colno).Name)
    '            End If
    '        Next
    '        grdSOItemRetuns.Cols("ArticleCode").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.articlecode")
    '        grdSOItemRetuns.Cols("ArticleCode").Width = 90
    '        grdSOItemRetuns.Cols("ArticleCode").AllowEditing = False
    '        grdSOItemRetuns.Cols("EAN").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.ean")
    '        grdSOItemRetuns.Cols("EAN").Width = 90
    '        grdSOItemRetuns.Cols("EAN").Visible = False
    '        grdSOItemRetuns.Cols("Discription").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.discription")
    '        grdSOItemRetuns.Cols("Discription").Width = 150
    '        grdSOItemRetuns.Cols("SellingPrice").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.sellingprice")
    '        grdSOItemRetuns.Cols("SellingPrice").Width = 60
    '        grdSOItemRetuns.Cols("Quantity").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.quantity")
    '        grdSOItemRetuns.Cols("Quantity").Width = 45
    '        grdSOItemRetuns.Cols("Quantity").DataType = Type.GetType("System.Decimal")
    '        grdSOItemRetuns.Cols("Quantity").Format = "0.000"
    '        'grdSOItemRetuns.Cols("Quantity").EditMask = "999999999"

    '        grdSOItemRetuns.Cols("PickUpQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.pickupqty")
    '        grdSOItemRetuns.Cols("PickUpQty").Width = 45
    '        grdSOItemRetuns.Cols("PickUpQty").DataType = Type.GetType("System.Decimal")
    '        grdSOItemRetuns.Cols("PickUpQty").Format = "0.000"
    '        '----- Commented By Mahesh for allowing decimal 3 digits -------
    '        '-----  grdSOItemRetuns.Cols("PickUpQty").EditMask = "999999999"

    '        grdSOItemRetuns.Cols("PickUpQty").AllowEditing = Not clsDefaultConfiguration.IsBatchManagementReq
    '        grdSOItemRetuns.Cols("DeliveredQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.deliveredqty")
    '        grdSOItemRetuns.Cols("DeliveredQty").Width = 45
    '        grdSOItemRetuns.Cols("DeliveredQty").Format = "0.000"
    '        grdSOItemRetuns.Cols("Quantity").DataType = Type.GetType("System.Decimal")
    '        grdSOItemRetuns.Cols("PickupQty").DataType = Type.GetType("System.Decimal")
    '        grdSOItemRetuns.Cols("DeliveredQty").DataType = Type.GetType("System.Decimal")

    '        If clsDefaultConfiguration.WeightScaleEnabled Then
    '            grdSOItemRetuns.Cols("Quantity").Format = "0.000"
    '            grdSOItemRetuns.Cols("PickupQty").Format = "0.000"
    '            grdSOItemRetuns.Cols("DeliveredQty").Format = "0.000"
    '        Else
    '            grdSOItemRetuns.Cols("Quantity").Format = "0.00"
    '            grdSOItemRetuns.Cols("PickupQty").Format = "0.00"
    '            grdSOItemRetuns.Cols("DeliveredQty").Format = "0.00"

    '        End If
    '        grdSOItemRetuns.Cols("ReturnReasonCode").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.returnreasoncode")
    '        grdSOItemRetuns.Cols("ReturnReasonCode").Width = 45
    '        grdSOItemRetuns.Cols("Discount").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.discount")
    '        grdSOItemRetuns.Cols("Discount").Width = 45
    '        grdSOItemRetuns.Cols("NetAmount").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.netamount")
    '        grdSOItemRetuns.Cols("NetAmount").Width = 70
    '        grdSOItemRetuns.Cols("ExpDelDate").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.expdeldate")
    '        grdSOItemRetuns.Cols("ExpDelDate").Width = 120
    '        grdSOItemRetuns.Cols("ExpDelDate").Format = "g"
    '        grdSOItemRetuns.Cols("Stock").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.stock")
    '        grdSOItemRetuns.Cols("Stock").Width = 45
    '        grdSOItemRetuns.Cols("IsCLP").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.isclp")
    '        grdSOItemRetuns.Cols("IsCLP").Width = 45
    '        grdSOItemRetuns.Cols("ReservedQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.reservedqty")
    '        grdSOItemRetuns.Cols("ReservedQty").Width = 45
    '        grdSOItemRetuns.Cols("ReservedQty").Format = "0.000"
    '        grdSOItems.Cols("ReservedQty").DataType = Type.GetType("System.Boolean")
    '        grdSOItems.Cols("IsCLP").DataType = Type.GetType("System.Boolean")
    '        grdSOItemRetuns.Cols("EAN").AllowEditing = False
    '        grdSOItemRetuns.Cols("Discription").AllowEditing = False
    '        grdSOItemRetuns.Cols("SellingPrice").AllowEditing = False
    '        grdSOItemRetuns.Cols("DeliveredQty").AllowEditing = False
    '        grdSOItemRetuns.Cols("Discount").AllowEditing = False
    '        grdSOItemRetuns.Cols("NetAmount").AllowEditing = False
    '        grdSOItemRetuns.Cols("Stock").AllowEditing = False
    '        grdSOItemRetuns.Cols("ExpDelDate").AllowEditing = False
    '        grdSOItemRetuns.Cols("Quantity").AllowEditing = False
    '        grdSOItemRetuns.AutoSizeCols()
    '    Catch ex As Exception
    '        LogException(ex)
    '    End Try
    'End Sub
    Private Sub GridReturnSetting()
        Try
            'grdSOItemRetuns.Cols("Del").Caption = ""
            'grdSOItemRetuns.Cols("Del").Width = 20

            For colno = 1 To grdSOItemRetuns.Cols.Count - 1
                If grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DISCRIPTION".ToUpper() _
                     AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DEL".ToUpper() _
                     AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "Srno".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "ArticleCode".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "IsCombo".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "PickupQty".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DeliveredQty".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DeliveryDate".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DeliveryTime".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "DeliveryAddress".ToUpper() _
                    AndAlso grdSOItemRetuns.Cols(colno).Name.ToUpper() <> "NetAmount".ToUpper() Then
                    grdSOItemRetuns.Cols(colno).Visible = False
                End If
            Next
            grdSOItemRetuns.Cols("Srno").AllowEditing = False
            grdSOItemRetuns.Cols("ArticleCode").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.articlecode")
            grdSOItemRetuns.Cols("ArticleCode").Width = 90
            grdSOItemRetuns.Cols("ArticleCode").AllowEditing = False
            'grdSOItemRetuns.Cols("EAN").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.ean")
            'grdSOItemRetuns.Cols("EAN").Width = 90
            'grdSOItemRetuns.Cols("EAN").Visible = False
            grdSOItemRetuns.Cols("Discription").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.discription")
            grdSOItemRetuns.Cols("Discription").Width = 150
            'grdSOItemRetuns.Cols("SellingPrice").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.sellingprice")
            'grdSOItemRetuns.Cols("SellingPrice").Width = 60
            grdSOItemRetuns.Cols("OrderQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.quantity")
            grdSOItemRetuns.Cols("OrderQty").Width = 45
            grdSOItemRetuns.Cols("OrderQty").DataType = Type.GetType("System.Decimal")
            grdSOItemRetuns.Cols("OrderQty").Format = "0.000"
            'grdSOItemRetuns.Cols("Quantity").EditMask = "999999999"

            grdSOItemRetuns.Cols("PickUpQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.pickupqty")
            grdSOItemRetuns.Cols("PickUpQty").Width = 45
            grdSOItemRetuns.Cols("PickUpQty").DataType = Type.GetType("System.Decimal")
            grdSOItemRetuns.Cols("PickUpQty").Format = "0.000"
            '----- Commented By Mahesh for allowing decimal 3 digits -------
            '-----  grdSOItemRetuns.Cols("PickUpQty").EditMask = "999999999"

            grdSOItemRetuns.Cols("PickUpQty").AllowEditing = Not clsDefaultConfiguration.IsBatchManagementReq
            grdSOItemRetuns.Cols("DeliveredQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.deliveredqty")
            grdSOItemRetuns.Cols("DeliveredQty").Width = 45
            grdSOItemRetuns.Cols("DeliveredQty").Format = "0.000"
            grdSOItemRetuns.Cols("OrderQty").DataType = Type.GetType("System.Decimal")
            grdSOItemRetuns.Cols("PickupQty").DataType = Type.GetType("System.Decimal")
            grdSOItemRetuns.Cols("DeliveredQty").DataType = Type.GetType("System.Decimal")

            If clsDefaultConfiguration.WeightScaleEnabled Then
                grdSOItemRetuns.Cols("OrderQty").Format = "0.000"
                grdSOItemRetuns.Cols("PickupQty").Format = "0.000"
                grdSOItemRetuns.Cols("DeliveredQty").Format = "0.000"
            Else
                grdSOItemRetuns.Cols("OrderQty").Format = "0.00"
                grdSOItemRetuns.Cols("PickupQty").Format = "0.00"
                grdSOItemRetuns.Cols("DeliveredQty").Format = "0.00"

            End If
            'grdSOItemRetuns.Cols("ReturnReasonCode").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.returnreasoncode")
            'grdSOItemRetuns.Cols("ReturnReasonCode").Width = 45
            'grdSOItemRetuns.Cols("Discount").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.discount")
            'grdSOItemRetuns.Cols("Discount").Width = 45
            'grdSOItemRetuns.Cols("NetAmount").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.netamount")
            'grdSOItemRetuns.Cols("NetAmount").Width = 70
            'grdSOItemRetuns.Cols("ExpDelDate").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.expdeldate")
            'grdSOItemRetuns.Cols("ExpDelDate").Width = 120
            'grdSOItemRetuns.Cols("ExpDelDate").Format = "g"
            grdSOItemRetuns.Cols("DeliveryDate").Format = "d"
            grdSOItemRetuns.Cols("DeliveryTime").Format = "t"

            'grdSOItemRetuns.Cols("Stock").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.stock")
            'grdSOItemRetuns.Cols("Stock").Width = 45
            'grdSOItemRetuns.Cols("IsCLP").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.isclp")
            'grdSOItemRetuns.Cols("IsCLP").Width = 45
            'grdSOItemRetuns.Cols("ReservedQty").Caption = getValueByKey("frmnsalesorderupdate.grdsoitemretuns.reservedqty")
            'grdSOItemRetuns.Cols("ReservedQty").Width = 45
            'grdSOItemRetuns.Cols("ReservedQty").Format = "0.000"
            'grdSOItems.Cols("ReservedQty").DataType = Type.GetType("System.Boolean")
            'grdSOItems.Cols("IsCLP").DataType = Type.GetType("System.Boolean")
            'grdSOItemRetuns.Cols("EAN").AllowEditing = False
            grdSOItemRetuns.Cols("Discription").AllowEditing = False
            ' grdSOItemRetuns.Cols("SellingPrice").AllowEditing = False
            grdSOItemRetuns.Cols("DeliveredQty").AllowEditing = False
            'grdSOItemRetuns.Cols("Discount").AllowEditing = False
            ' grdSOItemRetuns.Cols("NetAmount").AllowEditing = False
            '  grdSOItemRetuns.Cols("Stock").AllowEditing = False
            grdSOItemRetuns.Cols("DeliveryDate").AllowEditing = False
            grdSOItemRetuns.Cols("DeliveryTime").AllowEditing = False
            grdSOItemRetuns.Cols("ArticleCode").Visible = False

            Dim isFirstSite As Integer = 0
            Dim AddressList As String
            Dim IsAddresAdded As Boolean = False
            'For index = 0 To dtOrderAddresses.Rows.Count - 1
            '    If dtOrderAddresses(index)(1).trim <> "" AndAlso dtOrderAddresses(index)(1).trim <> "" Then
            '        If dtOrderAddresses(index)(2) = "Store" AndAlso isFirstSite = 0 Then
            '            isFirstSite = 1
            '        End If
            '        If isCustSelected AndAlso isFirstSite = 1 AndAlso dtOrderAddresses(index)(2) = "Store" AndAlso IsAddresAdded Then
            '            isFirstSite = 2
            '            AddressList = AddressList & "-----------------------------" & "|"
            '            AddressList = AddressList & dtOrderAddresses(index)(1) & "|"
            '        Else
            '            If dtOrderAddresses(index)(2) = "Address" Then
            '                IsAddresAdded = True
            '            End If

            '            AddressList = AddressList & dtOrderAddresses(index)(1) & "|"
            '        End If

            '    End If

            'Next index
            'If AddressList.Length > 0 Then
            '    AddressList = AddressList.Substring(0, AddressList.Length - 1)
            'End If

            ' grdSOItemRetuns.Cols("DeliveryAddress").ComboList = AddressList
            For i = 1 To grdSOItemRetuns.Rows.Count - 1
                Dim row As DataRow() = dtTempOrderAddresses.Select("AddressKey='" & grdSOItemRetuns.Rows(i)("DeliveryAddress") & "'")
                If row.Length > 0 Then
                    grdSOItemRetuns.Rows(i)("DeliveryAddress") = row(0)("AddressValue")
                End If
            Next


            grdSOItemRetuns.Cols("DeliveryAddress").AllowEditing = False
            grdSOItemRetuns.AutoSizeCols()
            'If clsDefaultConfiguration.ThemeSelect = "Theme 1" Then
            '    For i = 0 To grdSOItemRetuns.Cols.Count - 1
            '        grdSOItemRetuns.Cols(i).Caption = grdSOItemRetuns.Cols(i).Caption.ToUpper
            '    Next
            'End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub GridInvoiceSetting()
        Try

            grdSOInvoice.Cols("SalesNO").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.salesno")
            grdSOInvoice.Cols("SalesNO").Width = 90
            grdSOInvoice.Cols("InvoiceNO").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.invoiceno")
            grdSOInvoice.Cols("InvoiceNO").Width = 90
            grdSOInvoice.Cols("DocumentType").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.documenttype")
            grdSOInvoice.Cols("DocumentType").Width = 60
            grdSOInvoice.Cols("TerminalID").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.terminalid")
            grdSOInvoice.Cols("TerminalID").Width = 45
            grdSOInvoice.Cols("UserName").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.username")
            grdSOInvoice.Cols("UserName").Width = 90
            grdSOInvoice.Cols("InvoiceDate").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.invoicedate")
            grdSOInvoice.Cols("InvoiceDate").Width = 70
            grdSOInvoice.Cols("TenderType").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.tendertype")
            grdSOInvoice.Cols("TenderType").Width = 45
            grdSOInvoice.Cols("InvoiceAmt").Caption = getValueByKey("frmnsalesorderupdate.grdsoinvoice.invoiceamt")
            grdSOInvoice.Cols("InvoiceAmt").Width = 45
            grdSOInvoice.Cols("InvoiceAmt").Format = "0"
            grdSOInvoice.AutoSizeCols()
            For Each col As C1.Win.C1FlexGrid.Column In grdSOInvoice.Cols
                col.AllowEditing = False
            Next
            'If clsDefaultConfiguration.ThemeSelect = "Theme 1" Then
            '    For i = 0 To grdSOInvoice.Cols.Count - 1
            '        grdSOInvoice.Cols(i).Caption = grdSOInvoice.Cols(i).Caption.ToUpper
            '    Next
            'End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub cmdSONew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSONew.Click
        Try
            If dsMain.Tables(0).Rows.Count > 0 Then
                If MsgBox(getValueByKey("SO049"), MsgBoxStyle.YesNo, "SO049 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                    IsFormClosing = True
                    Dim frm As New frmPCSalesOrderCreation
                    MDISpectrum.ShowChildForm(frm, True)
                End If
            Else
                Dim frm As New frmPCSalesOrderCreation
                MDISpectrum.ShowChildForm(frm, True)
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub CmdSOEdit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CmdSOEdit.Click
        Try
            If SoCancel = False Then

                Me.Close()
                Dim frm As New frmPCNSalesOrderUpdate
                ' frm.SoCancel = false   'vipin 31-jan-18
                frm.SoCancel = True
                MDISpectrum.ShowChildForm(frm, True)

            End If
            'SoCancel = True
            If SoCancel Then
                If Not (dsScan.Tables(0).Rows.Count > 0) Then
                    ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
                    'ShowMessage("Please Select Sales Order first", "Sales Order Information")
                    Exit Sub
                End If
                If (String.IsNullOrEmpty(vSalesNo) Or CtrlTxtOrderNo.Text.Trim <> vSalesNo Or grdSOItems.Rows.Count <= 1) Then
                    ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                    Exit Sub
                End If

                Dim TotalDelQty As Object
                Dim TotalDeliveredQty As Double = 0.0
                Dim crdsaleadjustamount As Double = 0.0
                Dim crdsale As Double = 0.0
                TotalDelQty = dsScan.Tables("ItemScanDetails").Compute("Sum(DeliveredQty)", "DeliveredQty>0")
                TotalDeliveredQty = IIf(TotalDelQty Is DBNull.Value, 0.0, TotalDelQty)

                If MsgBox(getValueByKey("SO028"), MsgBoxStyle.YesNo, "SO028 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                    If TotalDeliveredQty > 0 Then
                        ShowMessage(getValueByKey("SO029") & " " & CtrlTxtOrderNo.Text.Trim, "SO029 - " & getValueByKey("CLAE04"))
                        AutoLogout(FrmTranCode, Me, lblLoggedIn)
                        Exit Sub
                    Else
                        'ShowMessage("Sales Order No. " & CtrlSalesInfo.CtrlTxtOrderNo.Text.Trim & " is ready to be canceled", "Cancel Sales Order")
                        'BtnAcceptPayment_Click(Me, New System.EventArgs)

                        Dim articlePrice = Decimal.Zero, pendingTotalNetAmount = Decimal.Zero, advanceAmountPaid = Decimal.Zero, CVIssueAmount As Decimal = Decimal.Zero
                        Dim penaltyInPercentage As Decimal = Decimal.Zero
                        Try
                            For Each drDtls As DataRow In dsMain.Tables("SalesOrderDtl").Rows

                                articlePrice = drDtls("NetAmount") / drDtls("Quantity")
                                pendingTotalNetAmount += articlePrice * (drDtls("Quantity") - drDtls("DeliveredQty"))
                            Next


                            '----- Commented By Mahesh Here we go for Extra Advance Amt i.e. Advance Amt rec - Picked up Amt 
                            '---- Therefore for so cancel  pickup amt  is Zero so directly Assigned this Amt as Advance Amt
                            'If (dsMain.Tables("SalesOrderHDR").Rows(0)("BalanceAmount") = 0) Then
                            '    advanceAmountPaid = 0
                            'Else
                            '    advanceAmountPaid = pendingTotalNetAmount - dsMain.Tables("SalesOrderHDR").Rows(0)("BalanceAmount")
                            'End If
                            advanceAmountPaid = dsMain.Tables("SalesOrderHDR").Rows(0)("AdvanceAmt")

                            Dim salesordernumber As String = ""
                            If dsMain.Tables("SalesInvoice").Rows.Count > 0 AndAlso Not dsMain.Tables("SalesInvoice") Is Nothing Then
                                If dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").Length > 0 Then
                                    Dim dt As DataTable = dsMain.Tables("SalesInvoice").Select("TenderHeadCode='Credit Sales'").CopyToDataTable
                                    If dt.Rows.Count > 0 AndAlso Not dt Is Nothing Then
                                        For Each x In dt.Rows
                                            crdsale += x("AmountTendered")
                                            salesordernumber = x("DocumentNumber")
                                        Next
                                    End If
                                End If
                            End If
                            If crdsale > 0 Then
                                advanceAmountPaid = advanceAmountPaid - crdsale
                            End If
                            Dim dtCreditSaleData As New DataTable
                            Dim objclsReturn As New clsCashMemoReturn
                            dtCreditSaleData = objclsReturn.getCreditSaleBillData("'" + salesordernumber + "'")
                            If dtCreditSaleData.Rows.Count > 0 AndAlso Not dtCreditSaleData Is Nothing Then
                                For Each y In dtCreditSaleData.Rows
                                    crdsaleadjustamount += y("CreditSaleAdjustment")
                                Next
                            End If

                            If (clsDefaultConfiguration.PenaltyPercentageInCancel = 0) Then
                                CVIssueAmount = advanceAmountPaid

                            ElseIf (clsDefaultConfiguration.PenaltyPercentageInCancel > 0) Then

                                If (DirectCast(dsMain.Tables("SalesOrderHdr").Rows(0)("CreatedOn"), Date).AddDays(clsDefaultConfiguration.NoofdaysAfterPenaltyApplicable).Date > clsAdmin.CurrentDate.Date) Then
                                    penaltyInPercentage = 0
                                    CVIssueAmount = advanceAmountPaid
                                Else
                                    penaltyInPercentage = clsDefaultConfiguration.PenaltyPercentageInCancel
                                    If (advanceAmountPaid = 0) Then
                                        CVIssueAmount = ((clsDefaultConfiguration.PenaltyPercentageInCancel * pendingTotalNetAmount) / 100) * -1

                                    ElseIf (advanceAmountPaid > 0) Then
                                        CVIssueAmount = advanceAmountPaid - ((clsDefaultConfiguration.PenaltyPercentageInCancel * pendingTotalNetAmount) / 100)
                                    End If
                                End If
                            End If
                        Catch ex As Exception
                            ShowMessage(ex.Message, getValueByKey("CLAE05"))
                            LogException(ex)
                        End Try
                        Dim PaymentToBeSettled As Double = 0.0
                        Dim PenaltyAmount As Double = 0.0
                        PenaltyAmount = ((clsDefaultConfiguration.PenaltyPercentageInCancel * pendingTotalNetAmount) / 100)

                        If crdsale > 0 Then
                            PaymentToBeSettled = -(advanceAmountPaid + crdsaleadjustamount) + PenaltyAmount
                        Else
                            PaymentToBeSettled = CVIssueAmount
                        End If



                        If (advanceAmountPaid <> 0 Or CVIssueAmount <> 0) Then
                            If (crdsaleadjustamount = 0) Then
                                If MsgBox(String.Format(getValueByKey("SO091"),
                                              MyRound(advanceAmountPaid, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                              penaltyInPercentage,
                                              MyRound(CVIssueAmount * -1, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)),
                                         MsgBoxStyle.YesNo, "SO091 - " & getValueByKey("SO089")) = MsgBoxResult.No Then
                                    Exit Sub
                                End If
                            Else
                                If MsgBox(String.Format(getValueByKey("SO090"),
                                                                            MyRound(advanceAmountPaid, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                                                            crdsaleadjustamount,
                                                                            penaltyInPercentage,
                                                                            MyRound(PenaltyAmount, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired),
                                                                             MyRound(PaymentToBeSettled, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)),
                                                                       MsgBoxStyle.YesNo, "SO090 - " & getValueByKey("SO089")) = MsgBoxResult.No Then
                                    Exit Sub
                                End If
                            End If
                        End If

                        Try
                            If crdsaleadjustamount > 0 Then
                                CVIssueAmount = MyRound(PaymentToBeSettled, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)
                            Else
                                CVIssueAmount = MyRound(CVIssueAmount * -1, clsDefaultConfiguration.BillRoundOffAt, clsDefaultConfiguration.RoundOffRequired)
                            End If

                            If CVIssueAmount <> 0 Then
                                'ShowMessage("Need to pay remaining amount is " & Math.Round(vReturnAmount, 2) & " because Delivered Amount is " & vTotalDeliveredAmount, "Payment Information")
                                'ShowMessage(String.Format(getValueByKey("SO081"), Math.Round(vReturnAmount, 2), vTotalDeliveredAmount), "SO081 - " & getValueByKey("CLAE04"))

                                Dim objPayment As New frmNAcceptPaymentPC()
                                objPayment.TotalBillAmount = CVIssueAmount
                                objPayment.CreditSettlement = True
                                objPayment.AcceptEditBillDataSet = dsPayment
                                objPayment.PaymentType = clsAcceptPayment.PaymentType.Accept
                                objPayment.ShowDialog()

                                _dsPayment = New DataSet
                                _dsPayment = objPayment.ReciptTotalAmount()
                                objPayment.Close()

                                If (objPayment.IsCancelAcceptPayment) Then
                                    Return
                                End If
                            End If

                            dsMain.Tables("SalesOrderHDR").RejectChanges()
                            dsMain.Tables("SalesOrderHDRAudit").RejectChanges()
                            dsMain.Tables("SalesOrderDTL").RejectChanges()
                            dsMain.Tables("SalesOrderDTLAudit").RejectChanges()
                            dsMain.Tables("SalesOrderTaxDtls").RejectChanges()
                            dsMain.Tables("SalesOrderOtherCharges").RejectChanges()
                            dsMain.Tables("SalesInvoice").RejectChanges()
                            dsMain.Tables("OrderHdr").RejectChanges()
                            dsMain.Tables("OrderDtl").RejectChanges()

                            dsMain.Tables("SalesOrderHDR").Rows(0).Item("PenaltyAmount") = IIf(CVIssueAmount > 0, CVIssueAmount, 0)
                            dsMain.Tables("SalesOrderHDR").Rows(0).Item("SOStatus") = "Cancel"
                            dsMain.Tables("SalesOrderHDR").Rows(0).Item("UPDATEDON") = vCurrentDate
                            dsMain.Tables("SalesOrderHDR").Rows(0).Item("UPDATEDBY") = clsAdmin.UserCode
                            dsMain.Tables("SalesOrderHDR").Rows(0).Item("UPDATEDAT") = clsAdmin.SiteCode

                            If Not (PrepareInvcDataforSave(dsMain) = True) Then
                                Exit Sub
                            End If

                            If objSO.PrepareSaveData(CtrlTxtOrderNo.Text.Trim, clsAdmin.DayOpenDate, clsAdmin.CLPProgram, vCustomerNo, dsMain, False, 0, vSiteCode, CtrlTxtOrderNo.Text, clsDefaultConfiguration.StockStorageLocation, clsAdmin.CVProgram, "SalesOrder", vfinancialYear, clsAdmin.UserCode, clsAdmin.CurrentDate, IsOutboundCreated) = True Then

                                If Not dsPayment.Tables("MSTRecieptType") Is Nothing AndAlso dsPayment.Tables("MSTRecieptType").Rows.Count > 0 Then
                                    Dim totalPay As Decimal
                                    For Each dr As DataRow In dsPayment.Tables("MSTRecieptType").Select("RecieptTypeCode='CreditVouc(I)'", "", DataViewRowState.CurrentRows)
                                        totalPay = IIf(dr("Amount") > 0, dr("Amount"), dr("Amount") * -1)

                                        Dim clsVoucher As New SpectrumPrint.clsPrintVoucher
                                        clsVoucher.PrintGiftVoucherAndCreditNote("SalesOrder", clsAdmin.SiteCode, "CreditNote", String.Empty, totalPay, String.Empty, clsAdmin.UserName, CtrlTxtOrderNo.Text, clsAdmin.CurrencyCode, clsAdmin.CurrentDate, BarCodeType)
                                    Next
                                End If

                                ShowMessage(getValueByKey("SO039"), "SO039 - " & getValueByKey("CLAE04"))

                                ' IsSalesOrderCancel = True
                                Dim ChildForm As New frmPCSalesOrderCreation
                                Try
                                    If ChildForm.Name <> String.Empty Then
                                        IsFormClosing = True
                                        MDISpectrum.ShowChildForm(ChildForm, True)
                                        Exit Sub
                                    End If
                                Catch ex As Exception
                                    ChildForm.Close()
                                End Try
                                'ResetSalesOrder()
                                CtrlTxtOrderNo.Text = ""
                            Else
                                ShowMessage(getValueByKey("SO040"), "SO040 - " & getValueByKey("CLAE04"))
                                'ShowMessage("Sales Order does not Updated", "Sales Order")
                            End If

                        Catch ex As Exception
                            ShowMessage(ex.Message, getValueByKey("CLAE05"))
                            LogException(ex)
                        End Try

                    End If


                    'rbbtnSave.Enabled = True
                    'CtrlBtnPayBill.Enabled = True
                    CtrlRbn1.DgrpPayments.Enabled = True


                End If
            End If
            'If dsMain.Tables(0).Rows.Count > 0 Then
            '    If MsgBox(getValueByKey("SO049"), MsgBoxStyle.YesNo, "SO049 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
            '        IsFormClosing = True
            '        Dim frm As New frmPCNSalesOrderUpdate
            '        frm.SoCancel = True
            '        MDISpectrum.ShowChildForm(frm, True)
            '    End If
            'Else
            '    Dim frm As New frmPCNSalesOrderUpdate
            '    frm.SoCancel = True
            '    MDISpectrum.ShowChildForm(frm, True)
            'End If

        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub grdSOItemRetuns_AfterEdit1(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.RowColEventArgs) 'Handles grdSOItemRetuns.AfterEdit
        Try
            If grdSOItemRetuns.Cols(e.Col).Name.ToUpper() = "PickUpQty".ToUpper() Then
                If Not grdSOItemRetuns.Rows(e.Row)("FreezeSR") Is DBNull.Value AndAlso grdSOItemRetuns.Rows(e.Row)("FreezeSR") = True Then
                    grdSOItemRetuns.Rows(e.Row)("PickUpQty") = 0
                    ShowMessage(getValueByKey("SO079"), "SO079 - " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
                If grdSOItemRetuns.Rows(e.Row)("PickUpQty") > grdSOItemRetuns.Rows(e.Row)("DeliveredQty") Then
                    ShowMessage(getValueByKey("SO072"), "SO072 - " & getValueByKey("CLAE05"))
                    grdSOItemRetuns.Rows(e.Row)("PickUpQty") = 0
                    Exit Sub
                End If
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub CtrlBtnStockCheck_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CtrlBtnStockCheck.Click
        Try
            Dim objfrmStockCheck As New frmNStockCheck
            objfrmStockCheck.ShowDialog()
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub cmdClearSelectedPromo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdClearSelectedPromo.Click
        Try
            For Each dr As C1.Win.C1FlexGrid.Row In grdSOItems.Rows.Selected
                If IsApplyPromotion = True Then
                    For Each drdata As DataRow In dsScan.Tables(0).Select("EAN='" & dr("EAN").ToString() & "' AND ArticleCode='" & dr("ArticleCode").ToString() & "'", "", DataViewRowState.CurrentRows)
                        drdata("Discount") = 0
                        drdata("MinPayAmt") = 0
                        drdata("PromotionId") = 0
                        drdata("LineDiscount") = 0
                        drdata("TotalDiscPercentage") = 0
                        drdata("FirstLevel") = String.Empty
                        drdata("TopLevel") = String.Empty
                        Dim obj As New clsSaleOrderCommon
                        '---abc
                        'obj.RecalculateLine(drdata, CtrlSalesInfo.CtrlTxtOrderNo.Text, dsMain)
                    Next
                End If
            Next
            For Each drPackvar As DataRow In dsPackagingVar.Tables(0).Select("IsStatus <> 'Deleted'")
                'drRem("GrossAmt") = 0
                'drRem("MinPayAmt") = 0

                drPackvar("Discount") = 0
                drPackvar("PromotionId") = 0
                drPackvar("LineDiscount") = 0
                drPackvar("TotalDiscPercentage") = 0
                drPackvar("FirstLevel") = String.Empty
                drPackvar("TopLevel") = String.Empty
                'drPackvar("TopLevelDisc") = 0

                'Dim obj As New clsSaleOrderCommon
                'obj.IsCSTApplicable = Me.IsCSTApplicable
                ' obj.RecalculateLine(drRem, CtrlSalesInfo1.CtrlTxtOrderNo.Text, dsMain)
            Next
            'ReCalculateSalesOrder()
            CalculateSalesOrderSummory(dsScan)
            RefreshLoadSOData()
            GridItemSetting()
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Sub cmdClrAllPromo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdClrAllPromo.Click
        Try
            If dsScan.Tables(0).Rows.Count = 0 Then
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                Exit Sub
            End If
            '' Reset Tax before add discount Changes By PC tax Issue Added by Ketan
            Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
            If foundRow.Count > 0 Then
                ResetDocTax(True, dtDocTaxes)
                dtDocTaxes.Rows.Clear()
            End If
            dsMain.Tables("SalesOrderTaxDtls").AcceptChanges()
            isPromotionApplied = False
            If dsScan.Tables(0).Rows.Count > 0 Then
                If IsApplyPromotion = True Then
                    RemoveApplyPromotionNew(_dsScan, _dsPackagingVar)
                End If
                'ReCalculateSalesOrder()
                CalculateSalesOrderSummory(dsScan)
                RefreshLoadSOData()
                GridItemSetting()
                IsBtnSave = True
                If e IsNot Nothing Then
                    IsDiscountApplicable = False
                End If
            End If
            IsPromotionApplyFromFrontEnd = False '$$ By ketan And Vipin
        Catch ex As Exception
            LogException(ex)
        End Try

    End Sub
    Protected Overrides Function ProcessKeyPreview(ByRef m As System.Windows.Forms.Message) As Boolean
        Const WM_KEYDOWN As Integer = &H100
        If m.Msg = WM_KEYDOWN Then
            Select Case m.WParam.ToInt32
                Case Keys.F
                    If My.Computer.Keyboard.CtrlKeyDown Then
                        'Debug.Print("Ctrl + F")
                        BtnSearchItem_Click(CtrlSalesPerson1.CtrlTxtBox, New KeyEventArgs(Keys.Enter))
                    End If
                Case Keys.M
                    If My.Computer.Keyboard.CtrlKeyDown Then
                        'Debug.Print("Ctrl + M")
                        '---abc
                        '  CtrlCustDtls1.CtrlLabel3_Click(Nothing, New KeyEventArgs(Keys.Enter))
                    End If
                Case Keys.Q
                    If My.Computer.Keyboard.CtrlKeyDown Then
                        If IsBookingEdit = False Then
                            'Debug.Print("Ctrl + Q") ' Direct to Cash Memo
                            ' Create a new instance of the child form.
                            Dim ChildForm As New Spectrum.frmCashMemo
                            If ChildForm.Name <> String.Empty Then
                                MDISpectrum.MenuStrip.Hide()
                                MDISpectrum.ShowChildForm(ChildForm, True)
                                MDISpectrum.MenuStrip.Hide()
                            End If
                        End If
                    End If
                Case Keys.N
                    If My.Computer.Keyboard.CtrlKeyDown Then
                        If IsBookingEdit = False Then
                            cmdSONew_Click(Nothing, New System.EventArgs)
                        End If
                    End If
                Case Keys.B AndAlso rbbtnSOBooking.Visible
                        If My.Computer.Keyboard.CtrlKeyDown Then
                            rbbtnSOBooking_Click(Nothing, New System.EventArgs)
                        End If
                Case Keys.G AndAlso rbbtnSOBookingEdit.Visible
                        If My.Computer.Keyboard.CtrlKeyDown Then
                            rbbtnSOBookingEdit_Click(Nothing, New System.EventArgs)
                        End If
                Case Keys.E
                    If My.Computer.Keyboard.CtrlKeyDown Then
                        If IsBookingEdit = False Then
                            CmdSOEdit_Click(Nothing, New System.EventArgs)
                        End If
                    End If
                Case Keys.X
                    If My.Computer.Keyboard.CtrlKeyDown Then
                        If IsBookingEdit = False Then
                            CmdSOEdit_Click(Nothing, New System.EventArgs)
                        End If
                    End If
                Case Keys.S
                        If My.Computer.Keyboard.CtrlKeyDown Then
                            BtnSaveSalesOrder_Click(Nothing, New System.EventArgs)
                            '   CtrlCustSearch1.CtrlBtn1_Click(CtrlCustSearch1.CtrlBtn1, New System.EventArgs)
                        End If
                Case Keys.F2
                        ChangeQty()
            End Select
        End If
        Return MyBase.ProcessKeyPreview(m)
    End Function
    Private Function PickAmtToPay() As Double
        '        Dim TotalPickNDelAmt As Double = 0.0
        'If Not dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted' AND PickUpQty>0") Is DBNull.Value Then
        '    'PickAmtToPay = IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted' AND PickUpQty>0") Is DBNull.Value, 0, CDbl(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted'")))
        '    'PickAmtToPay = IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted' AND PickUpQty>0") Is DBNull.Value, 0, CDbl(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted'")))
        '    Dim dr() = dsScan.Tables("ItemScanDetails").Select("IsStatus<> 'Deleted' AND PickUpQty>0")
        '    For Each drPickupQty In dr
        '        Dim pickupQty = drPickupQty("PickupQty")
        '        NetArticleRate = Math.Round(drPickupQty("NetAmount") / drPickupQty("Quantity"), 3)
        '        PickAmtToPay = PickAmtToPay + (pickupQty * NetArticleRate)
        '    Next
        'Else
        '    PickAmtToPay = 0
        'End If


        '---------------------
        If Not dsPackagingVar.Tables(0).Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted' AND PickUpQty>0") Is DBNull.Value Then
            'PickAmtToPay = IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted' AND PickUpQty>0") Is DBNull.Value, 0, CDbl(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted'")))
            'PickAmtToPay = IIf(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted' AND PickUpQty>0") Is DBNull.Value, 0, CDbl(dsScan.Tables("ItemScanDetails").Compute("SUM(totalpickupamt)", "IsStatus<> 'Deleted'")))
            Dim dr() = dsPackagingVar.Tables(0).Select("IsStatus<> 'Deleted' AND PickUpQty>0")
            For Each drPickupQty In dr
                Dim pickupQty = drPickupQty("PickupQty")
                'NetArticleRate = Math.Round(drPickupQty("NetAmount") / drPickupQty("Quantity"), 3)

                Dim DiscAmt = 0
                DiscAmt = DiscAmt + ((drPickupQty("LineDiscount") * ((drPickupQty("Quantity") - drPickupQty("DeliveredQty")) / drPickupQty("Quantity"))))
                Dim vpendingQty = (drPickupQty("Quantity") - drPickupQty("DeliveredQty"))
                ' NetArticleRate = Math.Round((drPickupQty("SellingPrice") * vpendingQty) + ((drPickupQty("TotalTaxAmount") * vpendingQty / drPickupQty("Quantity"))) - DiscAmt, 3) / vpendingQty
                If vpendingQty > 0 Then '' added by ketan
                    NetArticleRate = Math.Round((drPickupQty("SellingPrice") * vpendingQty) + ((drPickupQty("TotalTaxAmount") * vpendingQty / drPickupQty("Quantity"))) - DiscAmt, 3) / vpendingQty
                Else
                    NetArticleRate = 0
                End If



                PickAmtToPay = PickAmtToPay + (pickupQty * NetArticleRate)
                '-----Added By Prasad for Calculating Tax Amt Pickupwise of Savoy Client
                If clsDefaultConfiguration.IsSavoy Then
                    Dim TaxCalc As Double = 0
                    Dim TaxValue As Double = 0
                    If Not dsMain.Tables("SalesOrderTaxDtls") Is Nothing AndAlso dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
                        Dim drs() = dsMain.Tables("SalesOrderTaxDtls").Select("Status=True")
                        If drs.Count > 0 Then
                            TaxValue = drs(0)("TaxValue")
                        End If
                    End If
                    TaxCalc = ((drPickupQty("SellingPrice") * drPickupQty("PickupQty")) / dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " ")) * TaxValue
                    PickAmtToPay = PickAmtToPay + TaxCalc
                End If
                '---------------------------------------------------------------------------


            Next
        Else
            PickAmtToPay = 0
        End If
        If dsInvoice.Tables(0).Rows.Count = 0 Then
            Dim dr() = dsPackagingVar.Tables(0).Select("IsStatus<> 'Deleted' AND DeliveredQty>0")
            For Each drPickupQty In dr
                Dim pickupQty = drPickupQty("DeliveredQty")
                NetArticleRate = Math.Round(drPickupQty("NetAmount") / drPickupQty("Quantity"), 3)
                PickAmtToPay = PickAmtToPay + (pickupQty * NetArticleRate)
            Next
        End If
        'If TotalPickNDelAmt > (vAdvanceAmount) Then  ' if total pick + del amount is greater then advance paid amount then must pay as pickup amt else no need to pay
        '    PickAmtToPay = MyRound((TotalPickNDelAmt - vAdvanceAmount), clsDefaultConfiguration.BillRoundOffAt)
        'Else
        '    PickAmtToPay = strZero
        'End If
        NetArticleRate = CDbl(lblminadvancepaid.Text.ToString.Trim) '## need to be review 
        Return NetArticleRate  '##
    End Function
    Private Sub ChangeQty()
        Try
            If grdSOItems.Rows.Count >= 1 Then
                grdSOItems.Focus()
                grdSOItems.Select(1, 4)
            End If

        Catch ex As Exception
            LogException(ex)
        End Try

    End Sub
    Private Sub PriceChange()
        If clsDefaultConfiguration.PriceChageAllowed = True Then
            If CheckInterTransactionAuth("PriceChange", dsMain.Tables("CashMemoDtl")) = True Then
                Dim frm As New frmSpecialPrompt(getValueByKey("SP002"))
                frm.ShowTextBox = True
                frm.txtValue.MaxLength = 14
                frm.AllowDecimal = True
                frm.AcceptButton = frm.cmdOk
                frm.IsNumeric = True
                frm.ShowDialog()
                If frm.GetResult IsNot Nothing Then
                    'grdSOItems.Rows(1)("SellingPrice") = IIf(frm.GetResult Is Nothing, 1, frm.GetResult)
                    'Change by Ashish on Dec 3, 2010
                    'Commented the above line to change the price of the selected row and not the first row 
                    grdSOItems.Rows(grdSOItems.RowSel)("SellingPrice") = IIf(frm.GetResult Is Nothing, 1, frm.GetResult)
                    Dim index As Int32 = grdSOItems.Cols("SellingPrice").Index
                    grdSOItems.Select(grdSOItems.RowSel, grdSOItems.Cols("Quantity").Index)
                    'end of change

                    grdSOItems_AfterEdit(grdSOItems, New C1.Win.C1FlexGrid.RowColEventArgs(1, index))
                End If
            End If
        End If
    End Sub


    Private Sub grdSOItems_ValidateEdit(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.ValidateEditEventArgs)
        If grdSOItems.Cols(e.Col).Name.ToUpper = "QUANTITY" Then
            If grdSOItems.Editor.Text.Length > 9 Then
                'CM059() " Qty cannot be greater then 999999999
                If Val(grdSOItems.Editor.Text) > 999999999 Then
                    MsgBox(getValueByKey("CM059"), MsgBoxStyle.Critical, "CM059" & " | " & getValueByKey("CLAE05"))
                    e.Cancel = True
                End If
            End If
        End If

    End Sub

    Private Function GetTaxableAmountForCst(ByVal strMatcode As String, ByVal EAN As String, ByVal Quantity As Double, ByVal TaxableAmount As Double) As Double
        Dim dtTaxCalc As DataTable
        dtTaxCalc = New DataTable
        dtTaxCalc = objCM.getTax(clsAdmin.SiteCode, strMatcode, "CMS", Quantity, EAN, clsDefaultConfiguration.CSTTaxCode, False)
        If dtTaxCalc.Rows.Count > 0 Then
            dtTaxCalc.Rows(0)("TAXABLE_AMOUNT") = TaxableAmount
            objCM.getCalculatedDataSet(dtTaxCalc)
            Return dtTaxCalc.Compute("SUM(TAXAMOUNT)", "")
        Else
            Return 0
        End If

    End Function

    Protected Sub grdSOItems_StartEdit(ByVal sender As Object, ByVal e As C1.Win.C1FlexGrid.RowColEventArgs)
        _iArticleQtyBeforeChange = grdSOItems.Rows(e.Row)("Quantity")
    End Sub

    Private Sub CtrReturnBarcode_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles CtrReturnBarcode.KeyDown
        Try
            If e.KeyCode = Keys.Enter Then
                Dim articleCode As String = objItemSch.GetArticleCodeFromBarcode(clsAdmin.SiteCode, CtrReturnBarcode.Text.Trim)
                If articleCode = String.Empty OrElse articleCode = "" Then
                    MessageBox.Show(getValueByKey("BatchBarcode005"))
                Else
                    Dim clsso As New clsSalesOrder()
                    Dim dtbarcodes = clsso.GetOutboundData(clsAdmin.SiteCode, "") 'CtrlSalesInfo.CtrlTxtOrderNo.Text.Trim
                    If dtbarcodes IsNot Nothing AndAlso dtbarcodes.Rows.Count > 0 Then
                        If dtbarcodes.AsEnumerable().Where(Function(w) w("BarCode").ToString() = CtrReturnBarcode.Text.Trim).Count() > 0 Then
                            If ReturnBatchbarcode.Any(Function(w) w.BatchBarcode = CtrReturnBarcode.Text.Trim) Then
                                If dtbarcodes.AsEnumerable().Where(Function(w) w("BarCode").ToString() = CtrReturnBarcode.Text.Trim).FirstOrDefault()("DeliveredQty") < (ReturnBatchbarcode.Where(Function(w) w.BatchBarcode = CtrReturnBarcode.Text.Trim).FirstOrDefault().Qty - 1) * -1 Then
                                    MessageBox.Show(getValueByKey("batchbarcode.Validation003"))
                                    Exit Sub
                                End If
                            Else
                                If dtbarcodes.AsEnumerable().Where(Function(w) w("BarCode").ToString() = CtrReturnBarcode.Text.Trim).FirstOrDefault()("DeliveredQty") < 1 Then
                                    MessageBox.Show(getValueByKey("BatchBarcode003"))
                                    Exit Sub
                                End If
                            End If

                        Else
                            MessageBox.Show(getValueByKey("BatchBarcode004"))
                            Exit Sub
                        End If

                    End If

                    Dim dt = objItemSch.GetEANData(clsAdmin.SiteCode, articleCode, clsAdmin.LangCode, "", dtItemScanData, False, True, CtrReturnBarcode.Text.Trim)
                    If dt IsNot Nothing Then
                        Dim selectedrow = dsScanReturn.Tables(0).AsEnumerable().Where(Function(w) w("EAN") = dt(0)("EAN")).FirstOrDefault()
                        If selectedrow IsNot Nothing Then
                            Dim PrevQty = selectedrow("PickUpQty")
                            selectedrow("PickUpQty") = Val(selectedrow("PickUpQty")) + 1
                            If Not selectedrow("FreezeSR") Is DBNull.Value AndAlso selectedrow("FreezeSR") = True Then
                                ShowMessage(getValueByKey("SO079"), "SO079 - " & getValueByKey("CLAE04"))
                                selectedrow("PickUpQty") = PrevQty
                                Exit Sub
                            ElseIf selectedrow("PickUpQty") > selectedrow("DeliveredQty") Then
                                ShowMessage(getValueByKey("SO072"), "SO072 - " & getValueByKey("CLAE05"))
                                selectedrow("PickUpQty") = PrevQty
                                Exit Sub
                            Else
                                If ReturnBatchbarcode.Any(Function(w) w.BatchBarcode = CtrReturnBarcode.Text.Trim) Then
                                    ReturnBatchbarcode.Find(Function(w) w.BatchBarcode = CtrReturnBarcode.Text.Trim).Qty -= 1
                                Else
                                    ReturnBatchbarcode.Add(New SpectrumCommon.BtachbarcodeInfo() With {.ArticleCode = selectedrow("ArticleCode"), .BatchBarcode = CtrReturnBarcode.Text.Trim, .EAN = selectedrow("EAN"), .LineNO = selectedrow("BillLineNO"), .Qty = -1, .Status = True, .ArticleName = selectedrow("DISCRIPTION")})
                                End If
                            End If
                        Else
                            MessageBox.Show(getValueByKey("BatchBarcode004"))
                        End If
                    Else
                        MessageBox.Show(getValueByKey("BatchBarcode005"))
                    End If


                End If

            End If
        Catch ex As Exception
            LogException(ex)
        Finally
            CtrReturnBarcode.Text = ""
        End Try
    End Sub

    Public Function AddButtonControlInGrid(ByVal rowIndex As Integer, ByVal Grid As String) As Boolean
        Try
            If Grid = "Sales" Then
                Dim getColumnType As String = String.Empty

                'Create styles with data types, formats, etc
                Dim cellStyle As C1.Win.C1FlexGrid.CellStyle

                cellStyle = grdSOItems.Styles.Add("CellImageType")
                cellStyle.DataType = Type.GetType("System.String")
                cellStyle.TextAlign = TextAlignEnum.LeftCenter
                cellStyle.WordWrap = True

                'Assign styles to editable cells
                Dim assignCellStyles As CellRange
                grdSOItems.Rows(rowIndex).HeightDisplay = 30

                Dim ButtonX As Integer = grdSOItems.Cols("EditBarcode").WidthDisplay

                'Create some new controls
                Dim btnBrowse As New CtrlBtn()
                btnBrowse.Tag = grdSOItems.Rows(rowIndex)("EAN").ToString()
                btnBrowse.MaximumSize = New System.Drawing.Size(ButtonX, 30)
                'btnBrowse.SetRowIndex = rowIndex
                btnBrowse.Text = "Barcode"
                btnBrowse.Name = "btnBarcode" + grdSOItems.Rows(rowIndex)("EAN").ToString()
                'Insert hosted control into grid
                btnBrowse.TabStop = False
                grdSOItems.Controls.Add(btnBrowse)

                'host them in the C1FlexGrid
                controlList.Add(New HostedControl(grdSOItems, btnBrowse, rowIndex, grdSOItems.Cols("EditBarcode").Index, ButtonX, ButtonX))

                'ImagePathRowIndex = rowIndex
                assignCellStyles = grdSOItems.GetCellRange(rowIndex, 3)
                assignCellStyles.Style = grdSOItems.Styles("CellImageType")

                AddHandler btnBrowse.Click, AddressOf BrowseImagePath
            Else

                Dim getColumnType As String = String.Empty

                'Create styles with data types, formats, etc
                Dim cellStyle As C1.Win.C1FlexGrid.CellStyle

                cellStyle = grdSOItemRetuns.Styles.Add("CellImageType")
                cellStyle.DataType = Type.GetType("System.String")
                cellStyle.TextAlign = TextAlignEnum.LeftCenter
                cellStyle.WordWrap = True

                'Assign styles to editable cells
                Dim assignCellStyles As CellRange
                grdSOItemRetuns.Rows(rowIndex).HeightDisplay = 30

                Dim ButtonX As Integer = grdSOItemRetuns.Cols("EditBarcode").WidthDisplay

                'Create some new controls
                Dim btnBrowse As New CtrlBtn()
                btnBrowse.Tag = grdSOItemRetuns.Rows(rowIndex)("EAN").ToString()
                btnBrowse.MaximumSize = New System.Drawing.Size(ButtonX, 30)
                'btnBrowse.SetRowIndex = rowIndex
                btnBrowse.Text = "Barcode"

                'Insert hosted control into grid
                grdSOItemRetuns.Controls.Add(btnBrowse)

                'host them in the C1FlexGrid
                controlList.Add(New HostedControl(grdSOItemRetuns, btnBrowse, rowIndex, grdSOItemRetuns.Cols("EditBarcode").Index, ButtonX, ButtonX))

                'ImagePathRowIndex = rowIndex
                assignCellStyles = grdSOItemRetuns.GetCellRange(rowIndex, 3)
                assignCellStyles.Style = grdSOItemRetuns.Styles("CellImageType")

                AddHandler btnBrowse.Click, AddressOf ReturnEditBatchBarcode
            End If


        Catch ex As Exception
            MessageBox.Show(ex.Message)
            LogException(ex)
        End Try
    End Function

    Private Sub grdSOItems_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles grdSOItems.Paint
        For Each hosted As HostedControl In controlList
            hosted.UpdatePosition()
        Next
    End Sub

    Private Sub BrowseImagePath(ByVal sender As Object, ByVal e As EventArgs)
        Try
            If Not EditCallFromOrderPackagingScreen = True Then

                If SoCancel Then
                    Exit Sub
                End If
                Dim leadIndex As Double = 0
                drPackgVariation = _dsScan.Tables("ItemScanDetails").Select("rowindex='" & DirectCast(sender, Button).Tag & "'")(0)
                If drPackgVariation.Item("Articletype") = "Combo" Then
                    If drPackgVariation.Item("PackagingMaterial") = "" Then
                        ShowMessage("Please select Packaging material for Combo article", " " & getValueByKey("CLAE04"))
                        Exit Sub
                    End If
                End If
                If IsApplyPromotion = True Then
                    RemoveApplyPromotionNew(dsScan, dsPackagingVar)

                End If
                Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True and status=true")
                If foundRow.Count > 0 Then
                    ResetDocTax(True, dtDocTaxes)
                    dtDocTaxes.Clear()
                End If
                'Dim blist = SpectrumCommon.ExtensionModule.DeepClone(Batchbarcode.Where(Function(w) w.EAN = DirectCast(sender, Button).Tag).ToList())
                'If blist.Count > 0 Then
                '    Dim batchbarcodes As New BatchBarcodeList(blist, SpectrumCommon.TransactionType.SalesOrderSales)
                '    Dim result = batchbarcodes.ShowDialog()
                '    If result = Windows.Forms.DialogResult.OK Then
                '        Batchbarcode.RemoveAll(Function(w) w.EAN = DirectCast(sender, Button).Tag)
                '        Batchbarcode.AddRange(blist.Where(Function(w) w.Status = True))
                '        RecalculatePickUp(blist)
                '    End If
                'Else
                '    MessageBox.Show(getValueByKey("batchbarcode.Validation002"))
                'End If

                Dim drPackgVariationCount As DataRow()
                drPackgVariationCount = _dsPackagingVar.Tables("PackagingMaterial").Select("rowindex='" & DirectCast(sender, Button).Tag & "'")
                If drPackgVariationCount.Length > 0 Then
                    leadIndex = Convert.ToDouble(DirectCast(sender, Button).Tag & "." & drPackgVariationCount.Length)
                End If
                SetPackagingBaseVarionInSO(drPackgVariation, leadIndex, True)
                'If drPackgVariationCount.Length > 0 Then
                vPackagingIndex = vPackagingIndex + 1
                vDeliveryIndex = vDeliveryIndex + 1
                'End If
                BindSOItemGridData(_dsScan.Tables("ItemScanDetails"))
                CalculateSalesOrderSummory(_dsScan)
                AddButtonControlInGridW(1)
                If clsDefaultConfiguration.IsNewSalesOrder Then  '' added on 24/07/17
                    ' BindTextValue()
                End If

            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Function SetPackagingBaseVarionInSO(ByVal drItemsRow As DataRow, Optional ByVal leadIndex As Double = 0, Optional ByVal isVaiationAdded As Boolean = False) As Boolean
        Try
            Dim drAddItemPackaging As DataRow
            'If drAddItemExists.Length = 0 Then
            drAddItemPackaging = _dsPackagingVar.Tables("PackagingMaterial").NewRow
            If drItemsRow.Item("Quantity") > 0 Then
                drAddItemPackaging("Quantity") = 1 'drItemsRow.Item("Quantity")
            Else
                drAddItemPackaging("Quantity") = 1
            End If
            Dim x As New DataSet
            x = dsMain
            drAddItemPackaging("PickUpQty") = 0

            'Else
            '    drAddItemPackaging = drAddItemExists(0)

            '    ''If IsEditItem = True Then
            '    ''    drAddItem("Quantity") = CDbl(grdScanItem.Item(grdScanItem.Row, "Quantity"))
            '    ''    IsEditItem = False
            '    ''Else
            '    'prevQty = drAddItem("Quantity")
            '    'drAddItem("Quantity") = drAddItem("Quantity") + 1
            '    'End If
            'End If

            If isVaiationAdded AndAlso leadIndex > 0 Then
                drAddItemPackaging("SrNo") = leadIndex

            Else
                drAddItemPackaging("SrNo") = vRowIndex

            End If
            drAddItemPackaging("SaleOrderNumber") = CtrlTxtOrderNo.Text
            drAddItemPackaging("FinYear") = clsAdmin.Financialyear
            drAddItemPackaging("SiteCode") = clsAdmin.SiteCode
            drAddItemPackaging("billLineNo") = drItemsRow.Item("billLineNo")
            drAddItemPackaging("pkgLineNo") = vPackagingIndex
            drAddItemPackaging("DeliveryIndex") = vDeliveryIndex
            drAddItemPackaging("ArticleType") = drItemsRow.Item("ArticleType")
            drAddItemPackaging("EAN") = drItemsRow.Item("EAN")
            drAddItemPackaging("DeliverySiteCode") = DeliverySiteCode
            drAddItemPackaging("Discription") = drItemsRow.Item("DISCRIPTION")
            drAddItemPackaging("BatchBarcode") = drItemsRow.Item("BatchBarcode")
            If isVaiationAdded Then
                drAddItemPackaging("IsHeader") = False
            Else
                drAddItemPackaging("IsHeader") = True
            End If
            If drItemsRow.Item("ArticleType") = "Combo" Then
                drAddItemPackaging("IsCombo") = True
            Else
                drAddItemPackaging("IsCombo") = False
            End If


            



            drAddItemPackaging("Discount") = 0
            drAddItemPackaging("LastNodeCode") = drItemsRow.Item("LastNodeCode").ToString()


            If isVaiationAdded Then
                Dim results As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel=False and EAN='" + drItemsRow.Item("EAN") + "' and RowIndex='" + drItemsRow.Item("RowIndex") + "'  and packagingindex='" + drItemsRow("PackagingIndex").ToString() + "'")
                If results.Length > 0 Then
                    Dim itrQtyRow As DataRow() = dsPackagingVar.Tables(0).Select("EAN='" & drItemsRow.Item("EAN") & "' And RowIndex='" + drItemsRow.Item("RowIndex") + "' ")

                    Dim QtyOthers As Object
                    Dim QtyExcAmt As Object
                    If itrQtyRow.Length > 0 Then
                        QtyOthers = dsPackagingVar.Tables(0).Compute("Sum(Quantity)", "EAN='" & drItemsRow.Item("EAN") & "' And RowIndex='" + drItemsRow.Item("RowIndex") + "' ")

                    End If
                    dvEditTaxVariation = New DataView(dsMain.Tables("SalesOrderTaxDtls"), "EAN='" & drItemsRow.Item("EAN") & "'  and RowIndex='" + drItemsRow.Item("RowIndex") + "'  and packagingindex='" + drItemsRow("PackagingIndex").ToString() + "'", "", DataViewRowState.CurrentRows)


                    For Each drView As DataRowView In dvEditTaxVariation
                        Dim taxVal As Decimal = drView("TaxValue")
                        If QtyOthers > 0 Then
                            taxVal = (taxVal / QtyOthers) * 1
                        End If
                        'drView.Delete()
                        drView("TaxValue") = drView("TaxValue") + taxVal
                    Next

                    'drTax("TaxValue") = drTax("TaxValue") + (Math.Round(results(0)("TaxValue"), 2))  'Math.Round(drRowTax("TaxAmount"), 2)

                End If

            End If

            '$$ added By ketan SOGST 
            Dim resultDis As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + drItemsRow.Item("billLineNo").ToString() + "'") ' and PkgLineNo='" + drAddItemPackaging("pkgLineNo").ToString + "'")
            Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + drItemsRow.Item("BillLineNo").ToString() + "' ") 'and PkgLineNo='" + drAddItemPackaging("pkgLineNo").ToString + "'")
            Dim Prvdisc As Double = 0
            Dim PvrTaxvalue As Double = 0
            If resultDis.Length > 0 Then
                Prvdisc = resultDis(0)("DiscountAmount")
            End If
            If resultTax.Length > 0 Then
                '' handel db null by ketan 
                PvrTaxvalue = If(resultTax(0)("TaxAmount") Is DBNull.Value, 0, resultTax(0)("TaxAmount")) 'resultTax(0)("TaxAmount")
            End If


            ' Dim vpendingQty = (resultPack(0)("Quantity") - resultPack(0)("DeliveredQty"))
            drAddItemPackaging("TaxInPer") = drItemsRow("TaxInPer") 'vipim
            drAddItemPackaging("ExclTaxAmt") = (drItemsRow.Item("ExclTaxAmt") - PvrTaxvalue) / (drItemsRow.Item("Quantity") - drItemsRow.Item("DeliveredQty")) 'drItemsRow.Item("ExclTaxAmt") / drItemsRow.Item("Quantity") 
            drAddItemPackaging("IncTaxAmt") = drItemsRow.Item("IncTaxAmt")
            drAddItemPackaging("TotalTaxAmount") = (drItemsRow.Item("ExclTaxAmt") - PvrTaxvalue) / (drItemsRow.Item("Quantity") - drItemsRow.Item("DeliveredQty")) 'drItemsRow.Item("ExclTaxAmt") / drItemsRow.Item("Quantity")
            drAddItemPackaging("IsImageReq") = 0
            drAddItemPackaging("TaxPer") = drItemsRow.Item("TaxPer") '' added by ketan pc GST changes 


            If drItemsRow.Item("ArticleType") = "Combo" Then
                If isVaiationAdded Then
                    drAddItemPackaging("SellingPrice") = drItemsRow.Item("SellingPrice")
                    drAddItemPackaging("NetAmount") = drItemsRow.Item("SellingPrice") * 1 + drAddItemPackaging("ExclTaxAmt")
                    drAddItemPackaging("GrossAmount") = drItemsRow.Item("SellingPrice") * 1
                    drAddItemPackaging("GrossAmt") = drItemsRow.Item("SellingPrice") * 1

                Else
                    drAddItemPackaging("SellingPrice") = 0
                    drAddItemPackaging("NetAmount") = 0
                    drAddItemPackaging("GrossAmount") = 0
                    drAddItemPackaging("GrossAmt") = 0
                End If

            Else
                drAddItemPackaging("NetAmount") = drItemsRow.Item("SellingPrice") * 1 + drAddItemPackaging("ExclTaxAmt")
                drAddItemPackaging("SellingPrice") = drItemsRow.Item("SellingPrice")
                drAddItemPackaging("GrossAmount") = drItemsRow.Item("SellingPrice") * 1
                drAddItemPackaging("GrossAmt") = drItemsRow.Item("SellingPrice") * 1
            End If

            drAddItemPackaging("Status") = True

            'drAddItem("ExpDelDate") = CtrlSalesInfo1.CtrlDtExpDelDate.Value
            If drItemsRow.Item("Stock") Is DBNull.Value Then
                drAddItemPackaging("Stock") = 0
            Else
                drAddItemPackaging("Stock") = Convert.ToDecimal(drItemsRow.Item("Stock"))
            End If

            If drItemsRow.Item("IsCLP") = True Then
                drAddItemPackaging("IsCLPApplicable") = True
            Else
                drAddItemPackaging("IsCLPApplicable") = False
            End If
            drAddItemPackaging("PckgSize") = "0.000" 'drItemsRow.Item("PckgSize")
            drAddItemPackaging("PckgQty") = "0.000" 'drItemsRow.Item("PckgQty")
            drAddItemPackaging("PckgType") = Nothing 'drItemsRow.Item("PackagingType")
            drAddItemPackaging("PckgMaterial") = drItemsRow.Item("PackagingMaterial")
            drAddItemPackaging("ArticleCode") = drItemsRow.Item("ARTICLECODE")
            drAddItemPackaging("UnitOfMeasure") = drItemsRow.Item("UOM")
            drAddItemPackaging("PackageBaseUOM") = drItemsRow.Item("UOM")

            drAddItemPackaging("DeliveredQty") = 0
            drAddItemPackaging("ReservedQty") = drItemsRow.Item("ReservedQty")
            drAddItemPackaging("CLPPoints") = 0
            drAddItemPackaging("CLPDiscount") = 0


            drAddItemPackaging("MinPayAmt") = drItemsRow.Item("MinPayAmt")
            drAddItemPackaging("deliveredqty") = 0
            drAddItemPackaging("PromotionId") = 0
            drAddItemPackaging("LineDiscount") = 0
            drAddItemPackaging("TotalDiscPercentage") = 0
            drAddItemPackaging("FirstLevel") = String.Empty
            drAddItemPackaging("TopLevel") = String.Empty
            drAddItemPackaging("IsStatus") = "Inserted"
            drAddItemPackaging("CostAmount") = drItemsRow.Item("CostAmount")
            drAddItemPackaging("IsNew") = True
            drAddItemPackaging("RowIndex") = drItemsRow.Item("RowIndex")
            _dsPackagingVar.Tables("PackagingMaterial").Rows.InsertAt(drAddItemPackaging, 0)
            _dsPackagingVar.AcceptChanges()
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function
    Private Function SetDeliveryBaseVariationInSO(ByVal drItemsRow As DataRow, Optional ByVal leadIndex As Double = 0, Optional ByVal leadDispIndex As String = "", Optional ByVal rowindex As Integer = 0, Optional ByVal isVaiationAdded As Boolean = False) As Boolean
        Try
            Dim drAddItemPackaging As DataRow
            'If drAddItemExists.Length = 0 Then
            drAddItemPackaging = _dsPackagingDelivery.Tables("PackagingDelivery").NewRow
            drAddItemPackaging("Quantity") = 0
            'drAddItemPackaging("PickUpQty") = 0

            'Else
            'drAddItemPackaging = drAddItemExists(0)

            ' ''If IsEditItem = True Then
            ' ''    drAddItem("Quantity") = CDbl(grdSOItems.Item(grdSOItems.Row, "Quantity"))
            ' ''    IsEditItem = False
            ' ''Else
            ''prevQty = drAddItem("Quantity")
            ''drAddItem("Quantity") = drAddItem("Quantity") + 1
            ''End If
            'End If

            drAddItemPackaging("SaleOrderNumber") = CtrlTxtOrderNo.Text
            drAddItemPackaging("SrNo") = leadDispIndex
            drAddItemPackaging("DispSrNo") = leadIndex
            drAddItemPackaging("PkgLineNo") = drItemsRow.Item("PkgLineNo")
            drAddItemPackaging("EAN") = drItemsRow.Item("EAN")
            drAddItemPackaging("finyear") = clsAdmin.Financialyear
            drAddItemPackaging("SiteCode") = drItemsRow.Item("SiteCode")
            drAddItemPackaging("IsCombo") = drItemsRow.Item("IsCombo")
            drAddItemPackaging("ArticleCode") = drItemsRow.Item("ArticleCode")
            drAddItemPackaging("DeliveryLineNo") = vDeliveryIndex
            drAddItemPackaging("ArticleType") = drItemsRow.Item("ArticleType")
            drAddItemPackaging("ISCustAddress") = drItemsRow.Item("ISCustAddress")
            drAddItemPackaging("BilllineNo") = drItemsRow.Item("BilllineNo")
            drAddItemPackaging("DeliveryAddress") = drItemsRow("DeliveryAddress").ToString()
            'Dim resultDelivery As DataRow() = _dsPackagingVar.Tables(0).Select("BilllineNo='" + drItemsRow("BilllineNo").ToString() + "' and pkglineNo='" + drItemsRow("pkglineNo").ToString() + "'")
            '-------
            drAddItemPackaging("PckgSize") = drItemsRow.Item("PckgSize")
            'drAddItemPackaging("PckgQty") = drItemsRow.Item("PckgSize") 'drItemsRow.Item("PckgQty")
            If drItemsRow.Item("IsCombo") Or drItemsRow.Item("UnitOfMeasure") = "NOS" Then
                drAddItemPackaging("PckgQty") = drItemsRow.Item("PckgQty")
            Else
                drAddItemPackaging("PckgQty") = "0 " & drItemsRow.Item("PackagingType")
            End If
            drAddItemPackaging("PackagingType") = drItemsRow.Item("PackagingType")
            '-------

            'drAddItemPackaging("PackagingMaterial") = resultDelivery(0)("PackagingMaterial")
            drAddItemPackaging("Discription") = drItemsRow.Item("DISCRIPTION")

            drAddItemPackaging("DeliveryDate") = DateTime.Now
            drAddItemPackaging("DeliveryTime") = DateTime.Now
            If rbDPNo.Checked Then
                drAddItemPackaging("DeliveryDate") = ctrlDtDeliveryDate.Value
                drAddItemPackaging("DeliveryTime") = ctrlDtDeliveryDate.Value

            Else
                drAddItemPackaging("DeliveryDate") = DateTime.Now
                drAddItemPackaging("DeliveryTime") = DateTime.Now
            End If
            drAddItemPackaging("PickUpQty") = 0
            drAddItemPackaging("DeliveredQty") = 0
            drAddItemPackaging("PendingQty") = 0
            'drAddItemPackaging("LastPickDate") = ""
            drAddItemPackaging("IsHeader") = "False"

            drAddItemPackaging("IsNew") = "True"

            drAddItemPackaging("Status") = "True"



            drAddItemPackaging("UnitOfMeasure") = drItemsRow.Item("UnitOfMeasure")
            'drAddItemPackaging("GrossAmt") = drItemsRow.Item("GrossAmt").ToString()

            'drAddItemPackaging("DeliveredQty") = 0
            'drAddItemPackaging("ReservedQty") = drItemsRow.Item("ReservedQty").ToString()
            'drAddItemPackaging("CLPPoints") = 0
            'drAddItemPackaging("CLPDiscount") = 0


            'drAddItemPackaging("MinPayAmt") = drItemsRow.Item("MinPayAmt").ToString()

            'drAddItemPackaging("PromotionId") = 0
            'drAddItemPackaging("LineDiscount") = 0
            'drAddItemPackaging("TotalDiscPercentage") = 0
            'drAddItemPackaging("FirstLevel") = String.Empty
            'drAddItemPackaging("TopLevel") = String.Empty
            'drAddItemPackaging("IsStatus") = "Inserted"
            'drAddItemPackaging("CostAmount") = drItemsRow.Item("CostAmount")
            'Dim result As DataRow() = dsPackagingDelivery.Tables(0).Select("RowIndex='" + dr("RowIndex").ToString() + "'  and PackagingIndex ='" + dr("PackagingIndex").ToString() + "'")


            'If dsPackagingDelivery.Tables(0).Rows.Count > 0 Then
            '    If result.Count > 0 Then
            '        Dim c As DataRow = _dsPackagingDelivery.Tables("PackagingDelivery").Select("RowIndex='" + dr("RowIndex").ToString() + "'  and PackagingIndex ='" + dr("PackagingIndex").ToString() + "'")(0)
            '        Dim x As Integer = dsPackagingDelivery.Tables("PackagingDelivery").Rows.IndexOf(c)
            '    End If


            'End If
            'drAddItemPackaging("RowIndex") = drItemsRow.Item("RowIndex")
            _dsPackagingDelivery.Tables("PackagingDelivery").Rows.InsertAt(drAddItemPackaging, rowindex)
            _dsPackagingDelivery.AcceptChanges()
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

    End Function

    Private Sub ReturnEditBatchBarcode(ByVal sender As Object, ByVal e As EventArgs)
        '---abc
        ' Dim blist = SpectrumCommon.ExtensionModule.DeepClone(ReturnBatchbarcode.Where(Function(w) w.EAN = DirectCast(sender, Button).Tag).ToList())
        'If blist.Count > 0 Then
        '    For Each batch As SpectrumCommon.BtachbarcodeInfo In blist
        '        batch.Qty = batch.Qty * -1
        '    Next
        '---abc
        '    Dim batchbarcodes As New BatchBarcodeList(blist, SpectrumCommon.TransactionType.SalesOrderReturn) With {.OrderNo = CtrlSalesInfo.CtrlTxtOrderNo.Text.Trim}
        '    Dim result = batchbarcodes.ShowDialog()
        '    If result = Windows.Forms.DialogResult.OK Then
        '        Dim selectedrow = dsScanReturn.Tables(0).AsEnumerable().Where(Function(w) w("EAN") = DirectCast(sender, Button).Tag).FirstOrDefault()
        '        selectedrow("PickUpQty") = blist.Where(Function(w) w.Status = True).Sum(Function(w) w.Qty)
        '        For Each batch As SpectrumCommon.BtachbarcodeInfo In blist
        '            batch.Qty = batch.Qty * -1
        '        Next
        '        ReturnBatchbarcode.RemoveAll(Function(w) w.EAN = DirectCast(sender, Button).Tag)
        '        ReturnBatchbarcode.AddRange(blist.Where(Function(w) w.Status = True))
        '    End If
        'Else
        '    MessageBox.Show(getValueByKey("batchbarcode.Validation002"))
        'End If


    End Sub

    Private Sub RecalculatePickUp(ByVal blist As List(Of SpectrumCommon.BtachbarcodeInfo))

        For Each barcode As SpectrumCommon.BtachbarcodeInfo In blist
            For Each dr As DataRow In dsScan.Tables("ItemScanDetails").Select("EAN='" & barcode.EAN & "'")
                dr("PickUpQty") = Batchbarcode.Where(Function(w) w.EAN = barcode.EAN).Sum(Function(w) w.Qty)
                If (dr("PickUpQty") > 0) AndAlso ((dr("DeliveredQty") + dr("PickUpQty")) > dr("Quantity")) Then
                    dr("Quantity") = dr("Quantity") + ((dr("DeliveredQty") + dr("PickUpQty")) - dr("Quantity"))
                End If
            Next
        Next
        ReCalculateSalesOrder()
        CalculateSalesOrderSummory(Nothing)
    End Sub
    Private Sub grdSOItemRetuns_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs) Handles grdSOItemRetuns.Paint
        For Each hosted As HostedControl In controlList
            hosted.UpdatePosition()
        Next
    End Sub

    Private Sub rbnAddCombo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs, Optional ByVal flg As Boolean = False) 'Handles BtnSOSave.Click
        Try
            '.  It will be enabled only when user selects customer.

            'If CtrltxrCust.Text.Trim() = String.Empty Then
            '    ShowMessage(getValueByKey("SO048"), "SO048 - " & getValueByKey("CLAE04"))
            '    CtrltxrCust.Select()
            '    Exit Sub
            'End If
            If dsScan.Tables(0).Rows.Count = 0 Then
                ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
                Exit Sub
            End If
            If TabSalesOrder.SelectedIndex = 1 Then
                TabSalesOrder.SelectedIndex = 0
            End If
            vSrno = IIf(dsScan.Tables(0).Compute("Max(SrNo)", "") Is DBNull.Value, 0, dsScan.Tables(0).Compute("Max(SrNo)", "")) + 1
            Dim combosrNo As Integer = vRowIndex
            Dim objBulkOrderCombo As New frmPCBulkOrderCombo
            objBulkOrderCombo.CardNo = CustomerNo 'vipin PC SO Merge 03-05-2018
            objBulkOrderCombo.DtSoBulkComboHdr = DtSoBulkComboHdr
            objBulkOrderCombo.DtSoBulkComboDtl = DtSoBulkComboDtl
            objBulkOrderCombo.DtSoBulkRemarks = DtSoBulkRemarks
            objBulkOrderCombo.BulkComboMstId = combosrNo
            objBulkOrderCombo.ComboSrNo = combosrNo
            objBulkOrderCombo.displaySrNo = vSrno
            objBulkOrderCombo.SalesOrderNo = CtrlTxtOrderNo.Text
            objBulkOrderCombo.dtPackagingcopiedfrom = dtPackagingcopiedfrom
            'objBulkOrderCombo.btnPrint.Enabled = False
            'objBulkOrderCombo.btnPrint.Enabled = False

            If objBulkOrderCombo.ShowDialog() = Windows.Forms.DialogResult.OK Then
                If objBulkOrderCombo.IsCombo = False Then
                    If objBulkOrderCombo.SingleArticleCode <> "" Then
                        CtrlSalesPerson.CtrlTxtBox.Text = objBulkOrderCombo.SingleArticleCode
                        Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                        If foundRow.Count > 0 Then
                            ResetDocTax(True, dtDocTaxes)
                            dtDocTaxes.Clear()
                        End If
                        txtSearchItem_Leave(CtrlSalesPerson.CtrlTxtBox.Text, New KeyEventArgs(Keys.Enter))
                    End If

                Else

                    DtSoBulkComboHdr = objBulkOrderCombo.DtSoBulkComboHdr
                    DtSoBulkComboDtl = objBulkOrderCombo.DtSoBulkComboDtl
                    'SingleArticleCode = objBulkOrderCombo.SingleArticleCode

                    If DtSoBulkComboHdr.Rows.Count > 0 Then
                        Dim firstRow As DataRow = DtSoBulkComboHdr.Select("ComboSrNo='" + combosrNo.ToString() + "'").FirstOrDefault()
                        Dim foundRow As DataRow() = dsMain.Tables("SalesOrderTaxDtls").Select("IsDocumentLevel = True")
                        If foundRow.Count > 0 Then
                            ResetDocTax(True, dtDocTaxes)
                            dtDocTaxes.Clear()
                        End If
                        AddComoInScanItemInSO(firstRow)

                        'CtrlSalesPersons.CtrlTxtBox.Text = DtSoBulkComboHdr.Rows(DtSoBulkComboHdr.Rows.Count - 1)("PackagingBoxCode")
                        'IsNewComboAdd = True
                        'txtSearchItem_Leave(CtrlSalesPersons.CtrlTxtBox, e)
                        'IsNewComboAdd = False
                    End If
                    'If vRowIndex = combosrNo Then
                    '    '---Record was not added to scanGrid need to delete from combo table as well 
                    '    DeleteBulkCombo(combosrNo)
                    'End If
                End If
                If IsApplyPromotion = True Then
                    RemoveApplyPromotionNew(dsScan, dsPackagingVar)

                End If
                RefreshLoadSOData()
                LoadRemarks(objBulkOrderCombo.DtSoBulkRemarks, False)
                CalculateSalesOrderSummory(dsScan)


            End If
        Catch ex As Exception
            LogException(ex)
            IsNewComboAdd = False
            MsgBox(ex.Message)
        End Try

    End Sub
    Private Function AddComoInScanItemInSO(ByVal drItemsRow As DataRow) As Boolean
        Dim findkeyTax(4) As Object
        Dim dtTaxCalc As DataTable
        Dim drAddItem As DataRow
        Dim drAddItemPackaging As DataRow

        Dim vTotalNetAmt As Double = 0.0
        Dim vIncTaxAmt As Double = 0.0
        Dim vExclTaxAmt As Double = 0.0
        Dim vGetArtilcePrice As Double = 0.0
        Dim prevQty As Integer = 0
        Dim ReservedQtyAllowed As Boolean
        Dim vArticleCode As String = ""
        Try

            drAddItem = _dsScan.Tables("ItemScanDetails").NewRow

            drAddItem("SrNo") = vRowIndex
            drAddItem("BillLineNo") = vRowIndex
            drAddItem("PackagingIndex") = vPackagingIndex
            drAddItem("DeliveryIndex") = vDeliveryIndex
            drAddItem("IsImageReq") = 1
            drAddItem("ArticleType") = "Combo"
            'drAddItem("EAN") = drItemsRow.Item("EAN")
            drAddItem("DeliverySiteCode") = DeliverySiteCode
            drAddItem("Discription") = drItemsRow.Item("PackagingBoxPrintName")
            'drAddItem("BatchBarcode") = drItemsRow.Item("BatchBarcode")
            drAddItem("IsHeader") = True
            drAddItem("IsCombo") = True
            drAddItem("PackagingMaterial") = ""
            drAddItem("CLPDiscount") = 0
            drAddItem("TotalTaxAmt") = 0
            drAddItem("IncTaxAmt") = 0
            drAddItem("ExclTaxAmt") = 0
            drAddItem("FirstLevel") = ""
            drAddItem("TopLevel") = ""
            drAddItem("LineDiscount") = 0
            drAddItem("TotalDiscPercentage") = 0
            '$$ Added by ketan SO GST CHANGES 
            If lblArticleCombo1.Rows.Count > 0 Then
                drAddItem("TaxInPer") = lblArticleCombo1.Rows(0)("Tax")
                drAddItem("TaxPer") = lblArticleCombo1.Rows(0)("Tax") '' added by ketan PC GST UI chnages 
            Else
                drAddItem("TaxInPer") = 0
                drAddItem("TaxPer") = 0 '' added by ketan PC GST UI chnages 
            End If
            drAddItem("Quantity") = 1
            drAddItem("PickUpQty") = 0
            drAddItem("DeliveredQty") = 0
            'drAddItem("Delivered_Qty") = 0
            drAddItem("PckgSize") = 0
            drAddItem("PckgQty") = 0
            drAddItem("IsClp") = True
            drAddItem("IsNew") = True
            drAddItem("Status") = True
            Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + drItemsRow.Item("PackagingBoxPrintName") + "' ")
            If resultCombo.Length > 0 Then
                vArticleCode = resultCombo(0)("KeyCode")
                drAddItem("ArticleCode") = vArticleCode
            Else
                drAddItem("ArticleCode") = ""
            End If
            drAddItem("Discount") = 0
            drAddItem("IsStatus") = "Inserted"

            drAddItem("UOM") = "NOS"

            drAddItem("RowIndex") = vRowIndex
            drAddItem("SellingPrice") = lblArticleCombo1.Rows(0)("GrossAmount") '##
            drAddItem("NetAmount") = lblArticleCombo1.Rows(0)("NetAmount") '##
            drAddItem("GrossAmt") = lblArticleCombo1.Rows(0)("GrossAmount") '##
            drAddItem("ExclTaxAmt") = Math.Round(lblArticleCombo1.Rows(0)("GrossAmount") * (lblArticleCombo1.Rows(0)("Tax") / 100), 2) 'vipin
            drAddItem("TotalTaxAmt") = Math.Round(lblArticleCombo1.Rows(0)("GrossAmount") * (lblArticleCombo1.Rows(0)("Tax") / 100), 2) 'vipin
            _dsScan.Tables("ItemScanDetails").Rows.InsertAt(drAddItem, 0)




            _dsScan.AcceptChanges()



            ''''Add in package variation



            drAddItemPackaging = _dsPackagingVar.Tables("PackagingMaterial").NewRow
            drAddItemPackaging("Quantity") = 1
            drAddItemPackaging("PickUpQty") = 0





            drAddItemPackaging("SrNo") = vRowIndex
            drAddItemPackaging("BillLineNo") = vRowIndex
            drAddItemPackaging("pkglineno") = vPackagingIndex
            drAddItemPackaging("DeliveryIndex") = vDeliveryIndex
            drAddItemPackaging("ArticleType") = "Combo"
            ' drAddItemPackaging("EAN") = drItemsRow.Item("EAN")
            drAddItemPackaging("DeliverySiteCode") = DeliverySiteCode
            drAddItemPackaging("Discription") = drItemsRow.Item("PackagingBoxPrintName")

            drAddItemPackaging("IsStatus") = "Inserted"
            drAddItemPackaging("IsHeader") = True
            drAddItemPackaging("TotalTaxAmount") = 0
            drAddItemPackaging("IncTaxAmt") = 0
            drAddItemPackaging("IsCombo") = True
            drAddItemPackaging("ExclTaxAmt") = 0
            drAddItemPackaging("FirstLevel") = ""
            drAddItemPackaging("TopLevel") = ""
            drAddItemPackaging("CLPDiscount") = 0

            drAddItemPackaging("DeliveredQty") = 0
            'drAddItemPackaging("Delivered_Qty") = 0

            drAddItemPackaging("LineDiscount") = 0
            drAddItemPackaging("TotalDiscPercentage") = 0
            '$$ Added by ketan SO GST CHANGES 
            If lblArticleCombo1.Rows.Count > 0 Then
                drAddItemPackaging("TaxInPer") = lblArticleCombo1.Rows(0)("Tax")
                drAddItemPackaging("TaxPer") = lblArticleCombo1.Rows(0)("Tax") '' added by ketan pC Gst uI changes
            Else
                drAddItemPackaging("TaxInPer") = 0
                drAddItemPackaging("TaxPer") = 0 '' added by ketan pC Gst uI changes
            End If
            ' drAddItemPackaging("TaxInPer") = 0
            drAddItemPackaging("Discount") = 0

            drAddItemPackaging("PckgSize") = 0
            drAddItemPackaging("PckgQty") = 0

            drAddItemPackaging("IsNew") = True
            drAddItemPackaging("Status") = True

            ' drAddItemPackaging("NetAmount") = drItemsRow.Item("NetAmount").ToString()
            'drAddItem("ExpDelDate") = CtrlSalesInfo1.CtrlDtExpDelDate.Value

            drAddItemPackaging("IsCLP") = True

            drAddItemPackaging("ArticleCode") = vArticleCode
            drAddItemPackaging("PackageBaseUOM") = "NOS"
            drAddItemPackaging("UnitofMeasure") = "NOS"

            drAddItemPackaging("RowIndex") = vRowIndex
            _dsPackagingVar.Tables("PackagingMaterial").Rows.InsertAt(drAddItemPackaging, 0)

            drAddItemPackaging("SellingPrice") = lblArticleCombo1.Rows(0)("GrossAmount") '##
            drAddItemPackaging("NetAmount") = lblArticleCombo1.Rows(0)("NetAmount") '##
            drAddItemPackaging("GrossAmount") = lblArticleCombo1.Rows(0)("GrossAmount") '##
            drAddItemPackaging("GrossAmt") = lblArticleCombo1.Rows(0)("GrossAmount") '##
            drAddItemPackaging("ExclTaxAmt") = Math.Round(lblArticleCombo1.Rows(0)("GrossAmount") * (lblArticleCombo1.Rows(0)("Tax") / 100), 2) 'vipin
            drAddItemPackaging("TotalTaxAmount") = Math.Round(lblArticleCombo1.Rows(0)("GrossAmount") * (lblArticleCombo1.Rows(0)("Tax") / 100), 2) 'vipin
            _dsPackagingVar.AcceptChanges()

            vRowIndex = vRowIndex + 1
            vPackagingIndex = vPackagingIndex + 1
            vDeliveryIndex = vDeliveryIndex + 1
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try

        Return True
    End Function
    Dim SrNoForCombo As String
    Private Sub grdSOItems_DoubleClick(sender As Object, e As EventArgs) Handles grdSOItems.DoubleClick
        Try
           
            If grdSOItems.Row = -2 Then Exit Sub
            If grdSOItems.Item(grdSOItems.Row, "IsHeader") = True Then
                If grdSOItems.Cols(grdSOItems.Col).Name = "DISCRIPTION" Or grdSOItems.Cols(grdSOItems.Col).Name = "ArticleCode" Then

                    If grdSOItems.Item(grdSOItems.Row, "ArticleType") = "Single" Then
                        Dim SrNo As String = grdSOItems.Item(grdSOItems.Row, "rowindex")
                        Dim displaySrNo As String = grdSOItems.Item(grdSOItems.Row, "SrNo")
                        Dim objBulkOrderCombo As New frmPCBulkOrderCombo
                        objBulkOrderCombo.CardNo = CustomerNo 'vipin PC SO Merge 03-05-2018
                        objBulkOrderCombo.ArticleCode = grdSOItems.Item(grdSOItems.Row, "ArticleCode")
                        Dim result As DataRow() = DtSoBulkRemarks.Select("ArticleCode='" + grdSOItems.Item(grdSOItems.Row, "ArticleCode").ToString() + "'")
                        If result.Length = 0 Then
                            objBulkOrderCombo.remark = ""
                        Else
                            objBulkOrderCombo.remark = result(0)("remark")
                        End If
                        objBulkOrderCombo.IsEdit = True
                        objBulkOrderCombo.DtSoBulkRemarks = DtSoBulkRemarks
                        objBulkOrderCombo.IsCombo = False
                        objBulkOrderCombo.SalesOrderNo = CtrlTxtOrderNo.Text
                        objBulkOrderCombo.ComboSrNo = vRowIndex
                        objBulkOrderCombo.EditedSrNo = SrNo
                        If objBulkOrderCombo.ShowDialog() = Windows.Forms.DialogResult.OK Then
                            LoadRemarks(DtSoBulkRemarks, False)
                        End If
                    Else
                        If DtSoBulkComboHdr.Rows.Count > 0 Then
                            Dim SrNo As String = grdSOItems.Item(grdSOItems.Row, "rowindex")
                            Dim displaySrNo As String = grdSOItems.Item(grdSOItems.Row, "SrNo")
                            Dim objBulkOrderCombo As New frmPCBulkOrderCombo
                            objBulkOrderCombo.CardNo = CustomerNo 'vipin PC SO Merge 03-05-2018
                            objBulkOrderCombo.IsCombo = True
                            objBulkOrderCombo.DtSoBulkComboHdr = DtSoBulkComboHdr.Copy()
                            If clsDefaultConfiguration.IsNewSalesOrder Then   '' added on 08/01/17

                                Dim SoComboQty As Integer = grdSOItems.Item(grdSOItems.Row, "Quantity")
                                Dim SoComboPrice As Decimal = grdSOItems.Item(grdSOItems.Row, "SellingPrice")
                                Dim SoComboDiscount As Decimal = grdSOItems.Item(grdSOItems.Row, "DIscount")
                                Dim dsCombo As DataSet
                                dsCombo = objComn.FunGetComboDetailsForSoEdit(CtrlTxtOrderNo.Text.Trim.ToString, SoComboQty, SoComboPrice, SoComboDiscount, SrNo)
                                If DtSoBulkComboDtl.Columns.Contains("Discount") <> True Then '##
                                    DtSoBulkComboDtl.Columns.Add("Discount", GetType(String))
                                End If
                                If DtSoBulkComboDtl.Columns.Contains("Tax") <> True Then
                                    DtSoBulkComboDtl.Columns.Add("Tax", GetType(String))
                                End If

                                If DtSoBulkComboDtl.Columns.Contains("TaxAmount") <> True Then
                                    DtSoBulkComboDtl.Columns.Add("TaxAmount", GetType(String))
                                End If


                                Dim drResult As DataRow()
                                For Each dr As DataRow In dsCombo.Tables(0).Select
                                    drResult = DtSoBulkComboDtl.Select("ArticleCode= '" + dr("ArticleCode").ToString + "'and ComboSrno = '" + SrNo + "'")
                                    If drResult.Length > 0 Then
                                        drResult(0)("Discount") = dr("Discount")
                                        If drResult(0)("Qty") <> dr("Qty") Then
                                            drResult(0)("Discount") = Math.Round(((drResult(0)("Qty") * drResult(0)("Price")) / (SoComboQty * SoComboPrice)) * SoComboDiscount, 2)
                                        End If
                                        ' drResult(0)("Discount") = dr("Disc")   '## disc
                                        drResult(0)("Tax") = dr("Tax")
                                        '        drResult(0)("TaxAmount") = dr("TaxValue")
                                    End If
                                    DtSoBulkComboDtl.AcceptChanges()
                                Next

                                Dim DrCombo As DataRow()
                                For Each dr As DataRow In DtSoBulkComboDtl.Select
                                    DrCombo = dsCombo.Tables(0).Select("ArticleCode= '" + dr("ArticleCode").ToString + "'")
                                    If DrCombo.Length = 0 Then
                                        '     dr("Discount") = dr("Price") * dr("Qty")
                                        dr("Discount") = Math.Round(((dr("Price") * dr("Qty")) / (SoComboPrice * SoComboQty)) * SoComboDiscount, 2)
                                    End If
                                    DtSoBulkComboDtl.AcceptChanges()
                                Next
                                objBulkOrderCombo.ArticleComboDtl = dsScan.Tables("ItemScanDetails").Select("SrNo ='" & SrNo & "'").CopyToDataTable '##

                                '   If CtrllblDiscAmt.Text = "0.00" Or CtrllblDiscAmt.Text = "0" Then
                                objBulkOrderCombo.lblNetValue.Text = grdSOItems.Item(grdSOItems.Row, "NetAmount")
                                objBulkOrderCombo.lblGross.Text = grdSOItems.Item(grdSOItems.Row, "SellingPrice")
                                objBulkOrderCombo.txtTaxAmount.Text = grdSOItems.Item(grdSOItems.Row, "TotalTaxAmt")
                                'Else
                                'For i = 1 To grdSOItems.Rows.Count - 1
                                '    If grdSOItems.Rows(i)("ArticleType") = "Combo" Then
                                '        objBulkOrderCombo.lblNetValue.Text = grdSOItems.Rows(i)("NetAmount").ToString
                                '        objBulkOrderCombo.lblGross.Text = grdSOItems.Rows(i)("SellingPrice").ToString
                                '    End If
                                'Next
                                ' objBulkOrderCombo.lblNetValue.Text = CtrllblNetAmt.Text
                                ' End If

                                'If dsCombo.Tables(0).Rows.Count > 0 Then
                                '    objBulkOrderCombo.txtTaxAmount.Text = CDbl(dsCombo.Tables(0).Rows(0)("TaxValue"))
                                'End If
                                'objBulkOrderCombo.lblNetValue.Text = lblArticleCombo.Rows(0)("NetAmount") - dsScan.Tables("ItemScanDetails").Rows(0)("Discount").ToString

                            End If

                            If IsNothing(grdSOItems.Item(grdSOItems.Row, "Discount")) Or IsDBNull(grdSOItems.Item(grdSOItems.Row, "Discount")) Then  '##
                                dsScan.Tables("ItemScanDetails").Rows(0)("Discount") = 0
                            Else
                                dsScan.Tables("ItemScanDetails").Rows(0)("Discount") = grdSOItems.Item(grdSOItems.Row, "Discount")
                            End If

                            If IsCopied = True Then  ''$$ added on 18/08/17
                                objBulkOrderCombo.DtSoBulkComboDtl = DtSoBulkComboDtl.Copy()
                            Else
                                objBulkOrderCombo.DtSoBulkComboDtl = DtSoBulkComboDtl.Select("ComboSrNo ='" & SrNo & "'").CopyToDataTable '##
                            End If
                            'objBulkOrderCombo.DtSoBulkComboDtl = DtSoBulkComboDtl.Select("ComboSrNo ='" & SrNo & "'").CopyToDataTable '##
                            objBulkOrderCombo.DtSoBulkRemarks = DtSoBulkRemarks.Copy()
                            objBulkOrderCombo.SalesOrderNo = CtrlTxtOrderNo.Text
                            'objBulkOrderCombo.BulkComboMstId = BulkComboMstId
                            objBulkOrderCombo.IsEdit = True
                            objBulkOrderCombo.IsChildComboEdit = True  '' $$ added by nikhil on 24082017
                            objBulkOrderCombo.ComboSrNo = vRowIndex
                            objBulkOrderCombo.EditedSrNo = SrNo
                            objBulkOrderCombo.displaySrNo = displaySrNo
                            objBulkOrderCombo.dtPackagingcopiedfrom = dtPackagingcopiedfrom
                            'objBulkOrderCombo.BulkComboMode = enumBulkComboMode.AddDoubleClick
                            'objBulkOrderCombo.CboPakagingBox.Enabled = False
                            'objBulkOrderCombo.btnPrint.Enabled = False
                            IsComboDoubleClicked = True    '## vipin 
                            If objBulkOrderCombo.ShowDialog() = Windows.Forms.DialogResult.OK Then
                                DtSoBulkComboHdr = objBulkOrderCombo.DtSoBulkComboHdr

                                '' added by ketan after discount. change the combo Qty then issue with dis Amount 
                                ''SO called Remove apply promo fun .Tested by Mr. Dilip Kumar
                                If QtyChange = True And IsComboDoubleClicked = True Then
                                    SrNoForCombo = SrNo
                                    RemoveApplyPromotionNew(dsScan, dsPackagingVar)
                                End If

                                Dim Combo1 As New DataTable
                                If DtSoBulkComboDtl.Select("ComboSrNo <>'" + SrNo.ToString() + "'").Length > 0 Then
                                    Combo1 = DtSoBulkComboDtl.Select("ComboSrNo <>'" + SrNo.ToString() + "'").CopyToDataTable   ''' $$ added by nikhil 
                                    If Not Combo1 Is Nothing AndAlso Combo1.Rows.Count > 0 Then
                                        For Each dr As DataRow In Combo1.Rows
                                            Dim row As Object() = dr.ItemArray
                                            objBulkOrderCombo.DtSoBulkComboDtl.Rows.Add(row)
                                        Next
                                    End If
                                End If
                                DtSoBulkComboDtl = objBulkOrderCombo.DtSoBulkComboDtl
                                DtSoBulkRemarks = objBulkOrderCombo.DtSoBulkRemarks
                                '---------For Updating Status STR
                                For Each drCheckStatus As DataRow In DtSoBulkComboDtl.Rows
                                    Dim dr() As DataRow = dtSTR.Select("ArticleCode='" & drCheckStatus("Articlecode") & "' AND Discription ='" & drCheckStatus("ArticleDescription") & "' AND EAN ='" & drCheckStatus("EAN") & "' and Iscombo=true")
                                    If dr.Length > 0 Then
                                        For Each drr As DataRow In dr
                                            drr("Status") = drCheckStatus("Status")
                                        Next
                                    End If
                                Next
                                DtSOStr = dtSTR.Copy()
                                '-------------
                                Dim result As DataRow() = dsScan.Tables("ItemScanDetails").Select("SrNo='" + SrNo.ToString() + "'")
                                Dim resultPkg As DataRow() = dsPackagingVar.Tables("PackagingMaterial").Select("BillLineNo='" + SrNo.ToString() + "'")
                                Dim resultDelviry As DataRow() = _dsPackagingDelivery.Tables("PackagingDelivery").Select("BillLineNo='" + SrNo.ToString() + "'")
                                Dim resultHdr As DataRow() = DtSoBulkComboHdr.Select("ComboSrNo='" + SrNo.ToString() + "'")
                                If result.Length > 0 AndAlso resultHdr.Length > 0 Then
                                    result(0)("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                End If

                                If clsDefaultConfiguration.IsNewSalesOrder Then  '##  vipin
                                    If lblArticleCombo1.Rows.Count > 0 Then  ''''$$ added by nikhil
                                        result(0)("SellingPrice") = lblArticleCombo1.Rows(0)("GrossAmount")
                                        Dim CmbTax As String = ((result(0)("SellingPrice") * result(0)("Quantity")) - result(0)("Discount")) * (CDbl(lblArticleCombo1.Rows(0)("Tax") / 100))
                                        If QtyChange = True And IsComboDoubleClicked = True Then '##
                                            result(0)("Discount") = 0
                                            result(0)("NetAmount") = ((result(0)("SellingPrice") * result(0)("Quantity")) - result(0)("Discount")) + CmbTax
                                            result(0)("TotalTaxAmt") = CmbTax
                                            result(0)("ExclTaxAmt") = result(0)("TotalTaxAmt")
                                            result(0)("TaxInPer") = lblArticleCombo1.Rows(0)("Tax") 'added by vipin
                                            result(0)("TaxPer") = lblArticleCombo1.Rows(0)("Tax") ' added by ketan PC GSt UI Chnages

                                        Else
                                            result(0)("TotalTaxAmt") = CmbTax
                                            result(0)("ExclTaxAmt") = result(0)("TotalTaxAmt")
                                            result(0)("NetAmount") = ((result(0)("SellingPrice") * result(0)("Quantity")) - result(0)("Discount")) + CmbTax
                                            result(0)("TaxInPer") = lblArticleCombo1.Rows(0)("Tax") 'added by vipin
                                            result(0)("TaxPer") = lblArticleCombo1.Rows(0)("Tax") ' added by ketan PC GSt UI Chnages

                                        End If
                                    Else
                                        result(0)("NetAmount") = ((result(0)("SellingPrice") * result(0)("Quantity")) - result(0)("Discount")) + result(0)("TotalTaxAmt")
                                    End If
                                    'result(0)("NetAmount") = (result(0)("Quantity") * result(0)("SellingPrice")) - result(0)("Discount")  '##
                                    ''result(0)("ArticleLevelTax") = lblArticleCombo.Rows(0)("TaxAmount")

                                    ' result(0)("ArticleLevelTax") = lblArticleCombo.Rows(0)("TaxAmount")
                                    'result(0)("Discount") = 0
                                    'CtrllblGrossAmt.Text = lblArticleCombo1.Rows(0)("GrossAmount")
                                    'CtrllblNetAmt.Text = lblArticleCombo1.Rows(0)("NetAmount")
                                    'CtrllblDiscAmt.Text = "0"
                                    'CtrllblDiscPerc.Text = "0" & "%"
                                End If


                                'If resultPkg.Length > 0 AndAlso resultHdr.Length > 0 Then
                                '    ' resultPkg(0)("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                '    For Each drr As DataRow In resultPkg
                                '        drr("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                '    Next

                                'End If
                                If resultPkg.Length > 0 AndAlso resultHdr.Length > 0 Then '##
                                    ' resultPkg(0)("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                    For Each drr As DataRow In resultPkg
                                        drr("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                        If drr("ArticleType") = "Combo" Then
                                            drr("SellingPrice") = lblArticleCombo1.Rows(0)("GrossAmount") '##
                                            Dim CmbTax As String = ((drr("SellingPrice") * drr("Quantity")) - drr("LineDiscount")) * (CDbl(lblArticleCombo1.Rows(0)("Tax") / 100))
                                            If QtyChange = True And IsComboDoubleClicked = True Then '##  $$  Added by nik
                                                drr("LineDiscount") = 0
                                                drr("NetAmount") = ((drr("SellingPrice") * drr("Quantity")) - drr("LineDiscount")) + CmbTax
                                                drr("TotalTaxAmount") = CmbTax
                                                drr("ExclTaxAmt") = drr("TotalTaxAmount")
                                                drr("GrossAmount") = drr("SellingPrice") * drr("Quantity") 'vipin
                                                drr("TaxInPer") = lblArticleCombo1.Rows(0)("Tax")
                                                drr("TaxPer") = lblArticleCombo1.Rows(0)("Tax")
                                            Else
                                                drr("TotalTaxAmount") = CmbTax
                                                drr("ExclTaxAmt") = drr("TotalTaxAmount")
                                                drr("NetAmount") = ((drr("Quantity") * drr("SellingPrice")) - drr("LineDiscount")) + CmbTax  ''  $$  Added by nik
                                                drr("GrossAmount") = drr("SellingPrice") * drr("Quantity") 'vipin
                                                drr("TaxInPer") = lblArticleCombo1.Rows(0)("Tax")
                                                drr("TaxPer") = lblArticleCombo1.Rows(0)("Tax")
                                            End If
                                        Else
                                            drr("NetAmount") = ((drr("Quantity") * drr("SellingPrice")) - drr("LineDiscount")) + drr("TotalTaxAmount")
                                        End If
                                    Next
                                End If

                                If resultDelviry.Length > 0 AndAlso resultHdr.Length > 0 Then
                                    ' resultDelviry(0)("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                    For Each drr As DataRow In resultDelviry
                                        drr("Discription") = resultHdr(0)("PackagingBoxPrintName")
                                    Next
                                End If
                                '-------Reset pckgsize to 0 when print name changes
                                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                                    Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + resultHdr(0)("PackagingBoxPrintName") + "' and isPackagingMandatory=1")
                                    If resultCombo.Length > 0 Then
                                        result(0)("Pckgsize") = 0.0
                                        If resultPkg.Length > 0 Then
                                            'resultPkg(0)("Pckgsize") = 0.0
                                            For Each drr As DataRow In resultPkg
                                                drr("Pckgsize") = 0.0
                                            Next
                                        End If
                                        If resultDelviry.Length > 0 Then
                                            'resultDelviry(0)("Pckgsize") = 0.0
                                            For Each drr As DataRow In resultDelviry
                                                drr("Pckgsize") = 0.0
                                            Next
                                        End If
                                    End If
                                End If

                                If QtyChange = True And IsComboDoubleClicked = True Then '##
                                    'For Each Disc1 In dsScan.Tables(0).Rows
                                    '    Disc1("Discount") = 0
                                    'Next
                                    For Each Disc2 In dsPackagingVar.Tables(0).Rows
                                        Disc2("LineDiscount") = 0
                                        '    Disc2("DiscountAmount") = 0
                                    Next
                                End If

                                dsScan.AcceptChanges()
                                dsPackagingVar.AcceptChanges()
                                _dsPackagingDelivery.AcceptChanges()
                                RefreshLoadSOData()
                                'GridSetting()
                                'AddButtonControlInGrid(1)
                                CalculateSalesOrderSummory(dsScan) 'added by vipin
                                LoadRemarks(DtSoBulkRemarks, False)
                            End If

                        End If
                    End If
                End If
            End If

            'Dim TotalAdvmount As Decimal = 0 '##   '' $$ commented by nikhil
            'Dim cint1 As Integer = 1
            'For Each de11 In dsScan.Tables(0).Rows
            '    If dgDeliveryLocation.Rows.Count > cint1 Then
            '        TotalAdvmount = TotalAdvmount + (CDbl(grdSOItems.Rows(cint1)("SellingPrice")) - (CDbl(grdSOItems.Rows(cint1)("Discount"))) / grdSOItems.Rows(cint1)("Quantity")) * CDbl(dgDeliveryLocation.Rows(cint1)("PickUpQty"))
            '    End If

            '    cint1 = cint1 + 1
            'Next
            'CtrllblMinAdv.Text = FormatNumber(TotalAdvmount.ToString.Trim, 0) '##

        Catch ex As Exception
            LogException(ex)
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Function DeleteBulkCombo(combosrNo As Integer) As Boolean
        DeleteBulkCombo = False
        Try
            Dim BulkComboMstId As Int64 = 0
            If DtSoBulkComboHdr.Rows.Count > 0 Then
                Dim drHdr() = DtSoBulkComboHdr.Select("ComboSrNo=" & combosrNo)
                If drHdr.Count > 0 Then
                    'BulkComboMstId = drHdr(0)("BulkComboMstId")
                    For Each row As DataRow In drHdr
                        DtSoBulkComboHdr.Rows.Remove(row)
                    Next
                End If
                Dim drDtl() = DtSoBulkComboDtl.Select("ComboSrNo=" & combosrNo)
                If drDtl.Count > 0 Then
                    For Each row As DataRow In drDtl
                        DtSoBulkComboDtl.Rows.Remove(row)
                    Next
                End If
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function

    Private Sub cmdGenerateSTR_Click(sender As Object, e As EventArgs) Handles cmdGenerateSTR.Click
        Try
            'Added by Prasad
            IsStrGenerateApplicable = True
            If Not isValidData() Then
                Exit Sub
            End If
            dtStrResult = Nothing
            If dsScan.Tables(0).Rows.Count = 0 Then
                ShowMessage(getValueByKey("SO027"), "SO027 - " & getValueByKey("CLAE04"))
                Exit Sub
            End If
            '            '---   SO Edit -       when user click Generate STR 
            '-        Case 1 -Generate STR is not applicable if user put some pick up quantity.
            '-	 case 2- user edit SO then asked for save & Generate STR  YES/No and in case of Yes SO saved and it generate STR .
            '-	 case 3– user has not edit anything then directly generate STR without saving data .

            'Dim dr() = dsScan.Tables("ItemScanDetails").Select("PickUpQty > 0")
            'If dr.Length > 0 Then
            '    MessageBox.Show("You cannot generate STR as few items in this sales order have been received by customer.", getValueByKey("CLAE04"))
            'Else
            If IsStrGenerateApplicable Then
                If MessageBox.Show("This sales order is not saved. Click OK to save sales order and generate the STR.", getValueByKey("CLAE04"), MessageBoxButtons.OKCancel) = Windows.Forms.DialogResult.OK Then
                    IsSTRGenerate = True
                    If Not IsBookingEdit = True Then
                        If CtrllblBaltoPay.Text = 0 Then
                            BtnSaveSalesOrder_Click(sender, e, True)
                        Else
                            BtnAcceptPayment_Click(Nothing, Nothing)
                        End If

                    Else
                        BtnSaveSalesOrder_Click(sender, e, True)
                    End If
                    If IsSOSaved Then
                        'ShowMessage("STR Generated Successfully", getValueByKey("CLAE04"))
                        IsSOSaved = False
                        IsStrGenerateApplicable = False
                    End If

                End If
            Else
                'Dim objsales As New clsSalesOrderPC
                'objsales.GenerateStrDataNew(clsAdmin.SiteCode, vSalesNo)
                'ShowMessage("STR Generated Successfully", getValueByKey("CLAE04"))
                IsSTRGenerate = True
                If Not IsBookingEdit = True Then
                    If CtrllblBaltoPay.Text = 0 Then
                        BtnSaveSalesOrder_Click(sender, e, True)
                    Else
                        BtnAcceptPayment_Click(Nothing, Nothing)
                    End If
                Else
                    BtnSaveSalesOrder_Click(sender, e, True)
                End If
                If IsSOSaved Then
                    'ShowMessage("STR Generated Successfully", getValueByKey("CLAE04"))
                    IsSOSaved = False
                    IsStrGenerateApplicable = False
                End If
            End If
            Dim strNew As String = ""
            Dim strClosed As String = ""
            If dtStrResult IsNot Nothing Then

                If dtStrResult.Tables(0).Rows.Count > 0 Then
                    For Each drs As DataRow In dtStrResult.Tables(0).Rows
                        If drs("documentstatus").ToString().ToUpper() = "CLOSE" Then
                            strClosed = strClosed & drs("closeddocument").ToString() & ","
                        Else
                            strNew = strNew & drs("closeddocument").ToString() & ","
                        End If
                    Next
                    If strClosed <> "" Then
                        strClosed = strClosed.Substring(0, strClosed.Length - 1)
                    End If
                    If strNew <> "" Then
                        strNew = strNew.Substring(0, strNew.Length - 1)
                    End If
                    Dim MesStr As String
                    If strClosed <> "" AndAlso vSTRList <> "" Then
                        MesStr = MesStr & "Closed STRs :" & vbCrLf & vSTRList & vbCrLf
                    End If
                    If strNew <> "" Then
                        MesStr = MesStr & " New STRs Generated : " & vbCrLf & strNew
                    End If
                    If MesStr <> "" Then
                        ShowBigMessagewithOK(MesStr, getValueByKey("CLAE04"))
                    End If
                End If

            End If
            'End If
            vSTRList = ""
            IsSTRGenerate = False
        Catch ex As Exception
            LogException(ex)
            MsgBox(ex.Message)

        End Try
    End Sub

    ''' <summary>
    '''  IF IsNewComboAdd true add new row IF IsNewComboAdd false then check is this item is already added in grid if No then Add new row ELSE then check is this items in combo if not Qty + else count no of comboes in grid if items rows are more than combo count then Qty++ else combo Count = 1  then Qty ++ else add New Row 
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>   IF IsNewComboAdd true add new row IF IsNewComboAdd false then check is this item is already added in grid if No then Add new row ELSE then check is this items in combo if not Qty + else count no of comboes in grid if items rows are more than combo count then Qty++ else combo Count = 1  then Qty ++ else add New Row </remarks>
Private Function fnAnalyzeItem(ByVal drItemsRow As DataRow) As DataRow()
        Try
            Dim drItemExists() As DataRow
            If IsNewComboAdd Then
                fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='A00 df sfs000NOT'")
            Else
                If IsDBNull(drItemsRow.Item("BatchBarcode")) = False Then
                    drItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' And BatchBarcode = '" & drItemsRow.Item("BatchBarcode") & "'and ArticleType='Single'")
                Else
                    'drItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' And BatchBarcode IS NULL")
                    drItemExists = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' And BatchBarcode IS NULL And IsStatus<>'Deleted' and ArticleType='Single'")
                End If
                If drItemExists.Count = 0 Then
                    fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='A00 df sfs000NOT'")
                Else
                    Dim comboCount = DtSoBulkComboHdr.Select("PackagingBoxCode='" & drItemsRow.Item("ArticleCode") & "'").Count
                    Dim TotalItemExist = drItemExists.Count
                    If TotalItemExist > comboCount Then
                        Dim packazingBoxRowNos As String = String.Empty
                        '---- Get The EMPTY PACKAZING BOX row for Qty ++
                        For Each drCombo As DataRow In DtSoBulkComboHdr.Select("PackagingBoxCode='" & drItemsRow.Item("ArticleCode") & "'")
                            packazingBoxRowNos &= drCombo("ComboSrNo") & ","
                        Next
                        If Not packazingBoxRowNos = String.Empty Then
                            packazingBoxRowNos = packazingBoxRowNos.Substring(0, packazingBoxRowNos.Length - 1)
                        End If
                        If IsDBNull(drItemsRow.Item("BatchBarcode")) = False Then

                            fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' and ArticleType='Single' And BatchBarcode = '" & drItemsRow.Item("BatchBarcode") & "'" & IIf(packazingBoxRowNos = String.Empty, "", "AND rowIndex Not In(" & packazingBoxRowNos & ")"))
                        Else
                            fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' and ArticleType='Single' And BatchBarcode IS NULL " & IIf(packazingBoxRowNos = String.Empty, "", "AND rowIndex Not In(" & packazingBoxRowNos & ")"))
                        End If
                    ElseIf comboCount = 1 Then
                        '---- Get The row for Qty ++
                        If IsDBNull(drItemsRow.Item("BatchBarcode")) = False Then
                            fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "' and ArticleType='Single' And BatchBarcode = '" & drItemsRow.Item("BatchBarcode") & "'")
                        Else
                            fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='" & drItemsRow.Item("EAN") & "'  and ArticleType='Single'And BatchBarcode IS NULL")
                        End If
                    Else
                        fnAnalyzeItem = dsScan.Tables("ItemScanDetails").Select("EAN='A00 df sfs000NOT'")
                    End If
                End If
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function

    Private Sub EnableDiableTenderIcons()
        '--- Added by Mahesh for disable credit sale if tender not assign
        Dim DtTender As DataTable = GetTenderInfo(clsAdmin.SiteCode)
        '--- Credit sale 
        Dim dr() = DtTender.Select("TenderType='" & "Credit" & "'")
        If dr IsNot Nothing AndAlso dr.Count > 0 Then
            IsTenderCredit = True
        End If
        '----Cash
        Dim dt() = DtTender.Select("TenderType='" & "Cash" & "'")
        If Not (dt IsNot Nothing AndAlso dt.Count > 0) Then
            CtrlRbn1.DbtnPayCash.Enabled = False
        End If
        '----Cheque
        Dim dq() = DtTender.Select("TenderType='" & "Cheque" & "'")
        If Not (dq IsNot Nothing AndAlso dq.Count > 0) Then
            CtrlRbn1.DbtnpayCheque.Enabled = False
        End If
        '----CreditCard
        Dim dw() = DtTender.Select("TenderType='" & "CreditCard" & "'")
        If Not (dw IsNot Nothing AndAlso dw.Count > 0) Then
            CtrlRbn1.DbtnPayCard.Enabled = False
        End If
    End Sub

    Private Sub dgDeliveryLocation_Paint(sender As Object, e As PaintEventArgs) Handles dgDeliveryLocation.Paint
        For Each hosted As HostedControl In controlList
            hosted.UpdatePosition()
        Next
    End Sub

    Private Sub dgDeliveryLocation_DoubleClick(sender As Object, e As EventArgs) Handles dgDeliveryLocation.DoubleClick

    End Sub

    Private Sub dgDeliveryLocation_AfterEdit(sender As Object, e As RowColEventArgs) Handles dgDeliveryLocation.AfterEdit
        Try
            If dgDeliveryLocation.Row = -1 Then Exit Sub
            Dim CurrentCell As Integer = e.Col
            Dim CurrentRow As Integer = dgDeliveryLocation.Row '-- e.Row
            Dim UpdatePackagingIndex As Integer = IIf(dgDeliveryLocation.Item(CurrentRow, "PackagingIndex") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "PackagingIndex"))
            Dim UpdateDeliveryIndex As Integer = IIf(dgDeliveryLocation.Item(CurrentRow, "DeliveryIndex") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "DeliveryIndex"))
            Dim ISAddressValid As Boolean = False
            If dgDeliveryLocation.Cols(CurrentCell).Name = "Quantity" Then
                Dim isHeader As String = IIf(dgDeliveryLocation.Item(CurrentRow, "IsHeader") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "IsHeader"))
                If isHeader = "False" Then
                    'Dim dtAscii As New DataTable
                    Dim baseQty As Decimal
                    Dim currentQty As Decimal
                    Dim headerQty As Decimal
                    Dim resultPackQuntity As DataRow() = _dsPackagingVar.Tables(0).Select("pkgLineNo='" + UpdatePackagingIndex.ToString() + "' ")
                    If resultPackQuntity.Length > 0 Then
                        baseQty = resultPackQuntity(0)("Quantity")
                    End If
                    currentQty = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "Quantity"))
                    If currentQty > baseQty Then
                        ShowMessage("Order quantity is getting exceeded", "SO009 - " & getValueByKey("CLAE04"))
                        Dim resultPrevQty As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")
                        If resultPrevQty.Length > 0 Then
                            dgDeliveryLocation.Item(CurrentRow, "Quantity") = resultPrevQty(0)("Quantity")
                        Else
                            dgDeliveryLocation.Item(CurrentRow, "Quantity") = 0
                        End If
                        Exit Sub
                    End If
                    '-------Added By Prasad for Checking If Single NOS Has Decimal Validation
                    Dim resultSingleNos As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")

                    Dim drCheckIfSingleNOSSubVariation As New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "pkgLineNo='" & UpdatePackagingIndex.ToString() & "' AND IsCombo=False AND UnitOfMeasure='NOS' AND DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "'", "", DataViewRowState.CurrentRows)
                    If drCheckIfSingleNOSSubVariation.Count > 0 Then

                        Dim OrderQty = currentQty.ToString.Split(".")
                        If OrderQty.Length = 2 Then
                            If OrderQty(1) > 0 Then
                                ShowMessage("Order Qty For Single Where UOM is NOS should not be in decimal", "Information")
                                dgDeliveryLocation.Item(dgDeliveryLocation.Row, "Quantity") = drCheckIfSingleNOSSubVariation(0)("Quantity")
                                If resultSingleNos.Length > 0 Then
                                    resultSingleNos(0)("Quantity") = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, drCheckIfSingleNOSSubVariation(0)("Quantity"))
                                    _dsPackagingDelivery.Tables("PackagingDelivery").AcceptChanges()
                                End If
                                'If drView1.Length > 0 Then
                                '    drView1(0)("Quantity") = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, 1)
                                '    dsPackagingVar.AcceptChanges()
                                'End If
                                Exit Sub
                            End If
                        End If

                    End If

                    '-------Added By Prasad for Checking If Combo Has Decimal Validation
                    Dim resultCombo As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")

                    Dim drCheckIfComboSubVariation As New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "pkgLineNo='" & UpdatePackagingIndex.ToString() & "' AND IsCombo=True AND DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "'", "", DataViewRowState.CurrentRows)
                    If drCheckIfComboSubVariation.Count > 0 Then

                        Dim OrderQty = currentQty.ToString.Split(".")
                        If OrderQty.Length = 2 Then
                            If OrderQty(1) > 0 Then
                                ShowMessage("Order Qty For Combo should not be in decimal", "Information")
                                dgDeliveryLocation.Item(dgDeliveryLocation.Row, "Quantity") = drCheckIfComboSubVariation(0)("Quantity")
                                If resultCombo.Length > 0 Then
                                    resultCombo(0)("Quantity") = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, drCheckIfComboSubVariation(0)("Quantity"))
                                    _dsPackagingDelivery.Tables("PackagingDelivery").AcceptChanges()
                                End If
                                'If drView1.Length > 0 Then
                                '    drView1(0)("Quantity") = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, 1)
                                '    dsPackagingVar.AcceptChanges()
                                'End If
                                Exit Sub
                            End If
                        End If

                    End If

                    ''dtAscii = _dsPackagingDelivery.Tables("PackagingDelivery").Select("PackagingIndex='" & UpdatePackagingIndex.ToString() & "'").CopyToDataTable()
                    Dim resultSum As DataRow() = dsPackagingDelivery.Tables(0).Select("IsHeader = False and pkgLineNo='" + UpdatePackagingIndex.ToString() + "' and DeliveryLineNo <>'" + UpdateDeliveryIndex.ToString() + "'")
                    If resultSum.Length > 0 Then
                        Dim isValidSumObject As Object
                        isValidSumObject = _dsPackagingDelivery.Tables(0).Compute("Sum(Quantity)", "IsHeader = False and pkgLineNo='" + UpdatePackagingIndex.ToString() + "' and DeliveryLineNo <>'" + UpdateDeliveryIndex.ToString() + "'")
                        If currentQty + isValidSumObject > baseQty Then
                            ShowMessage("Order quantity is getting exceeded", "SO009 - " & getValueByKey("CLAE04"))
                            Dim resultPrevQty As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")
                            If resultPrevQty.Length > 0 Then
                                dgDeliveryLocation.Item(CurrentRow, "Quantity") = resultPrevQty(0)("Quantity")
                            Else
                                dgDeliveryLocation.Item(CurrentRow, "Quantity") = 0
                            End If
                            Exit Sub

                        End If
                    End If

                    Dim sumObject As Object
                    sumObject = _dsPackagingDelivery.Tables(0).Compute("Sum(Quantity)", "IsHeader = False and pkgLineNo='" + UpdatePackagingIndex.ToString() + "'")
                    Dim HeaderActQty As Object
                    Dim HEaderDeliverdQty As Object
                    Dim HeaderQtyTemp1 As Integer = 0
                    HeaderActQty = _dsPackagingDelivery.Tables(0).Compute(" Sum(Quantity)", "IsHeader = True and pkgLineNo='" + UpdatePackagingIndex.ToString() + "'")
                    HEaderDeliverdQty = _dsPackagingDelivery.Tables(0).Compute(" Sum(DeliveredQty)", "IsHeader = True and pkgLineNo='" + UpdatePackagingIndex.ToString() + "'")

                    Dim result As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")
                    Dim SumDeliveredQty As Object = _dsPackagingDelivery.Tables("PackagingDelivery").Compute("SUM(DeliveredQty)", "pkgLineNo='" & UpdatePackagingIndex.ToString() & "'")
                    If baseQty - ((currentQty + sumObject) - result(0)("Quantity")) > 0 Then

                        headerQty = baseQty - ((currentQty + sumObject) - result(0)("Quantity"))
                        If HEaderDeliverdQty > HeaderQtyTemp1 Then
                            HeaderQtyTemp1 = HeaderActQty - currentQty
                            HeaderQtyTemp1 = HEaderDeliverdQty
                        End If
                        '----Added By Prasad for If Order Qty for Header is less than Delived qty then it gives error msg as Pending Qty goes negative so.
                        'If headerQty < SumDeliveredQty Then
                        '    ShowMessage("Header Qty can't be Less than Delivered Qty", "Information")
                        '    dgDeliveryLocation.Item(CurrentRow, "Quantity") = result(0)("Quantity")
                        '    Exit Sub
                        'End If
                        If HeaderQtyTemp1 + currentQty + sumObject > baseQty Then
                            ShowMessage("Header Qty can't be Less than Delivered Qty", "Information")
                            dgDeliveryLocation.Item(CurrentRow, "Quantity") = result(0)("Quantity")
                            Exit Sub
                        End If
                        Dim resultpickup As DataRow() = _dsPackagingDelivery.Tables(0).Select("pkgLineNo='" & UpdatePackagingIndex.ToString() & "' AND IsHeader=True")
                        If resultpickup.Length > 0 Then
                            If resultpickup(0)("DeliveredQty") + resultpickup(0)("PickupQty") > headerQty Then
                                resultpickup(0)("PickupQty") = headerQty - resultpickup(0)("DeliveredQty")
                            End If

                        End If
                    Else
                        If result.Length > 0 Then
                            dgDeliveryLocation.Item(CurrentRow, "Quantity") = result(0)("Quantity")
                        End If
                    End If


                    Dim dvEditorderPickupQty As DataView
                    dvEditorderPickupQty = New DataView(_dsPackagingDelivery.Tables("PackagingDelivery"), "pkgLineNo='" & UpdatePackagingIndex.ToString() & "'", "", DataViewRowState.CurrentRows)
                    If dvEditorderPickupQty.Count > 0 Then
                        For Each drView1 As DataRowView In dvEditorderPickupQty
                            If drView1("IsHeader") = "True" Then
                                '-Added By Prasad if Header Qty 0 then update last qty as Header Qty,header qty can't be 0
                                If headerQty = 0 Then
                                    drView1("Quantity") = currentQty
                                Else
                                    drView1("Quantity") = headerQty
                                End If
                                'drView1("Quantity") = headerQty
                                If drView1("PickUpQty") > headerQty Then
                                    drView1("PickUpQty") = headerQty

                                End If
                                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                                    '-----New
                                    If dgDeliveryLocation.Item(CurrentRow, "UOM") = "KGS" Then
                                        Dim pickBaseUom = drView1("PickUpQty") * drView1("PckgSize")
                                        Dim pendingQty = (headerQty - pickBaseUom)
                                        drView1("PendingQty") = pendingQty
                                        drView1("PckgQty") = FormatNumber((pendingQty * 1 / drView1("PckgSize")), 3) & " " & drView1("PackagingType")
                                    End If
                                End If
                              

                            ElseIf drView1("DeliveryLineNo") = UpdateDeliveryIndex.ToString() Then
                                If headerQty = 0 Then
                                    drView1("Quantity") = headerQty
                                Else
                                    drView1("Quantity") = currentQty
                                End If
                                'drView1("Quantity") = currentQty
                                If drView1("PickUpQty") > currentQty Then
                                    drView1("PickUpQty") = currentQty

                                End If

                                '--------New
                                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                                    If dgDeliveryLocation.Item(CurrentRow, "UOM") = "KGS" Then
                                        Dim pickBaseUom = drView1("PickUpQty") * drView1("PckgSize")
                                        Dim pendingQty = (currentQty - pickBaseUom)
                                        drView1("PendingQty") = pendingQty
                                        drView1("PckgQty") = FormatNumber((pendingQty * 1 / drView1("PckgSize")), 3) & " " & drView1("PackagingType")
                                    End If
                                End If

                            End If
                            'drView1("Quantity") = 1
                            'drView1.Delete()
                        Next
                        _dsPackagingDelivery.AcceptChanges()
                        'CalculateSalesOrderSummary(dsScan)
                        BindSODeliveryGridData(dsPackagingDelivery.Tables(0))
                        AddButtonControlInDeliveryGrid(1)
                        AddSTRButtonControlInDeliveryGrid(1)
                        'DeliveryGridSetting()
                    End If
                    'If dtAscii.Rows.Count > 0 Then
                    '    dtAscii = _dsPackagingDelivery.Tables("PackagingDelivery").Select("packagingindex='" & dtAscii.Rows(0)("packagingindex") & "'").CopyToDataTable()
                    'End If
                    'dgDeliveryLocation.Item(CurrentRow, "Quantity") = 10
                End If
            End If
            If dgDeliveryLocation.Cols(CurrentCell).Name = "DeliveryAddress" Then

                Dim result As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")
                If result.Length > 0 Then
                    If rbDPNo.Checked Then
                        If rdDelNo.Checked Then
                            Dim dr() = dtTempOrderAddresses.Select("AddressKey='" & clsAdmin.SiteCode & "'")
                            If dr.Length > 0 Then
                                If (dr(0)("AddressValue") <> dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress").ToString()) Then
                                    ShowMessage("Please select multi Pickup radio button input as 'YES'", getValueByKey("CLAE04"))
                                    dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = dr(0)("AddressValue")
                                    Exit Sub
                                End If
                            End If

                        Else
                            Dim dr() = dtTempOrderAddresses.Select("DefaultAddress=True")
                            If dr.Length > 0 Then
                                If (dr(0)("AddressValue") <> dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress").ToString()) Then
                                    ShowMessage("Please select multi Delivery radio button input as 'YES'", getValueByKey("CLAE04"))
                                    dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = dr(0)("AddressValue")
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                    If dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress").ToString() = "-----------------------------" Then
                        dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = dtTempOrderAddresses.Rows(0)("AddressValue").ToString
                        result(0)("DeliveryAddress") = dtTempOrderAddresses.Rows(0)("AddressKey").ToString
                        _dsPackagingDelivery.AcceptChanges()
                        Exit Sub
                    End If
                    Dim resultAddr As DataRow() = dtTempOrderAddresses.Select("AddressValue='" + dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress").ToString() + "' and addresstype='Store' ")
                    If resultAddr.Length > 0 Then
                        result(0)("IsCustAddress") = "1"
                        result(0)("DeliveryAddress") = resultAddr(0)("AddressKey") 'dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress")
                    Else
                        Dim resultAddr1 As DataRow() = dtTempOrderAddresses.Select("AddressValue='" + dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress").ToString() + "' and addresstype='Address' ")
                        result(0)("IsCustAddress") = "2"  ''2=cust address,1=store,''=NA
                        result(0)("DeliveryAddress") = resultAddr1(0)("AddressKey")
                    End If
                    For Each resCombAddr As DataRow In _dsPackagingDelivery.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString + "'")
                        Dim ResCrntAddress As DataRow() = dtTempOrderAddresses.Select("AddressKey='" + resCombAddr("DeliveryAddress") + "'")
                        If resCombAddr("DeliveryLineNo") <> UpdateDeliveryIndex.ToString() Then
                            Dim crntaddr As String
                            If ResCrntAddress.Length > 0 Then
                                crntaddr = ResCrntAddress(0)("AddressValue")
                            Else
                                crntaddr = Nothing
                            End If
                            If dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = crntaddr Then
                                If Convert.ToDateTime(resCombAddr("DeliveryDate")).ToShortDateString = Convert.ToDateTime(dgDeliveryLocation.Item(CurrentRow, "DeliveryDate")).ToShortDateString AndAlso Convert.ToDateTime(resCombAddr("DeliveryTime")).ToString("hh:mm tt") = Convert.ToDateTime(dgDeliveryLocation.Item(CurrentRow, "DeliveryTime")).ToString("hh:mm tt") Then
                                    ShowMessage("Combination of Delivery Address cannot be same for a variation added for an item. Please change either of it", "SO009 - " & getValueByKey("CLAE04"))
                                    dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = Nothing
                                    result(0)("DeliveryAddress") = Nothing
                                    _dsPackagingDelivery.AcceptChanges()
                                    Exit Sub
                                End If
                            End If
                        End If
                    Next
                    _dsPackagingDelivery.AcceptChanges()
                End If
            End If
            If dgDeliveryLocation.Cols(CurrentCell).Name = "DeliveryDate" Then
                If dgDeliveryLocation.Item(CurrentRow, "DeliveryDate").Date < vCurrentSODateTime.Date Then
                    ShowMessage("Delivery date can not be back dated", "SO009 - " & getValueByKey("CLAE04"))
                    dgDeliveryLocation.Item(CurrentRow, "DeliveryDate") = Nothing
                    ' Disable date
                    Exit Sub
                End If
                Dim result As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")
                If result.Length > 0 Then
                    result(0)("DeliveryDate") = dgDeliveryLocation.Item(CurrentRow, "DeliveryDate")
                    _dsPackagingDelivery.AcceptChanges()
                End If
                For Each resCombAddr As DataRow In _dsPackagingDelivery.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString + "'")
                    Dim ResCrntAddress As DataRow() = dtOrderAddresses.Select("AddressKey='" + resCombAddr("DeliveryAddress") + "'")
                    If resCombAddr("DeliveryLineNo") <> UpdateDeliveryIndex.ToString() Then
                        Dim crntaddr As String
                        If ResCrntAddress.Length > 0 Then
                            crntaddr = ResCrntAddress(0)("AddressValue")
                        Else
                            crntaddr = Nothing
                        End If
                        If dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = crntaddr Then
                            If Convert.ToDateTime(resCombAddr("DeliveryDate")).ToShortDateString = Convert.ToDateTime(dgDeliveryLocation.Item(CurrentRow, "DeliveryDate")).ToShortDateString AndAlso Convert.ToDateTime(resCombAddr("DeliveryTime")).ToString("hh:mm tt") = Convert.ToDateTime(dgDeliveryLocation.Item(CurrentRow, "DeliveryTime")).ToString("hh:mm tt") Then
                                ShowMessage("Combination of Delivery Address cannot be same for a variation added for an item. Please change either of it", "SO009 - " & getValueByKey("CLAE04"))
                                dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = Nothing
                                result(0)("DeliveryAddress") = Nothing
                                _dsPackagingDelivery.AcceptChanges()
                                Exit Sub
                            End If
                        End If
                    End If
                Next
            End If
            If dgDeliveryLocation.Cols(CurrentCell).Name = "DeliveryTime" Then
                If dgDeliveryLocation.Item(CurrentRow, "DeliveryDate").Date = vCurrentSODateTime.Date Then
                    If dgDeliveryLocation.Item(CurrentRow, "DeliveryTime") < vCurrentSODateTime Then
                        ShowMessage("Delivery time can not be back dated", "SO009 - " & getValueByKey("CLAE04"))
                        dgDeliveryLocation.Item(CurrentRow, "DeliveryTime") = vCurrentSODateTime
                    End If
                End If


                Dim result As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")
                If result.Length > 0 Then
                    result(0)("DeliveryTime") = dgDeliveryLocation.Item(CurrentRow, "DeliveryTime")
                    _dsPackagingDelivery.AcceptChanges()
                End If
                For Each resCombAddr As DataRow In _dsPackagingDelivery.Tables(0).Select("PkgLineNo='" + UpdatePackagingIndex.ToString + "'")
                    Dim ResCrntAddress As DataRow() = dtTempOrderAddresses.Select("AddressKey='" + resCombAddr("DeliveryAddress") + "'")
                    If resCombAddr("DeliveryLineNo") <> UpdateDeliveryIndex.ToString() Then
                        Dim crntaddr As String
                        If ResCrntAddress.Length > 0 Then
                            crntaddr = ResCrntAddress(0)("AddressValue")
                        Else
                            crntaddr = Nothing
                        End If
                        If dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = crntaddr Then
                            If Convert.ToDateTime(resCombAddr("DeliveryDate")).ToShortDateString = Convert.ToDateTime(dgDeliveryLocation.Item(CurrentRow, "DeliveryDate")).ToShortDateString AndAlso Convert.ToDateTime(resCombAddr("DeliveryTime")).ToString("hh:mm tt") = Convert.ToDateTime(dgDeliveryLocation.Item(CurrentRow, "DeliveryTime")).ToString("hh:mm tt") Then
                                ShowMessage("Combination of Delivery Address cannot be same for a variation added for an item. Please change either of it", "SO009 - " & getValueByKey("CLAE04"))
                                dgDeliveryLocation.Item(CurrentRow, "DeliveryAddress") = Nothing
                                result(0)("DeliveryAddress") = Nothing
                                _dsPackagingDelivery.AcceptChanges()
                                Exit Sub
                            End If
                        End If
                    End If
                Next
            End If
            If dgDeliveryLocation.Cols(CurrentCell).Name.ToUpper() = "PICKUP" Then

                'PickUpQty()
                'Pickup()

                '---User goes to order details tab pckg size (kg) & pckg Qty.(Nos.) columns will be displayed.
                'Pckg qty (Nos.) will be displayed along with its packaging type as per mentioned in add items tab e.g. 20 Tin. (Pckg. Qty. is 20 & Packaging Type is Tin)
                Dim Pickup As Double = IIf(dgDeliveryLocation.Item(CurrentRow, "Pickup") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "Pickup"))
                If dgDeliveryLocation.Item(CurrentRow, "UOM") = "NOS" Then
                    Dim PkupQty = Pickup.ToString.Split(".")
                    If PkupQty.Length = 2 Then
                        If PkupQty(1) > 0 Then
                            ShowMessage("Pickup qty should not be in decimal", "Information")
                            dgDeliveryLocation.Item(dgDeliveryLocation.Row, "PICKUP") = 0.0
                            Exit Sub
                        End If
                    End If
                End If
                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                    If dgDeliveryLocation.Item(CurrentRow, "UOM") = "KGS" Then
                        Pickup = Pickup * dgDeliveryLocation.Item(CurrentRow, "PckgSize")
                    End If
                End If
                
                dgDeliveryLocation.Item(CurrentRow, "PickUpQty") = Pickup


                Dim vPickupQty As Double = IIf(dgDeliveryLocation.Item(CurrentRow, "PickupQty") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "PickupQty"))
                Dim orderQty As Double = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "Quantity"))
                Dim pendingQty As Double = IIf(dgDeliveryLocation.Item(CurrentRow, "PendingQty") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "PendingQty"))
                Dim deliveredQty As Double = IIf(dgDeliveryLocation.Item(CurrentRow, "deliveredQty") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "deliveredQty"))
                ' Dim netAmt As Double = IIf(dgDeliveryLocation.Item(CurrentRow, "Amount") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "Amount"))
                Dim result As DataRow() = _dsPackagingDelivery.Tables(0).Select("DeliveryLineNo='" + UpdateDeliveryIndex.ToString() + "' ")

                If deliveredQty + vPickupQty > orderQty Then
                    If result.Length > 0 Then
                        ShowMessage(getValueByKey("SO009"), "SO009 - " & getValueByKey("CLAE04"))
                        vPickupQty = orderQty - deliveredQty
                        result(0)("PickUpQty") = vPickupQty
                        If clsDefaultConfiguration.PackageFiedlsAllowed Then
                            '  dgDeliveryLocation.Item(CurrentRow, "PickUp") = result(0)("PickUpQty") / result(0)("PckgSize") 'vipin 20.02.2018  Run time error Handle 1 if "-" come. Mantis -2982
                            dgDeliveryLocation.Item(CurrentRow, "PickUp") = result(0)("PickUpQty") / IIf(result(0)("PckgSize").ToString.Trim.Equals("-"), 1, result(0)("PckgSize"))
                        End If
                        dgDeliveryLocation.Item(CurrentRow, "PickUp") = result(0)("PickUpQty")
                        dgDeliveryLocation.Item(CurrentRow, "PickUpQty") = result(0)("PickUpQty")
                        dgDeliveryLocation.Item(CurrentRow, "PendingQty") = orderQty - deliveredQty - vPickupQty
                    End If
                    'Exit Sub
                End If

                If vPickupQty > orderQty Then
                    ShowMessage(getValueByKey("SO009"), "SO009 - " & getValueByKey("CLAE04"))

                    If result.Length > 0 Then
                        dgDeliveryLocation.Item(CurrentRow, "PickUpQty") = result(0)("PickUpQty")
                    End If
                    Exit Sub
                Else
                    dgDeliveryLocation.Item(CurrentRow, "PickUpQty") = vPickupQty
                    dgDeliveryLocation.Item(CurrentRow, "PendingQty") = orderQty - deliveredQty - vPickupQty
                    If result.Length > 0 Then
                        result(0)("PickUpQty") = vPickupQty
                        ' result(0)("PendingQty") = vPickupQty
                        _dsPackagingDelivery.AcceptChanges()
                    End If

                End If
                If clsDefaultConfiguration.PackageFiedlsAllowed Then
                    '--------
                    If dgDeliveryLocation.Item(CurrentRow, "UOM") = "KGS" Then
                        Dim pickBaseUom = vPickupQty
                        pendingQty = (orderQty - pickBaseUom - deliveredQty)
                        dgDeliveryLocation.Item(CurrentRow, "PendingQty") = pendingQty
                        If dgDeliveryLocation.Item(CurrentRow, "PckgSize") > 0 Then
                            dgDeliveryLocation.Item(CurrentRow, "PckgQty") = FormatNumber((pendingQty * 1 / dgDeliveryLocation.Item(CurrentRow, "PckgSize")), 3) & " " & dgDeliveryLocation.Item(CurrentRow, "PackagingType")
                        Else
                            dgDeliveryLocation.Item(CurrentRow, "PckgQty") = 0
                        End If

                        result(0)("PendingQty") = dgDeliveryLocation.Item(CurrentRow, "PendingQty")
                        result(0)("PckgQty") = dgDeliveryLocation.Item(CurrentRow, "PckgQty")
                        result(0)("PickUpQty") = pickBaseUom

                        _dsPackagingDelivery.AcceptChanges()
                        'Else
                        '    dgDeliveryLocation.Item(CurrentRow, "PendingQty") = orderQty - vPickupQty
                    End If
                End If
             

                Dim resultPack As DataRow() = _dsPackagingVar.Tables(0).Select("pkgLineNo='" + UpdatePackagingIndex.ToString() + "' ")
                If resultPack.Length > 0 Then
                    ' resultPack(0)("PickUpQty") = vPickupQty
                    'dgDeliveryLocation.Item(CurrentRow, "PendingQty") = (orderQty - vPickupQty) - resultPack(0)("DeliveredQty")
                    Dim editPickQty = CDbl(_dsPackagingDelivery.Tables("PackagingDelivery").Compute("SUM(PickUpQty)", "PkgLineNo='" + UpdatePackagingIndex.ToString() + "'"))
                    'If dgDeliveryLocation.Item(CurrentRow, "IsHeader") = "True" Then
                    resultPack(0)("PickUpQty") = editPickQty
                    'Else
                    '    resultPack(0)("PickUpQty") = resultPack(0)("PickUpQty") + vPickupQty
                    'End If
                    '$$ added by KETAN SO GST Changes 
                    Dim resultDis As DataRow() = dtPickUpDiscGrid.Select("BillLineNo='" + resultPack(0)("BillLineNo").ToString() + "' and PkgLineNo='" + resultPack(0)("PkgLineNo").ToString() + "'")
                    Dim resultTax As DataRow() = dtPickUpTax.Select("BillLineNo='" + resultPack(0)("BillLineNo").ToString() + "'and PkgLineNo='" + resultPack(0)("PkgLineNo").ToString() + "'")
                    Dim Prvdisc As Double = 0
                    Dim PvrTaxvalue As Double = 0
                    If resultDis.Length > 0 Then
                        Prvdisc = resultDis(0)("DiscountAmount")
                    End If
                    If resultTax.Length > 0 Then
                        PvrTaxvalue = resultTax(0)("TaxAmount")
                    End If


                    Dim vpendingQty = (resultPack(0)("Quantity") - resultPack(0)("DeliveredQty"))
                    Dim DiscAmt As Double = 0
                    For Each drScanTemp As DataRow In _dsPackagingVar.Tables("PackagingMaterial").Select("ArticleCode ='" & resultPack(0)("ArticleCode").ToString() & "'and PkgLineNo ='" & resultPack(0)("PkgLineNo").ToString() & "' and IsStatus<> 'Deleted' AND PickUpQty>0")

                        ' DiscAmt = DiscAmt + ((drScanTemp("LineDiscount") * ((drScanTemp("Quantity") - drScanTemp("DeliveredQty")) / drScanTemp("Quantity"))))
                        DiscAmt = DiscAmt + (drScanTemp("LineDiscount") - Prvdisc)
                    Next

                    'Dim prvTax = dtPickUpTax.Select("BillLineNo ='" & resultPack(0)("BillLineNo").ToString & "'").CopyToDataTable
                    'Dim PvrTaxvalue = prvTax.Rows(0)("TaxAmount")
                    Dim ArticleRate As Double = 0
                    If DiscAmt > 0 Then
                        ArticleRate = ((resultPack(0)("SellingPrice") * vpendingQty) - (DiscAmt) + resultPack(0)("TotalTaxAmount") - PvrTaxvalue) / vpendingQty
                    Else
                        ArticleRate = ((resultPack(0)("SellingPrice") * vpendingQty) + resultPack(0)("TotalTaxAmount") - PvrTaxvalue) / vpendingQty
                    End If

                    ' Dim ArticleRate As Double = ((resultPack(0)("SellingPrice") * vpendingQty) + ((resultPack(0)("TotalTaxAmount") * vpendingQty / resultPack(0)("Quantity"))) - DiscAmt) / vpendingQty

                    ' Dim ArticleRate As Double = ((resultPack(0)("SellingPrice") * vpendingQty)) + resultPack(0)("TotalTaxAmount")
                    'resultPack(0)("minpayamt") = resultPack(0)("sellingprice") * resultPack(0)("PickUpQty")





                    resultPack(0)("totalpickupamt") = editPickQty * ArticleRate
                    '-----Added By Prasad for Calculating Tax Amt PickupWise of Savoy Client
                    If clsDefaultConfiguration.IsSavoy Then
                        Dim TaxCalc As Double = 0
                        Dim TaxValue As Double = 0
                        If Not dsMain.Tables("SalesOrderTaxDtls") Is Nothing AndAlso dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
                            Dim dr() = dsMain.Tables("SalesOrderTaxDtls").Select("Status=True")
                            If dr.Count > 0 Then
                                TaxValue = dr(0)("TaxValue")
                            End If
                        End If
                        TaxCalc = ((resultPack(0)("SellingPrice") * resultPack(0)("PickupQty")) / dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " ")) * TaxValue
                        resultPack(0)("totalpickupamt") = resultPack(0)("totalpickupamt") + TaxCalc
                    End If
                    '------------------------------------------------------------------------

                    _dsPackagingVar.AcceptChanges()
                End If



                Try

                    'StockQty = objCM.GetStocks(clsAdmin.SiteCode, grdSOItems.Item(CurrentRow, "EAN"), grdSOItems.Item(CurrentRow, "ArticleCode"), clsDefaultConfiguration.IsBatchManagementReq, grdSOItems.Item(CurrentRow, "BatchBarcode"))
                    'If CDbl(StockQty) <= 0 Then
                    '    If clsDefaultConfiguration.NegativeInventoryAllowed = False Then
                    '        ShowMessage(getValueByKey("SO001"), "SO001 - " & getValueByKey("CLAE04"))
                    '        'ShowMessage("Article out of Stock.", "Information")                        
                    '        e.Cancel = True
                    '        Exit Sub
                    '    End If
                    'End If
                    If Not (vPickupQty >= 0) Then
                        ShowMessage(getValueByKey("SO008"), "SO008 - " & getValueByKey("CLAE05"))
                        'ShowMessage("PickUp Quantity cannot less than 1.", "PickUp Quantity Information")
                        grdSOItems.Item(CurrentRow, "PickupQty") = 0
                    End If

                    Dim dvPickupQty As DataView
                    'If IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False Then
                    '    dvPickupQty = New DataView(_dsScan.Tables("ItemScanDetails"), "EAN='" & grdSOItems.Item(CurrentRow, "EAN") & "' And BatchBarcode = '" & grdSOItems.Item(CurrentRow, "BatchBarcode") & "'" & addCondtionRow, "", DataViewRowState.CurrentRows)
                    'Else
                    'dvPickupQty = New DataView(_dsScan.Tables("PackagingMaterial"), "DeliveryIndex='" + UpdateDeliveryIndex.ToString() + "' ", "", DataViewRowState.CurrentRows)
                    'End If
                    dvPickupQty = New DataView(_dsPackagingVar.Tables(0), " pkgLineNo='" & UpdatePackagingIndex.ToString() & "'", "", DataViewRowState.CurrentRows)
                    'dvPickupQty = New DataView(_dsPackagingVar.Tables(0), "EAN='" & dgDeliveryLocation.Item(CurrentRow, "EAN") & "' and pkgLineNo='" & UpdatePackagingIndex.ToString() & "'", "", DataViewRowState.CurrentRows)
                    If dvPickupQty.Count > 0 Then
                        dvPickupQty.AllowEdit = True

                        'Rakesh-01.10.2013:7835-->Check article stock balance quantity
                        If (Not clsDefaultConfiguration.NegativeInventoryAllowed) Then
                            Dim objCommon As New clsCommon
                            Dim articleCode = dvPickupQty(0)("articlecode")
                            Dim articleEAN = dvPickupQty(0)("ean")
                            Dim iPickUpQty = dvPickupQty(0)("PickUpQty")

                            Dim StockQty As Double = objCommon.GetStocks(clsAdmin.SiteCode, articleEAN, articleCode, True)

                            If (StockQty < iPickUpQty) Then
                                ShowMessage(String.Format(getValueByKey("SB015"), StockQty), "SB015 - " & getValueByKey("CLAE04"))
                                dgDeliveryLocation.Item(CurrentRow, "PickUpQty") = 0
                            End If
                        End If

                        For Each drPickupQty As DataRowView In dvPickupQty

                            If dgDeliveryLocation.Item(CurrentRow, "PickupQty") <= dgDeliveryLocation.Item(CurrentRow, "Quantity") Then
                                '  Dim resultDsScan As DataRow() = _dsScan.Tables(0).Select("DeliveryIndex='" + UpdateDeliveryIndex.ToString() + "' ")
                                Dim resultDsScan As DataRow() = _dsScan.Tables(0).Select("BillLineno='" + drPickupQty("BillLineNo").ToString() + "' ")  'vipin

                                'drPickupQty("PickupQty") = dgDeliveryLocation.Item(CurrentRow, "PickupQty")


                                'TotalSalesQty = drPickupQty("PickupQty") '+ drPickupQty("DeliveredQty")
                                'NetArticleRate = Math.Round(drPickupQty("NetAmount") / drPickupQty("Quantity"), 3)
                                'drPickupQty("MinPayAmt") = Math.Round(((drPickupQty("Quantity") - TotalSalesQty) * NetArticleRate * (clsDefaultConfiguration.IsSaleAdvanceAllowed / 100)) + (TotalSalesQty * NetArticleRate), 3)
                                'drPickupQty("PickupQty") = grdSOItems.Item(CurrentRow, "PickupQty")
                                'RecalculateLine(drPickupQty.Row)
                                'drPickupQty("TotalPickUpAmt") = (drPickupQty("PickupQty") * NetArticleRate)
                                If resultDsScan.Length > 0 Then
                                    resultDsScan(0)("PickupQty") = dgDeliveryLocation.Item(CurrentRow, "PickupQty")
                                End If
                            Else
                                dgDeliveryLocation.Item(CurrentRow, "PickupQty") = 0
                                'dgDeliveryLocation.Item(CurrentRow, "TotalPickUpAmt") = 0
                                ShowMessage(getValueByKey("SO009"), "SO009 - " & getValueByKey("CLAE04"))
                                'ShowMessage("Pick Up Quantity cannot greater than Order Quantity.", "Information")
                            End If
                        Next
                        dsScan.AcceptChanges()
                        _dsPackagingVar.AcceptChanges()
                    End If
                    UpdateItemData()
                    CalculateSalesOrderSummory(dsScan)
                    RefreshLoadSOData()
                Catch ex As Exception
                    ShowMessage(ex.Message, getValueByKey("CLAE05"))
                    LogException(ex)
                End Try


            End If
            dgDeliveryLocation.Select(CurrentRow, CurrentCell, CurrentRow, CurrentCell, True) 'vipin


        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    'Private Sub DeliveryGridSetting()
    '    Try

    '        For colno = 1 To dgDeliveryLocation.Cols.Count - 1
    '            If dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DISCRIPTION".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "EAN".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "ArticleCode".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "Quantity".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "IsCLP".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DEL".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PLUS".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "SrNo".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DispSrNo".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "ArticleType".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "UOM".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "ReservedQty".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliverySiteCode".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PckgSize".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PickUpQty".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PendingQty".ToUpper() _
    '                 AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "STR".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliveryDate".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliveryTime".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "DeliveryAddress".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PckgQty".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PackagingType".ToUpper() _
    '                 AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "PackagingMaterial".ToUpper() _
    '                AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "NetAmount".ToUpper() Then
    '                HideColumns(dgDeliveryLocation, False, dgDeliveryLocation.Cols(colno).Name)
    '            End If
    '        Next
    '        ''AndAlso dgDeliveryLocation.Cols(colno).Name.ToUpper() <> "LastPickDate".ToUpper() _
    '        dgDeliveryLocation.Cols("DEL").Caption = ""
    '        dgDeliveryLocation.Cols("DEL").Width = 20
    '        dgDeliveryLocation.Cols("DEL").ComboList = "..."
    '        dgDeliveryLocation.Cols("PLUS").Caption = ""
    '        dgDeliveryLocation.Cols("PLUS").Width = 20
    '        dgDeliveryLocation.Cols("SrNo").Width = 60
    '        dgDeliveryLocation.Cols("SrNo").Caption = "Sr. No."
    '        dgDeliveryLocation.Cols("SrNo").TextAlign = TextAlignEnum.LeftCenter
    '        ''IIf(resourceMgr Is Nothing, "Item Code", getValueByKey("frmcashmemo.DgBulkComboGrid.articlecode"))
    '        dgDeliveryLocation.Cols("SrNo").AllowEditing = False
    '        dgDeliveryLocation.Cols("ArticleType").AllowEditing = False
    '        dgDeliveryLocation.Cols("Quantity").Width = 45
    '        'grdSOItems.Cols("Quantity").EditMask = "999999999"
    '        dgDeliveryLocation.Cols("Quantity").DataType = Type.GetType("System.Decimal")
    '        dgDeliveryLocation.Cols("Quantity").Format = "0.000"
    '        dgDeliveryLocation.Cols("Quantity").Width = 45
    '        dgDeliveryLocation.Cols("PickUpQty").DataType = Type.GetType("System.Decimal")
    '        dgDeliveryLocation.Cols("PickUpQty").Format = "0.000"
    '        dgDeliveryLocation.Cols("PickUpQty").Width = 45
    '        'grdSOItems.Cols("Quantity").EditMask = "999999999"
    '        dgDeliveryLocation.Cols("PendingQty").DataType = Type.GetType("System.Decimal")
    '        dgDeliveryLocation.Cols("PendingQty").Format = "0.000"
    '        dgDeliveryLocation.Cols("PendingQty").AllowEditing = False

    '        ' grdSOItems.Cols("DeliveryDate").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.expdeldate")
    '        dgDeliveryLocation.Cols("DeliveryDate").Width = 140
    '        dgDeliveryLocation.Cols("DeliveryDate").DataType = Type.GetType("System.DateTime")
    '        dgDeliveryLocation.Cols("DeliveryDate").Format = "d"
    '        dgDeliveryLocation.Cols("DeliveryTime").Width = 140
    '        dgDeliveryLocation.Cols("DeliveryTime").DataType = Type.GetType("System.DateTime")
    '        dgDeliveryLocation.Cols("DeliveryTime").Format = "t"

    '        Dim isFirstSite As Integer = 0
    '        Dim AddressList As String
    '        Dim IsAddresAdded As Boolean = False
    '        For index = 0 To dtOrderAddresses.Rows.Count - 1
    '            If dtOrderAddresses(index)(1).trim <> "" AndAlso dtOrderAddresses(index)(1).trim <> "" Then
    '                If dtOrderAddresses(index)(2) = "Store" AndAlso isFirstSite = 0 Then
    '                    isFirstSite = 1
    '                End If
    '                If isCustSelected AndAlso isFirstSite = 1 AndAlso dtOrderAddresses(index)(2) = "Store" AndAlso IsAddresAdded Then
    '                    isFirstSite = 2
    '                    AddressList = AddressList & "-----------------------------" & "|"
    '                    AddressList = AddressList & dtOrderAddresses(index)(1) & "|"
    '                Else
    '                    If dtOrderAddresses(index)(2) = "Address" Then
    '                        IsAddresAdded = True
    '                    End If

    '                    AddressList = AddressList & dtOrderAddresses(index)(1) & "|"
    '                End If

    '            End If

    '        Next index
    '        If AddressList.Length > 0 Then
    '            AddressList = AddressList.Substring(0, AddressList.Length - 1)
    '        End If
    '        dgDeliveryLocation.Cols("PackagingMaterial").Width = 240
    '        dgDeliveryLocation.Cols("DeliveryAddress").Width = 170
    '        'grdSOItems.Cols("DeliveryAddress").Caption = "Packaging Type"
    '        '// IIf(resourceMgr Is Nothing, "Disc%", getValueByKey("frmcashmemo.DgBulkComboGrid.quantity"))
    '        dgDeliveryLocation.Cols("DeliveryAddress").AllowEditing = True
    '        dgDeliveryLocation.Cols("DeliveryAddress").ComboList = AddressList
    '        dgDeliveryLocation.Cols("DispSrNo").DataType = Type.GetType("System.Decimal")
    '        'grdSOItems.Cols("PLUS").ComboList = "..."
    '        'If (clsDefaultConfiguration.BarcodeDisplayAllowed) Then
    '        '    grdSOItems.Cols("EAN").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.ean")
    '        '    grdSOItems.Cols("EAN").Width = 90
    '        '    grdSOItems.Cols("EAN").AllowEditing = False
    '        '    grdSOItems.Cols("EAN").Visible = True
    '        'Else
    '        '    grdSOItems.Cols("EAN").Visible = False
    '        'End If
    '        'grdSOItems.Cols("ArticleType").Caption = "Article Type"
    '        'grdSOItems.Cols("ArticleType").Width = 90
    '        'grdSOItems.Cols("ArticleType").AllowEditing = False
    '        'grdSOItems.Cols("ArticleType").Visible = True
    '        'grdSOItems.Cols("ArticleCode").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.articlecode")
    '        'grdSOItems.Cols("ArticleCode").Width = 90
    '        'grdSOItems.Cols("ArticleCode").AllowEditing = False
    '        'grdSOItems.Cols("ArticleCode").Visible = True
    '        'grdSOItems.Cols("Discription").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.discription")
    '        'grdSOItems.Cols("Discription").Width = 150
    '        'grdSOItems.Cols("Discription").AllowEditing = False
    '        'grdSOItems.Cols("UOM").Caption = "UOM"
    '        'grdSOItems.Cols("UOM").Width = 90
    '        'grdSOItems.Cols("UOM").AllowEditing = False
    '        'grdSOItems.Cols("UOM").Visible = True
    '        ''grdSOItems.Cols("SellingPrice").Caption = "Price" 'getValueByKey("frmnsalesordercreation.grdSOItems.sellingprice")
    '        'grdSOItems.Cols("SellingPrice").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.sellingprice")
    '        'grdSOItems.Cols("SellingPrice").Width = 60
    '        'grdSOItems.Cols("SellingPrice").AllowEditing = False
    '        'grdSOItems.Cols("Quantity").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.quantity")
    '        'grdSOItems.Cols("Quantity").Width = 45
    '        ''grdSOItems.Cols("Quantity").EditMask = "999999999"
    '        'grdSOItems.Cols("Quantity").Format = "0.000"
    '        'grdSOItems.Cols("PickUpQty").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.pickupqty")
    '        'grdSOItems.Cols("PickUpQty").Width = 45
    '        'grdSOItems.Cols("PickUpQty").Format = "0.000"
    '        'If clsDefaultConfiguration.IsBatchManagementReq Then
    '        '    grdSOItems.Cols("PickUpQty").AllowEditing = False
    '        'End If

    '        ''grdSOItems.Cols("TOTALDISCPERCENTAGE").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.totaldiscpercentage")
    '        ''grdSOItems.Cols("TOTALDISCPERCENTAGE").Width = 45
    '        ''grdSOItems.Cols("TOTALDISCPERCENTAGE").Format = "0.00"
    '        ''grdSOItems.Cols("TOTALDISCPERCENTAGE").AllowEditing = False
    '        'grdSOItems.Cols("NetAmount").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.netamount")
    '        'grdSOItems.Cols("NetAmount").Width = 70
    '        'grdSOItems.Cols("NetAmount").Format = "0.00"
    '        'grdSOItems.Cols("NetAmount").AllowEditing = False
    '        ''grdSOItems.Cols("ExpDelDate").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.expdeldate")
    '        ''grdSOItems.Cols("ExpDelDate").Width = 140
    '        ''grdSOItems.Cols("ExpDelDate").Format = "g"
    '        ''grdSOItems.Cols("Stock").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.stock")
    '        ''grdSOItems.Cols("Stock").Width = 45
    '        ''grdSOItems.Cols("Stock").AllowEditing = False
    '        'grdSOItems.Cols("IsCLP").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.isclp")
    '        'grdSOItems.Cols("IsCLP").Width = 45
    '        'grdSOItems.Cols("ReservedQty").Caption = getValueByKey("frmnsalesordercreation.grdSOItems.reservedqty")
    '        'grdSOItems.Cols("ReservedQty").Width = 45
    '        'grdSOItems.Cols("ReservedQty").Format = "0.000"
    '        ''grdSOItems.Cols("ReservedQty").DataType = Type.GetType("System.Boolean")
    '        ''grdSOItems.Cols("IsCLP").DataType = Type.GetType("System.Boolean")
    '        ''ExclTaxAmt
    '        'grdSOItems.Cols("TotalTaxAmt").Caption = "Article Level Tax" 'getValueByKey("frmnsalesordercreation.grdSOItems.excltaxamt")
    '        'grdSOItems.Cols("TotalTaxAmt").Width = 45
    '        'grdSOItems.Cols("TotalTaxAmt").AllowEditing = False
    '        'grdSOItems.Cols("TotalTaxAmt").Format = "0.00"
    '        'grdSOItems.AutoSizeCols()
    '        'grdSOItems.Cols("Del").Width = 20
    '        dgDeliveryLocation.KeyActionTab = C1.Win.C1FlexGrid.KeyActionEnum.None

    '    Catch ex As Exception
    '        LogException(ex)
    '    End Try
    'End Sub
    Private Sub TabSalesOrder_SelectedIndexChanged(sender As Object, e As EventArgs) Handles TabSalesOrder.SelectedIndexChanged
        Try
            Dim selectedTab = TabSalesOrder.SelectedIndex
            If selectedTab <> 0 Then
                If Not isValidData(True) Then
                    TabSalesOrder.SelectedIndex = 0
                    Exit Sub
                End If
            End If



            If dsPackagingVar IsNot Nothing Then
                If dsPackagingVar.Tables(0).Rows.Count > 0 AndAlso selectedTab = 1 Then



                    If UpdateSODeliveryGridData() Then
                        BindSODeliveryGridData(dsPackagingDelivery.Tables(0), True)
                        AddButtonControlInDeliveryGrid(1)
                        AddSTRButtonControlInDeliveryGrid(1)
                    End If

                End If
                If selectedTab = 0 And IsUpdateSuccess = True And dsPackagingVar.Tables(0).Rows.Count > 0 Then

                    UpdateItemData()
                    'RefreshScanData(dsScan)
                    CalculateSalesOrderSummory(_dsScan)
                    If DtSoBulkRemarks.Rows.Count > 0 Then
                        LoadRemarks(DtSoBulkRemarks, True)
                    End If
                End If
            End If
            ' BindTextValue() '##
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Function isValidData(Optional ByVal IsDeliveryAddressValid As Boolean = False) As Boolean
        Try
            If Not clsDefaultConfiguration.IsSavoy Then
                For drindex = 0 To dsPackagingVar.Tables(0).Rows.Count - 1
                    If dsPackagingVar.Tables(0).Rows(drindex)("PckgMaterial").ToString() = "" Then
                        ShowMessage("Please select Packaging material for article", " " & getValueByKey("CLAE04"))
                        Return False

                    End If
                    If clsDefaultConfiguration.PackageFiedlsAllowed Then

                        If dsPackagingVar.Tables(0).Rows(drindex)("ArticleType") = "Single" Then
                            If dsPackagingVar.Tables(0).Rows(drindex)("UnitOfMeasure") = "KGS" Then
                                If dsPackagingVar.Tables(0).Rows(drindex)("PckgSize") = 0 Then
                                    ShowMessage("Please select Packaging Size for article", " " & getValueByKey("CLAE04"))
                                    Return False
                                End If
                                If dsPackagingVar.Tables(0).Rows(drindex)("PckgQty") = 0 Then
                                    ShowMessage("Please select Packaging Quantity for article", " " & getValueByKey("CLAE04"))
                                    Return False
                                End If
                            End If
                        End If

                        If dsPackagingVar.Tables(0).Rows(drindex)("ArticleType") = "Combo" Then
                            '---In case of combo check isPackagingMandatory is true or false ... if true do not validate for pckgsize
                            Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + dsPackagingVar.Tables(0).Rows(drindex)("Discription") + "'and isPackagingMandatory=1 ")
                            If resultCombo.Length = 0 Then
                                If dsPackagingVar.Tables(0).Rows(drindex)("PckgSize") = 0 Then
                                    ShowMessage("Please select Packaging Size for article", " " & getValueByKey("CLAE04"))
                                    Return False
                                End If
                            End If
                            If dsPackagingVar.Tables(0).Rows(drindex)("PckgType").ToString() = "" Then
                                ShowMessage("Please select Packaging Type for article", " " & getValueByKey("CLAE04"))
                                Return False
                            End If
                        End If


                    End If
                Next
            End If
            IsDeliveryAddressValid = True 'vipin
            If Not IsDeliveryAddressValid = True Then
                For Each dr As DataRow In dsPackagingVar.Tables(0).Rows
                    Dim result As DataRow() = dsPackagingDelivery.Tables(0).Select("BillLineNo='" + dr("BillLineNo").ToString() + "' and PkgLineNo='" + dr("PkgLineNo").ToString() + "' and DeliveryLineNo='" + dr("DeliveryIndex").ToString() + "'")
                    If result.Length = 0 Then
                        ShowMessage("Please select delivery address ", " " & getValueByKey("CLAE04"))
                        TabSalesOrder.SelectedIndex = 1
                        Exit Function
                    End If
                Next
                For Each dr As DataRow In dsPackagingDelivery.Tables(0).Select("Status=True")
                    If IIf(dr("deliveryaddress") Is DBNull.Value, Nothing, dr("deliveryaddress")) = "" Then
                        ShowMessage("Please select delivery address ", " " & getValueByKey("CLAE04"))
                        TabSalesOrder.SelectedIndex = 1
                        Exit Function
                    End If
                Next
            End If
            Return True

        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    Private Sub UpdateItemData()
        Try

            For Each dr As DataRow In dsPackagingDelivery.Tables(0).Rows

                If dr("IsHeader") = "True" Then
                    Dim sumObject As Object
                    sumObject = dsPackagingDelivery.Tables(0).Compute("Sum(PickUpQty)", " PackagingIndex='" + dr("PackagingIndex").ToString() + "'")
                    Dim result As DataRow() = dsScan.Tables(0).Select("PackagingIndex='" + dr("PackagingIndex").ToString() + "'")
                    If result.Length > 0 Then 'And sumObject > 0
                        result(0)("PickUpQty") = sumObject
                        dsScan.AcceptChanges()
                    End If
                End If
            Next
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Public Function UpdateSODeliveryGridData() As Boolean
        Try
            Dim isFirstTimeIncrement As Boolean = True




            For Each dr As DataRow In dsPackagingVar.Tables(0).Rows

                If dr("Status") = True Then

                    Dim result As DataRow() = dsPackagingDelivery.Tables(0).Select("BillLineNo='" + dr("RowIndex").ToString() + "'  and PkgLineNo ='" + dr("PkgLineNo").ToString() + "' and IsHeader=True and status=true")


                    If result.Count = 0 Then
                        Dim rowDeliveryAddr = dsPackagingDelivery.Tables(0).NewRow()
                        rowDeliveryAddr("SrNo") = dr("SrNo").ToString()
                        rowDeliveryAddr("DispSrNo") = dr("SrNo")
                        If dr("IsCombo") Then
                            rowDeliveryAddr("ArticleType") = "Combo"
                            rowDeliveryAddr("UnitOfMeasure") = dr("PackageBaseUOM")
                        Else
                            rowDeliveryAddr("ArticleType") = "Single"
                            rowDeliveryAddr("UnitOfMeasure") = dr("UnitOfMeasure")
                        End If

                        'If dr("IsHeader").ToString() = "True" Then
                        '    '    rowDeliveryAddr("DISCRIPTION") = "Order " & dr("RowIndex").ToString() & ":" & dr("DISCRIPTION").ToString()
                        '    'Else
                        '    rowDeliveryAddr("DISCRIPTION") = dr("DISCRIPTION").ToString()
                        'Else
                        '    rowDeliveryAddr("DISCRIPTION") = dr("DISCRIPTION").ToString()
                        'End If
                        rowDeliveryAddr("DISCRIPTION") = dr("DISCRIPTION").ToString()
                        rowDeliveryAddr("Quantity") = dr("Quantity")

                        rowDeliveryAddr("EAN") = dr("EAN")
                        rowDeliveryAddr("FinYear") = dr("FinYear")
                        rowDeliveryAddr("ArticleType") = dr("ArticleType")
                        rowDeliveryAddr("ArticleCode") = dr("ArticleCode")
                        rowDeliveryAddr("SiteCode") = clsAdmin.SiteCode
                        rowDeliveryAddr("SaleOrderNumber") = dr("SaleOrderNumber")
                        If rbDPNo.Checked Then
                            rowDeliveryAddr("DeliveryDate") = ctrlDtDeliveryDate.Value
                            rowDeliveryAddr("DeliveryTime") = ctrlDtDeliveryDate.Value
                            If lblMultiPickupDel.Text = "Multi Pickup" Then
                                Dim drdefaddr() = dtTempOrderAddresses.Select("AddressKey='" & clsAdmin.SiteCode & "'")
                                If drdefaddr.Count > 0 Then
                                    rowDeliveryAddr("DeliveryAddress") = drdefaddr(0)("AddressKey").ToString
                                    rowDeliveryAddr("IsCustAddress") = "1"
                                End If
                            Else
                                Dim drdefaddr() = dtTempOrderAddresses.Select("DefaultAddress=1")
                                If drdefaddr.Count > 0 Then
                                    rowDeliveryAddr("DeliveryAddress") = drdefaddr(0)("AddressKey").ToString
                                    rowDeliveryAddr("IsCustAddress") = "2"
                                End If
                            End If
                        Else
                            rowDeliveryAddr("DeliveryAddress") = ""
                            rowDeliveryAddr("DeliveryDate") = DateTime.Now
                            rowDeliveryAddr("DeliveryTime") = DateTime.Now
                        End If
                        rowDeliveryAddr("DeliveredQty") = 0
                        'rowDeliveryAddr("PackagingMaterial") = dr("PackagingMaterial")
                        If clsDefaultConfiguration.PackageFiedlsAllowed Then
                            '--------New
                            If dr("ArticleType") = "Single" Then
                                rowDeliveryAddr("PckgSize") = dr("PckgSize")
                            Else
                                Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + dr("Discription") + "' and isPackagingMandatory=1")
                                If resultCombo.Length > 0 Then
                                    rowDeliveryAddr("PckgSize") = "          -"
                                Else
                                    rowDeliveryAddr("PckgSize") = dr("PckgSize")
                                End If
                            End If

                            If dr("UnitOfMeasure") Is DBNull.Value Then
                                rowDeliveryAddr("PckgQty") = "          -"
                            Else
                                If dr("UnitOfMeasure").ToString() = "KGS" Then
                                    rowDeliveryAddr("PckgQty") = FormatNumber(dr("PckgQty"), 3) & " " & dr("PckgType")
                                Else
                                    rowDeliveryAddr("PckgQty") = "          -"
                                End If
                            End If
                           
                            rowDeliveryAddr("PackagingType") = dr("PckgType")
                            '------
                        End If
                      
                        rowDeliveryAddr("PickUpQty") = dr("PickUpQty")
                        'rowDeliveryAddr("LastPickUpDateTime") = DateTime.Now
                        rowDeliveryAddr("PendingQty") = 0
                        rowDeliveryAddr("BillLineNO") = dr("RowIndex")
                        rowDeliveryAddr("pkgLineNo") = dr("pkgLineNo")
                        rowDeliveryAddr("DeliveryLineNO") = dr("DeliveryIndex")
                        rowDeliveryAddr("IsHeader") = "True"
                        rowDeliveryAddr("IsCombo") = dr("IsCombo")
                        rowDeliveryAddr("IsImageReq") = dr("IsHeader")
                        rowDeliveryAddr("IsNew") = True
                        rowDeliveryAddr("Status") = True
                        dsPackagingDelivery.Tables(0).Rows.Add(rowDeliveryAddr)
                        If isFirstTimeIncrement Then
                            'vDeliveryIndex = vDeliveryIndex + 1
                        End If
                        isFirstTimeIncrement = False
                    Else
                        result(0)("PackagingMaterial") = dr("PckgMaterial")
                        result(0)("Quantity") = dr("Quantity")
                        Dim baseQty As Decimal
                        baseQty = dr("Quantity")
                        If baseQty > 0 Then '- ((currentQty + sumObject) - result(0)("Quantity")) 
                            Dim resultSum As DataRow() = dsPackagingDelivery.Tables(0).Select("IsHeader = False and PkgLineNo='" + dr("PkgLineNo").ToString() + "'")
                            Dim sumObject As Object
                            sumObject = _dsPackagingDelivery.Tables(0).Compute("Sum(Quantity)", "IsHeader = False and PkgLineNo='" + dr("PkgLineNo").ToString() + "'")
                            If resultSum.Length > 0 Then
                                If baseQty - sumObject > 0 Then
                                    result(0)("Quantity") = baseQty - sumObject
                                End If
                            End If

                            '---------
                            If clsDefaultConfiguration.PackageFiedlsAllowed Then
                                If result(0)("UnitOfMeasure").ToString() = "KGS" Then
                                    result(0)("PckgSize") = dr("PckgSize")
                                    If dr("PckgSize") = 0 Then
                                        result(0)("PckgQty") = 0 & " " & dr("PckgType")
                                    Else
                                        result(0)("PckgQty") = FormatNumber(((result(0)("Quantity") - result(0)("PickUpQty") - result(0)("DeliveredQty")) / dr("PckgSize")), 3) & " " & dr("PckgType")
                                    End If
                                    '((dr("Quantity") - dr("PickUpQty")) / dr("PckgSize")) & " " & dr("PckgType")
                                    result(0)("PackagingType") = dr("PckgType")
                                    '----for variation in delivery
                                    Dim resultdel As DataRow() = dsPackagingDelivery.Tables(0).Select("BillLineNo='" + dr("RowIndex").ToString() + "'  and PkgLineNo ='" + dr("PkgLineNo").ToString() + "' and IsHeader=False and status=true")
                                    If resultdel.Length > 0 Then
                                        For Each drr As DataRow In resultdel
                                            drr("PckgSize") = dr("PckgSize")

                                            If drr("PckgSize") = 0 Then
                                                drr("PckgQty") = 0 & " " & dr("PckgType")
                                            Else
                                                drr("PckgQty") = FormatNumber(((drr("Quantity") - drr("PickUpQty") - drr("DeliveredQty")) / dr("PckgSize")), 3) & " " & dr("PckgType")
                                            End If

                                            drr("PackagingType") = dr("PckgType")
                                        Next

                                        'resultdel(0)("PckgSize") = dr("PckgSize")

                                        'If dr("PckgSize") = 0 Then
                                        '    resultdel(0)("PckgQty") = 0 & " " & dr("PckgType")
                                        'Else
                                        '    resultdel(0)("PckgQty") = ((resultdel(0)("Quantity") - resultdel(0)("PickUpQty") - resultdel(0)("DeliveredQty")) / dr("PckgSize")) & " " & dr("PckgType")
                                        'End If

                                        'resultdel(0)("PackagingType") = dr("PckgType")
                                    End If
                                Else
                                    'result(0)("PckgSize") = dr("PckgSize")
                                    'result(0)("PckgQty") = "          -"
                                    If dr("ArticleType") = "Single" Then
                                        result(0)("PckgSize") = dr("PckgSize")
                                        Dim resultdel As DataRow() = dsPackagingDelivery.Tables(0).Select("BillLineNo='" + dr("RowIndex").ToString() + "'  and PkgLineNo ='" + dr("PkgLineNo").ToString() + "' and IsHeader=False and status=true")
                                        If resultdel.Length > 0 Then
                                            For Each drr As DataRow In resultdel
                                                drr("PckgSize") = dr("PckgSize")
                                            Next
                                        End If
                                    Else
                                        Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + dr("Discription") + "' and isPackagingMandatory=1")
                                        If resultCombo.Length > 0 Then
                                            result(0)("PckgSize") = "          -"
                                        Else
                                            result(0)("PckgSize") = dr("PckgSize")
                                        End If
                                        '-----update delivery variation pckgqty 1.A 1.B
                                        Dim resultdel As DataRow() = dsPackagingDelivery.Tables(0).Select("BillLineNo='" + dr("RowIndex").ToString() + "'  and PkgLineNo ='" + dr("PkgLineNo").ToString() + "' and IsHeader=False and status=true")
                                        If resultdel.Length > 0 Then
                                            For Each drr As DataRow In resultdel
                                                If resultCombo.Length > 0 Then
                                                    drr("PckgSize") = "          -"
                                                Else
                                                    drr("PckgSize") = dr("PckgSize")
                                                End If
                                            Next
                                        End If
                                    End If
                                End If

                            End If
                            
                        End If


                    End If
                End If
            Next
            dsPackagingDelivery.AcceptChanges()

            IsUpdateSuccess = True
            Return True

        Catch ex As Exception
            LogException(ex)
        End Try


    End Function


    Private Sub grdSOItems_BeforeEdit(sender As Object, e As RowColEventArgs) Handles grdSOItems.BeforeEdit
        Try
            Dim CurrentCell As Integer = e.Col
            Dim CurrentRow As Integer = e.Row
            Dim articleType As String = IIf(grdSOItems.Item(CurrentRow, "ArticleType") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "ArticleType"))
            If (grdSOItems.Cols(CurrentCell).Name = "DeliverySiteCode" AndAlso IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode")) = False) OrElse (grdSOItems.Cols(CurrentCell).Name = "PickUpQty" AndAlso IsDBNull(grdSOItems.Item(CurrentRow, "BatchBarcode"))) Then

                e.Cancel = True
            End If
            If (grdSOItems.Cols(CurrentCell).Name = "SellingPrice") Then
                ' Dim articleType As String = IIf(grdSOItems.Item(CurrentRow, "ArticleType") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "ArticleType"))
                If articleType = "Single" Then
                    e.Cancel = True
                End If

            End If
            '------
            If clsDefaultConfiguration.PackageFiedlsAllowed Then
                If (grdSOItems.Cols(CurrentCell).Name = "PckgSize") Then
                    If articleType = "Combo" Then
                        Dim articleName As String = IIf(grdSOItems.Item(CurrentRow, "DISCRIPTION") Is DBNull.Value, 0, grdSOItems.Item(CurrentRow, "DISCRIPTION"))
                        Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + articleName + "' and isPackagingMandatory=1")
                        If resultCombo.Length > 0 Then
                            e.Cancel = True
                        End If
                    Else
                        If grdSOItems.Item(CurrentRow, "UOM") = "NOS" Then
                            e.Cancel = True
                        End If
                    End If
                End If

                If (grdSOItems.Cols(CurrentCell).Name = "PckgQty") Then

                    If articleType = "Combo" Then
                        e.Cancel = True
                    Else
                        If grdSOItems.Item(CurrentRow, "UOM") = "NOS" Then
                            e.Cancel = True
                        End If
                    End If

                End If
            End If
           
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub

    Private Sub dgDeliveryLocation_BeforeEdit(sender As Object, e As RowColEventArgs) Handles dgDeliveryLocation.BeforeEdit
        Try
            Dim CurrentCell As Integer = e.Col
            Dim CurrentRow As Integer = e.Row
            If (dgDeliveryLocation.Cols(CurrentCell).Name = "Quantity") Then
                Dim isHeader As String = IIf(dgDeliveryLocation.Item(CurrentRow, "IsHeader") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "IsHeader"))
                If isHeader = "True" Then
                    e.Cancel = True
                End If

            End If
            If (dgDeliveryLocation.Cols(CurrentCell).Name = "PickUpQty") Then
                Dim deliveredQty As Decimal = IIf(dgDeliveryLocation.Item(CurrentRow, "deliveredQty") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "deliveredQty"))
                Dim orderQty As Decimal = IIf(dgDeliveryLocation.Item(CurrentRow, "Quantity") Is DBNull.Value, 0, dgDeliveryLocation.Item(CurrentRow, "Quantity"))
                If deliveredQty = orderQty Then
                    e.Cancel = True
                End If

            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub

#Region "SO Print"
    Dim drSOPrintHeader As DataRow
    Dim dtHeaderDetails As DataTable
    Dim dtHeaderDetailsChallan As DataTable
    Dim dtOrderDetailsChallan As DataTable
    Dim dtOrderDetails As DataTable
    Dim dtOrderComboDetails As DataTable
    Dim dtPaymentDetails1 As DataTable
    Dim dtPaymentDetails As DataTable
    Dim dtDeliveryDetails As DataTable
    Dim dtRemark As DataTable
    Dim dtAddress As DataTable
    Dim dtStrDetails As DataTable
    Dim dtPickupHistory As DataTable
    Dim dtStrPrint As DataTable
    Dim DtCustDtlForSOPrint As DataTable ' vipin
    Dim DtComboGridData As DataTable 'vipin
    Dim dtArticleWisePaymentDetails As DataTable 'vipin GST TAx changes
    Dim path As String = ""
    Private Function SOPrintHeader(ByRef dtSiteInfo As DataTable, ByRef dtCustDetail As DataTable) As Boolean 'by ketan 
        Try
            Dim deliverydate As String 'delivery date added by ketan when single then date else Multiple 
            dtHeaderDetails = objSoPc.GetSOPrintHeaderTableStruc()
            If dtSiteInfo.Rows.Count > 0 And dtCustDetail.Rows.Count > 0 Then
                dtHeaderDetails.Rows.Clear()
                drSOPrintHeader = dtHeaderDetails.NewRow()
                drSOPrintHeader("CompanyName") = clsDefaultConfiguration.ClientName
                drSOPrintHeader("SiteName") = dtSiteInfo.Rows(0)("SiteOfficialName")
                drSOPrintHeader("Address") = dtSiteInfo.Rows(0)("SiteAddressLn1") + "," + dtSiteInfo.Rows(0)("SiteAddressLn2") + " " + dtSiteInfo.Rows(0)("SiteAddressLn3")
                drSOPrintHeader("City") = dtSiteInfo.Rows(0)("CityCode")
                drSOPrintHeader("PinCode") = dtSiteInfo.Rows(0)("SitePinCode")
                drSOPrintHeader("Contact") = dtSiteInfo.Rows(0)("SiteTelephone1")
                drSOPrintHeader("CustomerName") = dtCustDetail.Rows(0)("CUSTOMERNAME")
                drSOPrintHeader("CustomerCompanyName") = dtCustDetail.Rows(0)("CompanyName")
                drSOPrintHeader("CustomerCellNo") = dtCustDetail.Rows(0)("MOBILENO")
                drSOPrintHeader("CustomerDept") = dtCustDetail.Rows(0)("DepartMent")
                drSOPrintHeader("OtherContacts") = objPCSO.GetClpContactDetails(dtSiteInfo.Rows(0)("SiteCode"), dtCustDetail.Rows(0)("CUSTOMERNO"))
                drSOPrintHeader("EmailId") = dtCustDetail.Rows(0)("Email Address")
                drSOPrintHeader("SalesOrderNo") = CtrlTxtOrderNo.Text
                drSOPrintHeader("OrderDate") = CtrldtOrderDt.Value
                If rdDelYes.Checked Then
                    drSOPrintHeader("DeliveryRequired") = "Yes"
                Else
                    drSOPrintHeader("DeliveryRequired") = "No"
                End If
                For i = 0 To dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count - 1
                    If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows(i)("STATUS") = True Then
                        If Convert.ToDateTime(dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows(0)("DeliveryTime")) = Convert.ToDateTime(dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows(i)("DeliveryTime")) Then
                            deliverydate = dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows(0)("DeliveryTime").ToString()
                            deliverydate = Convert.ToDateTime(deliverydate).ToString("dd-MM-yyyy HH:mm")
                        Else
                            deliverydate = "Multiple"
                            Exit For
                        End If
                    End If
                Next
                drSOPrintHeader("DeliveryDate") = deliverydate
                drSOPrintHeader("FooterMassage") = "This is computer generated invoice"
                drSOPrintHeader("GeneratedDate") = DateTime.Now
                drSOPrintHeader("TillNo") = clsAdmin.TerminalID
                drSOPrintHeader("BookedBy") = IIf(CtrlSalesPerson.CtrlSalesPersons.SelectedIndex < 0, clsAdmin.UserName, CtrlSalesPerson.CtrlSalesPersons.Text)
                drSOPrintHeader("CHSN") = dtCustDetail.Rows(0)("CHSN")
                drSOPrintHeader("LocalSalesTaxNo") = dtSiteInfo.Rows(0)("LocalSalesTaxNo")
                dtHeaderDetails.Rows.Add(drSOPrintHeader)
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function
    '' added by ketan SO return Changes 
    Dim dtReturnOrderComboDtl As DataTable
    Public Function SOPrintReturnOrderComboDetails() As DataTable
        Try
            dtReturnOrderComboDtl = objSoPc.GetSOPrintOrderDetailsTableStruc()
            dtReturnOrderComboDtl.Rows.Clear()
            Return dtReturnOrderComboDtl
        Catch ex As Exception
        End Try
    End Function
    Private Function SOPrintOrderDetails() As Boolean 'by ketan 
        Try
            Dim a = dsPackagingDelivery
            dtOrderDetails = objSoPc.GetSOPrintOrderDetailsTableStruc()
            dtOrderDetails.Rows.Clear()
            Dim i As Integer = 1
            If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count > 0 Then
                For Each dr As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("Status=True", "BillLineNo")
                    Dim drResult As DataRow() = dsMain.Tables("SOitemPackagingBoxDtl").Select("pkgLineNo='" + dr("pkgLineNo").ToString + "'")
                    Dim drpickupQty As DataRow() = (dsPackagingDelivery.Tables(0)).Select("DeliverylineNo='" + dr("DeliverylineNo").ToString + "'")
                    drSOPrintHeader = dtOrderDetails.NewRow()
                    drSOPrintHeader("BillLineNo") = dr("BillLineNo")
                    Dim drSrNo As DataRow() = dtOrderDetails.Select("BillLineNo='" + dr("BillLineNo").ToString + "'")
                    If drSrNo.Length = 0 Then
                        drSOPrintHeader("SrNo") = i
                    Else
                        i = i - 1
                        drSOPrintHeader("SrNo") = i & "." & drSrNo.Length
                    End If
                    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & dr("BillLineNo") & "'")
                    If discription.Length > 0 Then
                        drSOPrintHeader("ArticleDescription") = discription(0)("PackagingBoxName")
                    Else
                        drSOPrintHeader("ArticleDescription") = clsCommon.GetArticleFullName(dr("ArticleCode")).ToString()
                    End If
                    drSOPrintHeader("Quantity") = dr("Quantity")
                    drSOPrintHeader("UnitofMeasure") = dr("UnitOfMeasure")
                    drSOPrintHeader("Price") = drResult(0)("SellingPrice")
                    drSOPrintHeader("Total") = drResult(0)("SellingPrice") * dr("Quantity")
                    'drSOPrintHeader("PckgSize") = drResult(0)("PckgSize")
                    If clsDefaultConfiguration.PackageFiedlsAllowed = True AndAlso discription.Length > 0 Then
                        Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + discription(0)("PackagingBoxName") + "' and isPackagingMandatory=1")
                        If resultCombo.Length > 0 Then
                            drSOPrintHeader("Pckgsize") = 0
                        Else
                            drSOPrintHeader("Pckgsize") = drResult(0)("Pckgsize")
                        End If
                    Else
                        drSOPrintHeader("Pckgsize") = drResult(0)("Pckgsize")
                    End If
                    If drResult(0)("PckgSize") = 0 Then
                        drSOPrintHeader("PckgQty") = 0
                    Else
                        drSOPrintHeader("PckgQty") = dr("Quantity") / drResult(0)("PckgSize")
                        If clsDefaultConfiguration.PackageFiedlsAllowed = True AndAlso drResult(0)("UnitOfMeasure") = "NOS" AndAlso drResult(0)("IsCombo") = True Then
                            drSOPrintHeader("PckgQty") = 0
                        End If
                    End If

                    drSOPrintHeader("PckgType") = drResult(0)("PckgType")
                    drSOPrintHeader("PickupQuantity") = dr("DeliveredQty")
                    drSOPrintHeader("IsCombo") = dr("IsCombo")
                    drSOPrintHeader("header") = 1
                    drSOPrintHeader("PackagingMaterial") = drResult(0)("pckgMaterial")
                    dtOrderDetails.Rows.Add(drSOPrintHeader)
                    i = i + 1
                Next
            End If
        Catch ex As Exception

        End Try

    End Function
    Private Function soprintarticlepaymentwisedetails() As Boolean 'by ketan 
        Try
            Dim a = dspackagingdelivery
            dtArticleWisePaymentDetails = objSoPc.GetSOPrintArticleWisePaymentTableStruc()
            dtArticleWisePaymentDetails.Rows.Clear()
            Dim otherCharges As Double
            If dsMain.Tables("SalesOrderOtherCharges").Rows.Count() > 0 Then
                otherCharges = dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(ChargeAmount)", "")
            End If
            dtarticlewisepaymentdetails.rows.clear()
            Dim i As Integer = 1
            If dsMain.Tables("sopackagingboxdeliverydtl").Rows.Count > 0 Then
                For Each dr As DataRow In dsMain.Tables("sopackagingboxdeliverydtl").Select("status=true", "billlineno")
                    Dim drresult As DataRow() = dsMain.Tables("soitempackagingboxdtl").Select("pkglineno='" + dr("pkglineno").ToString + "' and status=true")
                    Dim drpickupqty As DataRow() = (dsPackagingDelivery.Tables(0)).Select("deliverylineno='" + dr("deliverylineno").ToString + "'")
                    Dim drdisc As DataRow() = dsMain.Tables("sopackagingdiscdtl").Select("pkglineno='" + dr("pkglineno").ToString + "' and status=true")
                    '    Dim drtax As DataRow() = dsMain.Tables("salesordertaxdtls").Select("packagingindex='" + dr("pkglineno").ToString + "' and status=true")
                    Dim DsPackVar As DataRow() = _dsPackagingVar.Tables(0).Select("pkglineno='" + dr("pkglineno").ToString + "'")
                    Dim DrDiscDtl As DataRow() = dtPickUpDiscGrid.Select("pkglineno='" + dr("pkglineno").ToString + "'")
                    'Dim dttx As datatable
                    'If drtax.length > 0 Then
                    '    Dim taxtlabel As String = String.empty
                    '    For index = 0 To drtax.length - 1
                    '        taxtlabel = taxtlabel & ",'" & drtax(index)("taxlabel").tostring & "'"

                    '    Next
                    '    taxtlabel = taxtlabel.substring(1, taxtlabel.length - 1)
                    '    dttx = clscommon.getarticlegsttax(taxtlabel)
                    'End If

                    drSOPrintHeader = dtArticleWisePaymentDetails.NewRow()
                    drSOPrintHeader("billlineno") = dr("billlineno")
                    Dim drsrno As DataRow() = dtArticleWisePaymentDetails.Select("billlineno='" + dr("billlineno").ToString + "'")
                    If drsrno.Length = 0 Then
                        drSOPrintHeader("srno") = i
                    Else
                        i = i - 1
                        drSOPrintHeader("srno") = i & "." & drsrno.Length
                    End If
                    Dim discription = dsMain.Tables("salesorderbulkcombohdr").Select("combosrno='" & dr("billlineno") & "'")
                    If discription.Length > 0 Then
                        drSOPrintHeader("articledescription") = discription(0)("packagingboxname")
                    Else
                        drSOPrintHeader("articledescription") = clsCommon.GetArticleFullName(dr("articlecode")).ToString()
                    End If
                    drSOPrintHeader("quantity") = dr("quantity")
                    drSOPrintHeader("price") = drresult(0)("sellingprice")
                    drSOPrintHeader("netamt") = drresult(0)("sellingprice") * dr("quantity")
                    drSOPrintHeader("othercharges") = otherCharges
                    '       If drdisc.Length > 0 Then

                    If CDbl(CtrllblDiscAmt.Text) <> 0 AndAlso drresult(0)("discountamount") = 0 Then
                        If DrDiscDtl.Length > 0 Then
                            drresult(0)("discountamount") = DrDiscDtl(0)("DiscountAmount")
                        Else
                            drresult(0)("discountamount") = 0
                        End If
                    End If
                    If drresult.Length > 0 Then
                        drSOPrintHeader("discount") = ((drresult(0)("discountamount") / DsPackVar(0)("Quantity")) * dr("quantity"))  'vipin 
                        If drresult(0)("discountamount") = 0 Then 'vipin
                            drSOPrintHeader("discountper") = Math.Round(0, 2)
                        Else
                            drSOPrintHeader("discountper") = (((drresult(0)("discountamount") / DsPackVar(0)("Quantity")) * dr("quantity")) * 100) / (drresult(0)("sellingprice") * dr("quantity")) 'Math.Round((drresult(0)("discountamount") / CDbl(CtrllblDiscAmt.Text)) * 100, 2) 'vipin
                        End If
                        drSOPrintHeader("taxableamount") = (drresult(0)("sellingprice") * dr("quantity")) - ((drresult(0)("discountamount") / DsPackVar(0)("Quantity")) * dr("quantity"))
                    Else
                        drSOPrintHeader("discount") = 0
                        drSOPrintHeader("discountper") = 0
                        drSOPrintHeader("taxableamount") = (drresult(0)("sellingprice") * dr("quantity"))
                    End If


                    'If Not dttx Is Nothing AndAlso dttx.Rows.Count > 0 Then
                    '    Dim drcgsttax As DataRow() = dttx.Select("taxname='cgst'")
                    '    Dim drsgsttax As DataRow() = dttx.Select("taxname='sgst'")

                    '    drSOPrintHeader("cgst") = drcgsttax(0)("value")
                    '    drSOPrintHeader("sgst") = drsgsttax(0)("value")

                    '    drSOPrintHeader("cgstvalue") = drSOPrintHeader("taxableamount") * (drcgsttax(0)("value") / 100)
                    '    drSOPrintHeader("sgstvalue") = drSOPrintHeader("taxableamount") * (drsgsttax(0)("value") / 100)

                    'Else
                    '    drSOPrintHeader("cgst") = 0
                    '    drSOPrintHeader("sgst") = 0
                    '    drSOPrintHeader("cgstvalue") = 0
                    '    drSOPrintHeader("sgstvalue") = 0
                    'End If

                    'added by vipin
                    '' change By ketan Issue In Print SO Tax Invoice
                    'drSOPrintHeader("cgstvalue") = DsPackVar(0)("TotalTaxAmount") / 2
                    'drSOPrintHeader("sgstvalue") = DsPackVar(0)("TotalTaxAmount") / 2
                    drSOPrintHeader("cgstvalue") = ((DsPackVar(0)("TotalTaxAmount") / DsPackVar(0)("Quantity")) * dr("quantity")) / 2 ' DsPackVar(0)("TotalTaxAmount") / 2
                    drSOPrintHeader("sgstvalue") = ((DsPackVar(0)("TotalTaxAmount") / DsPackVar(0)("Quantity")) * dr("quantity")) / 2 ' DsPackVar(0)("TotalTaxAmount") / 2

                    drSOPrintHeader("cgst") = (drSOPrintHeader("cgstvalue") / drSOPrintHeader("taxableamount")) * 100
                    drSOPrintHeader("sgst") = (drSOPrintHeader("sgstvalue") / drSOPrintHeader("taxableamount")) * 100


                    drSOPrintHeader("grossamt") = drSOPrintHeader("taxableamount") + drSOPrintHeader("cgstvalue") + drSOPrintHeader("sgstvalue")
                    ' drSOPrintHeader("hsncode") = objComn.GetHSNbyArticle(dr("articlecode"))
                    If dr("IsCombo") = True Then  'vipin to hide HSN in case of combo
                        drSOPrintHeader("hsncode") = ""
                        drSOPrintHeader("IsCombo") = "Y"
                    Else
                        drSOPrintHeader("hsncode") = objComn.GetHSNbyArticle(dr("articlecode"))
                        drSOPrintHeader("IsCombo") = "N"
                    End If
                    'drSOPrintHeader("hsncode") = objComn.GetHSNbyArticle(dr("articlecode"))
                    dtArticleWisePaymentDetails.Rows.Add(drSOPrintHeader)
                    i = i + 1
                Next
            End If
        Catch ex As Exception

        End Try

    End Function

    Private Function SOPrintOrderComboDetails() As Boolean 'by ketan 
        Try
            dtOrderComboDetails = objSoPc.GetSOPrintOrderDetailsTableStruc()
            dtOrderComboDetails.Rows.Clear()
            Dim i As Long = 1
            If dsMain.Tables("SalesOrderBulkComboDtl").Rows.Count > 0 Then
                Dim DtComboDtlForSoPrint As DataTable = objComn.GetComboDtlForSoPrint(dsMain.Tables("SalesOrderBulkComboDtl").Rows(0)("SaleOrderNumber").ToString())
                For Each dr As DataRow In dsMain.Tables("SalesOrderBulkComboDtl").Select("Status=True", "ComboSrNo")

                Next
                For Each dr As DataRow In DtComboDtlForSoPrint.Rows
                    drSOPrintHeader = dtOrderComboDetails.NewRow()
                    'Dim drSrNo As DataRow() = dtOrderComboDetails.Select("BillLineNo='" + dr("ComboSrNo").ToString + "'")
                    ' If drSrNo.Length = 0 Then
                    '    drSOPrintHeader("SrNo") = i
                    'Else
                    '    i = i - 1
                    '    drSOPrintHeader("SrNo") = i & "." & drSrNo.Length
                    'End If
                    Dim NewSrNo As String = ""
                    Dim TemGetSrNo As DataRow() = dtOrderDetails.Select("BillLineNo='" + dr("ComboSrNo") + "' And IsCombo=True", "")
                    If TemGetSrNo.Length > 0 Then
                        ' 
                        If TemGetSrNo(0)("SrNo").Contains(".") Then
                            NewSrNo = TemGetSrNo(0)("SrNo").Substring(0, 1)
                        Else
                            NewSrNo = TemGetSrNo(0)("SrNo")
                        End If
                    End If
                    '  drSOPrintHeader("SrNo") = dr("ComboSrNo")
                    drSOPrintHeader("SrNo") = NewSrNo  'vipin 22.02.2018_3.42PM
                    drSOPrintHeader("BillLineNo") = dr("ComboSrNo")
                    drSOPrintHeader("ArticleDescription") = dr("Combo1")
                    drSOPrintHeader("PckgType") = dr("Combo2")
                    drSOPrintHeader("PackagingMaterial") = dr("Combo3")
                    drSOPrintHeader("HSN") = dr("Combo4")

                    drSOPrintHeader("Price") = 0
                    drSOPrintHeader("Total") = 0
                    drSOPrintHeader("PckgSize") = 0
                    drSOPrintHeader("PckgQty") = 0
                    drSOPrintHeader("IsCombo") = 1
                    drSOPrintHeader("header") = 0

                    'drSOPrintHeader("HSN") = objComn.GetHSNbyArticle(dr("ArticleCode"))    'vipin 27/07/2017 GST
                    dtOrderComboDetails.Rows.Add(drSOPrintHeader)
                    i = i + 1
                Next
            End If
        Catch ex As Exception

        End Try
        dtOrderComboDetails.Merge(dtOrderDetails)
        If dtOrderComboDetails.Rows.Count > 0 Then
            dtOrderComboDetails = dtOrderComboDetails.Select("", "BillLineNo").CopyToDataTable()
        End If
        dtOrderComboDetails.AcceptChanges()
    End Function
    Private Function SOPrintPaymentDetails1() As Boolean 'by ketan 
        Try
            'dsInvoice()
            Dim st As Double
            Dim crdsaleadjustamount As Double = 0
            ' Dim TaxAmount As Double = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "")), 2) + Math.Round(IIf(dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(TaxValue)", "IsDocumentLevel=1 and status=1") Is DBNull.Value, 0, dsMain.Tables("SalesOrderTaxDtls").Compute("SUM(taxValue)", "IsDocumentLevel=1 and status=1")), 2)
            '      Dim TaxAmount As Double = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "")), 2)
            Dim TaxAmount As Double = FormatNumber(CDbl(dsPackagingVar.Tables("PackagingMaterial").Compute("Sum(TotalTaxAmount)", "IsStatus<>'Deleted'")), 2)
            Dim dtCreditSaleData As New DataTable
            Dim objclsReturn As New clsCashMemoReturn
            dtCreditSaleData = objclsReturn.getCreditSaleBillData("'" + CtrlTxtOrderNo.Text + "'")
            If dtCreditSaleData.Rows.Count > 0 AndAlso Not dtCreditSaleData Is Nothing Then
                For Each y In dtCreditSaleData.Rows
                    st += y("CreditSaleAdjustment")
                Next
            End If
            Dim otherCharges As Double
            If dsMain.Tables("SalesOrderOtherCharges").Rows.Count() > 0 Then
                otherCharges = dsMain.Tables("SalesOrderOtherCharges").Compute("Sum(ChargeAmount)", "")
            End If
            dtPaymentDetails1 = objSoPc.GetSOPrintPaymenytDetails1TableStruc()
            dtPaymentDetails1.Rows.Clear()
            If dsMain.Tables("SalesOrderHdr").Rows.Count > 0 Then
                For Each dr As DataRow In dsMain.Tables("SalesOrderHdr").Select("Status=True")
                    drSOPrintHeader = dtPaymentDetails1.NewRow()
                    drSOPrintHeader("GrossAmt") = dr("GrossAmt")
                    drSOPrintHeader("Discount") = dr("TotalDiscount")
                    drSOPrintHeader("Tax") = TaxAmount
                    drSOPrintHeader("OtherCharges") = otherCharges
                    drSOPrintHeader("NetAmt") = dr("NetAmt")
                    'drSOPrintHeader("paidAmt") = dr("AdvanceAmt")
                    'drSOPrintHeader("BalAmt") = dr("NetAmt") - dr("AdvanceAmt")
                    drSOPrintHeader("paidAmt") = dr("AdvanceAmt") - IIf(dsInvoice.Tables(0).Compute("Sum(InvoiceAmt)", "Tendertype='Credit'") Is DBNull.Value, 0, dsInvoice.Tables(0).Compute("Sum(InvoiceAmt)", "Tendertype='Credit'")) '+ st
                    drSOPrintHeader("BalAmt") = dr("NetAmt") - dr("AdvanceAmt") + IIf(dsInvoice.Tables(0).Compute("Sum(InvoiceAmt)", "Tendertype='Credit'") Is DBNull.Value, 0, dsInvoice.Tables(0).Compute("Sum(InvoiceAmt)", "Tendertype='Credit'")) '- st
                    dtPaymentDetails1.Rows.Add(drSOPrintHeader)
                Next
            End If
        Catch ex As Exception

        End Try

    End Function
    Private Function SOPrintPaymentDetails() As Boolean 'by ketan 
        Try
            dtPaymentDetails = objSoPc.GetSOPrintPaymenytDetailsTableStruc()
            dtPaymentDetails.Rows.Clear()
             
            dsInvoice = objPCSO.SetInvoiceInSOCancel(vSiteCode, IIf(vSalesNo = String.Empty, 0, vSalesNo))
            If dsInvoice.Tables(0).Rows.Count > 0 Then
                For Each dr As DataRow In dsInvoice.Tables(0).Rows
                    drSOPrintHeader = dtPaymentDetails.NewRow()
                    drSOPrintHeader("Till") = dr("TerminalID")
                    '' dr("UserName") Updated by ketan CashierName 
                    drSOPrintHeader("CashierName") = dr("UserName")
                    drSOPrintHeader("InvoiceNo") = dr("InvoiceNo")
                    drSOPrintHeader("PymentDateAndTime") = dr("InvoiceDate")
                    drSOPrintHeader("Tender") = dr("TenderType")
                    drSOPrintHeader("Amt") = dr("InvoiceAmt")
                    dtPaymentDetails.Rows.Add(drSOPrintHeader)
                Next
            End If
        Catch ex As Exception

        End Try

    End Function
    Private Function SOPrintPickupHistory() As Boolean 'by ketan 
        Try
            dtPickupHistory = objSoPc.GetSOPrintPickupHistoryTableStruc()
            dtPickupHistory.Rows.Clear()
            If _pickupHistory.Tables("PickupHistory").Rows.Count > 0 Then
                For Each dr As DataRow In _pickupHistory.Tables("PickupHistory").Rows
                    drSOPrintHeader = dtPickupHistory.NewRow()
                    Dim drResult As DataRow() = dsMain.Tables("SOitemPackagingBoxDtl").Select("pkgLineNo='" + dr("PkgLineNo").ToString + "'")
                    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & dr("BillLineNo") & "'")
                    If discription.Length > 0 Then
                        drSOPrintHeader("Orders") = discription(0)("PackagingBoxName")
                    Else
                        drSOPrintHeader("Orders") = clsCommon.GetArticleFullName(dr("Orders")).ToString
                    End If
                    drSOPrintHeader("Orderqty") = dr("Orderqty")
                    'drSOPrintHeader("Pckgsize") = dr("Pckgsize")
                    If clsDefaultConfiguration.PackageFiedlsAllowed = True AndAlso discription.Length > 0 Then
                        Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + discription(0)("PackagingBoxName") + "' and isPackagingMandatory=1")
                        If resultCombo.Length > 0 Then
                            drSOPrintHeader("Pckgsize") = 0
                        Else
                            drSOPrintHeader("Pckgsize") = dr("Pckgsize")
                        End If
                    Else
                        drSOPrintHeader("Pckgsize") = dr("Pckgsize")
                    End If
                    If clsDefaultConfiguration.PackageFiedlsAllowed = True AndAlso drResult(0)("UnitOfMeasure") = "NOS" AndAlso drResult(0)("IsCombo") = True Then
                        drSOPrintHeader("PckgQty") = 0
                    Else
                        drSOPrintHeader("PckgQty") = dr("PckgQty")
                    End If
                    drSOPrintHeader("PckgType") = dr("PckgType")
                    drSOPrintHeader("DeliveryDate") = dr("DeliveryDate")
                    drSOPrintHeader("DeliveryTime") = DateTime.Now
                    drSOPrintHeader("pickupQty") = dr("pickupQty")
                    drSOPrintHeader("PendingQty") = dr("PendingQty")
                    dtPickupHistory.Rows.Add(drSOPrintHeader)
                Next
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    Private Function SOPrintDeliveryDetails() As Boolean 'by ketan 
        Try

            dtDeliveryDetails = objSoPc.GetSOPrintDeliveryDetailsTableStruc()
            dtDeliveryDetails.Rows.Clear()
            Dim i As Long = 1
            If dsMain.Tables("SOItemPackagingBoxDtl").Rows.Count > 0 Then
                '  For Each dr As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("Status =True", "BillLineNo") 'vipin 21.02.2018  Print Go Wrong
                For Each dr As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("Status =True", "BillLineNo,SrNo")
                    'Dim drResult As DataRow() = dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("pkglineNo='" + dr("pkglineNo").ToString + "'")
                    drSOPrintHeader = dtDeliveryDetails.NewRow()
                    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & dr("BillLineNo") & "'")
                    If discription.Length > 0 Then
                        drSOPrintHeader("Orders") = discription(0)("PackagingBoxName")
                    Else
                        drSOPrintHeader("Orders") = clsCommon.GetArticleFullName(dr("ArticleCode")).ToString
                    End If
                    drSOPrintHeader("Orderqty") = dr("Quantity")
                    Dim drResult As DataRow() = dsMain.Tables("SOItemPackagingBoxDtl").Select("pkglineNo='" + dr("pkglineNo").ToString + "'")
                    'drSOPrintHeader("Pckgsize") = drResult(0)("Pckgsize")
                    drSOPrintHeader("BillLineNo") = dr("BillLineNo")
                    Dim drSrNo As DataRow() = dtDeliveryDetails.Select("BillLineNo='" + dr("BillLineNo").ToString + "'")
                    If drSrNo.Length = 0 Then
                        drSOPrintHeader("SrNo") = i
                    Else
                        i = i - 1
                        drSOPrintHeader("SrNo") = i & "." & drSrNo.Length
                    End If

                    If clsDefaultConfiguration.PackageFiedlsAllowed = True AndAlso discription.Length > 0 Then
                        Dim resultCombo As DataRow() = dtPackagingPrintBox.Select("KeyValue='" + discription(0)("PackagingBoxName") + "' and isPackagingMandatory=1")
                        If resultCombo.Length > 0 Then
                            drSOPrintHeader("Pckgsize") = 0
                        Else
                            drSOPrintHeader("Pckgsize") = drResult(0)("Pckgsize")
                        End If
                    Else
                        drSOPrintHeader("Pckgsize") = drResult(0)("Pckgsize")
                    End If
                    If drResult(0)("PckgSize") = 0 Then
                        drSOPrintHeader("PckgQty") = 0
                    Else
                        drSOPrintHeader("PckgQty") = dr("Quantity") / drResult(0)("PckgSize")
                        If clsDefaultConfiguration.PackageFiedlsAllowed = True AndAlso drResult(0)("UnitOfMeasure") = "NOS" AndAlso drResult(0)("IsCombo") = True Then
                            drSOPrintHeader("PckgQty") = 0
                        End If
                    End If
                    drSOPrintHeader("PckgType") = drResult(0)("PckgType")
                    Dim drAddress As DataRow() = dtTempOrderAddresses.Select("AddressKey='" & dr("DeliveryAddress") & "'")
                    If drAddress.Length = 0 Then
                        drSOPrintHeader("DeliveryAddress") = "-"
                    Else
                        drSOPrintHeader("DeliveryAddress") = drAddress(0)("AddressValue")
                    End If
                    drSOPrintHeader("DeliveryDate") = dr("DeliveryDate")
                    drSOPrintHeader("DeliveryTime") = dr("DeliveryTime")
                    drSOPrintHeader("pickupQty") = dr("DeliveredQty")
                    drSOPrintHeader("PendingQty") = dr("Quantity") - dr("DeliveredQty")
                    dtDeliveryDetails.Rows.Add(drSOPrintHeader)
                    i = i + 1
                Next
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function
    Private Function SOStrDetails() As Boolean 'by ketan 
        Try
            dtStrDetails = objSoPc.GetStrDetailsTableStruc()
            dtStrDetails.Rows.Clear()
            If dtStrPrint.Rows.Count > 0 Then
                For Each dr As DataRow In dtStrPrint.Rows
                    drSOPrintHeader = dtStrDetails.NewRow()
                    Dim STRRaised As String = dr("IsSTRRaised")
                    If STRRaised = True Then
                        drSOPrintHeader("STRRaised") = "Yes"
                    Else
                        drSOPrintHeader("STRRaised") = "No"
                    End If
                    drSOPrintHeader("STRRequestedfromSite") = dr("Requested")
                    drSOPrintHeader("STRNo") = dr("STRNo")
                    drSOPrintHeader("STRDeliveryDate") = dr("StrDate")
                    drSOPrintHeader("STRDeliveryTime") = dr("StrTime") '.ToString().Substring(0, dr("StrTime").ToString().Length - 1)
                    drSOPrintHeader("CREATEDON") = dr("GeneratedOn")
                    drSOPrintHeader("CREATEDBY") = dr("GeneratedBy")
                    dtStrDetails.Rows.Add(drSOPrintHeader)
                Next
            End If

        Catch ex As Exception
            LogException(ex)
        End Try

    End Function
    Private Function GetSOPrintAddress() As Boolean 'by ketan 
        'Try
        '    dtAddress = objSoPc.GetSOPrintAddressTableStruc()
        '    dtAddress.Rows.Clear()
        '    If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count > 0 Then
        '        For Each dr As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows
        '            Dim drAddress As DataRow() = dtOrderAddresses.Select("AddressKey='" & dr("DeliveryAddress") & "'")
        '            drSOPrintHeader = dtAddress.NewRow()
        '            drSOPrintHeader("Address") = drAddress(0)("AddressValue")
        '            dtAddress.Rows.Add(drSOPrintHeader)
        '        Next
        '    End If
        Try
            dtAddress = objSoPc.GetSOPrintAddressTableStruc()
            dtAddress.Rows.Clear()
            If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count > 0 Then
                For Each dr As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("Status=True", "BillLineNo")
                    Dim drAddress As DataRow() = dtTempOrderAddresses.Select("AddressKey='" & dr("DeliveryAddress") & "'")
                    drSOPrintHeader = dtAddress.NewRow()
                    If drAddress.Length > 0 Then
                        drSOPrintHeader("Address") = drAddress(0)("AddressValue")
                    End If
                    dtAddress.Rows.Add(drSOPrintHeader)
                Next
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function

    Private Function SOPrintRemarks() As Boolean 'by ketan 
        Try
            If dsMain.Tables("SalesOrderdtl").Rows.Count > 0 Then
                dtRemark = objSoPc.GetSOPrintRemarksTableStruc()
                dtRemark.Rows.Clear()
                For Each dr As DataRow In dsMain.Tables("SalesOrderdtl").Select("Status=True", "BillLineNo")
                    drSOPrintHeader = dtRemark.NewRow()
                    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & dr("BillLineNo") & "'")
                    If discription.Length > 0 Then
                        drSOPrintHeader("ArticleShortName") = discription(0)("PackagingBoxName")
                    Else
                        drSOPrintHeader("ArticleShortName") = clsCommon.GetArticleFullName(dr("ArticleCode")).ToString()
                    End If
                    drSOPrintHeader("Remarks") = dr("Remarks")
                    drSOPrintHeader("BillLineNo") = dr("BillLineNo")
                    If dr("Remarks") <> "" Then
                        dtRemark.Rows.Add(drSOPrintHeader)
                    End If
                Next
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function
    ''' <summary>
    ''' Invoice and Delivery Challan Header                     
    ''' </summary>
    ''' <param name="dtSiteInfo"></param>
    ''' <param name="dtCustDetail"></param>
    ''' <returns>Boolean</returns>
    ''' <remarks></remarks>
    Private Function SOPrintInvoiceChallanHeader(ByRef dtSiteInfo As DataTable, ByRef dtCustDetail As DataTable) As Boolean
        Try
            Dim deliverydate As String
            Dim PymnetTerm As String = ""
            dtHeaderDetailsChallan = objSoPc.GetSOPrintInvoiceDeliveryChallanHeaderTableStruc()
            dtHeaderDetailsChallan.Rows.Clear()
            If dtSiteInfo.Rows.Count > 0 And dtCustDetail.Rows.Count > 0 Then
                drSOPrintHeader = dtHeaderDetailsChallan.NewRow()
                If dsMain.Tables("SalesInvoice").Rows.Count > 0 Then
                    For Each dr As DataRow In dsMain.Tables("SalesInvoice").Rows
                        drSOPrintHeader("InvoiceNo") = dr("SaleInvNumber")
                        drSOPrintHeader("InvoiceDate") = dr("SOInvTime")
                        drSOPrintHeader("TotalSum") = dr("AmountTendered")
                    Next
                End If
                If dsMain.Tables("SaleOrderTermNConditions").Rows.Count > 0 Then
                    Dim drInvCnt() = dsMain.Tables("SaleOrderTermNConditions").Select("RefInvNumber='" & dsMain.Tables("SalesInvoice").Rows(0)("SaleInvNumber") & "'")
                    If drInvCnt.Count > 0 Then
                        PymnetTerm = objPCSO.GetPaymentTermName(drInvCnt(0)("TnCcode")).ToString
                        drSOPrintHeader("ModeOfPayment") = PymnetTerm
                    Else
                        drSOPrintHeader("ModeOfPayment") = " - "
                    End If
                Else
                    drSOPrintHeader("ModeOfPayment") = " - "
                End If
                drSOPrintHeader("ClientName") = clsDefaultConfiguration.ClientName
                drSOPrintHeader("ClientAddress") = dtSiteInfo.Rows(0)("SiteAddressLn1") + "," + dtSiteInfo.Rows(0)("SiteAddressLn2") + " " + dtSiteInfo.Rows(0)("SiteAddressLn3") + "," + dtSiteInfo.Rows(0)("CityCode") + "-" + dtSiteInfo.Rows(0)("SitePinCode") + ", " + dtSiteInfo.Rows(0)("StateCode")
                drSOPrintHeader("ClientPhoneNo") = dtSiteInfo.Rows(0)("SiteTelephone1")
                drSOPrintHeader("Consignee") = dtCustDetail.Rows(0)("CUSTOMERNAME")
                drSOPrintHeader("ConsigneeAddress") = dtCustDetail.Rows(0)("ADDRESS") + "," + dtCustDetail.Rows(0)("City") + "," + dtCustDetail.Rows(0)("Pincode") + "," + dtCustDetail.Rows(0)("State") + "," + dtCustDetail.Rows(0)("Country")
                drSOPrintHeader("ConsigneePhoneNo") = dtCustDetail.Rows(0)("MobileNo")
                drSOPrintHeader("CurrencySymbol") = clsAdmin.CurrencySymbol
                drSOPrintHeader("AmountinWords") = AmtInWord(drSOPrintHeader("TotalSum"), clsAdmin.CurrencyCode, clsAdmin.CurrencyDescription)
                Dim Promoid = ""
                Dim taxid = ""
                If dsMain.Tables("SalesOrderTaxdtls").Rows.Count > 0 Then
                    taxid = dsMain.Tables("SalesOrderTaxdtls").Rows(0)("TaxLabel").ToString
                End If
                If Not dsMain.Tables("SalesDiscDtl") Is Nothing AndAlso dsMain.Tables("SalesDiscDtl").Rows.Count > 0 Then
                    Promoid = dsMain.Tables("SalesDiscDtl").Rows(0)("Promotionid").ToString
                End If

                Dim ds = objPCSO.GetSOPrintTaxDiscDtls(Promoid, taxid)
                If Not dsMain.Tables("SalesOrderTaxdtls") Is Nothing AndAlso dsMain.Tables("SalesOrderTaxdtls").Rows.Count > 0 Then
                    drSOPrintHeader("TaxName") = ds.Tables("msttax").Rows(0)("TaxName").ToString
                End If
                If Not dsMain.Tables("SalesDiscDtl") Is Nothing AndAlso dsMain.Tables("SalesDiscDtl").Rows.Count > 0 Then
                    drSOPrintHeader("DiscountName") = ds.Tables("Promotions").Rows(0)("OfferName").ToString
                End If
                Dim newdisc As Double = 0
                For Each dr1 As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("DeliveredQty>0", "BillLineNo")
                    Dim drResultDisc As DataRow() = dsMain.Tables("SOPackagingDiscDtl").Select("pkgLineNo='" + dr1("pkgLineNo").ToString + "'")
                    Dim ss As Double = 0
                    If drResultDisc.Count > 0 Then
                        ss = drResultDisc(0)("DiscountAmount")
                    End If
                    newdisc = newdisc + ss
                Next
                drSOPrintHeader("Discount") = IIf(newdisc = 0, String.Empty, newdisc)

                Dim newtax As Double = 0
                For Each drnew As DataRow In dsMain.Tables("SOPackagingBoxDeliveryDtl").Select("DeliveredQty>0", "BillLineNo")
                    Dim drResultDisc As DataRow() = dsMain.Tables("SOPackagingTaxDtl").Select("pkgLineNo='" + drnew("pkgLineNo").ToString + "'")
                    Dim TaxCalc As Double = 0
                    If drResultDisc.Count > 0 Then
                        TaxCalc = drResultDisc(0)("TaxAmount")
                    End If
                    newtax = newtax + TaxCalc
                Next
                drSOPrintHeader("Tax") = FormatNumber(newtax, 2)
                dtHeaderDetailsChallan.Rows.Add(drSOPrintHeader)
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function
    ''' <summary>
    ''' Invoice and Delivery Challan Details Information
    ''' </summary>
    ''' <returns>Boolean</returns>
    ''' <remarks></remarks>
    Private Function SOPrintInvoiceChallan() As Boolean
        Try

            dtOrderDetailsChallan = objSoPc.GetSOPrintInvoiceDeliveryChallanTableStruc()
            dtOrderDetailsChallan.Rows.Clear()
            If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count > 0 Then
                For Each dr As DataRow In dsPackagingDelivery.Tables(0).Select("PickUpQty>0", "BillLineNo")
                    Dim drResult As DataRow() = dsMain.Tables("SOitemPackagingBoxDtl").Select("pkgLineNo='" + dr("pkgLineNo").ToString + "'")
                    drSOPrintHeader = dtOrderDetailsChallan.NewRow()
                    Dim discription = dsMain.Tables("SalesOrderBulkComboHdr").Select("ComboSrNo='" & dr("BillLineNo") & "'")
                    If discription.Length > 0 Then
                        drSOPrintHeader("ArticleDescription") = discription(0)("PackagingBoxName")
                    Else
                        drSOPrintHeader("ArticleDescription") = clsCommon.GetArticleFullName(dr("ArticleCode")).ToString()
                    End If
                    drSOPrintHeader("Quantity") = dr("PickupQty")
                    drSOPrintHeader("UnitofMeasure") = dr("UnitOfMeasure")
                    drSOPrintHeader("Price") = drResult(0)("SellingPrice")
                    drSOPrintHeader("Total") = drResult(0)("SellingPrice") * dr("PickupQty")
                    dtOrderDetailsChallan.Rows.Add(drSOPrintHeader)
                Next
            End If
        Catch ex As Exception
            LogException(ex)
        End Try

    End Function

    Private Function GenerateSOPrint() As Boolean
        Try
            Dim DtshiftID As DataTable
            If Not dtHeaderDetails Is Nothing AndAlso dtHeaderDetails.Rows.Count > 0 Then
                dtHeaderDetails.Rows(0)("FooterMassage") = "This is computer generated invoice"
            End If
            Dim reportViewer2 As New ReportViewer()
            ' Dim appPath As String = System.IO.Path.Combine(Application.StartupPath, "Reports\SalesOrderPrint.rdl")
            Dim appPath As String
            If clsDefaultConfiguration.ColabaSOPrint Then
                appPath = System.IO.Path.Combine(Application.StartupPath, "Reports\ColabaSOPrint.rdl")
            Else
                appPath = System.IO.Path.Combine(Application.StartupPath, "Reports\SalesOrderPrint.rdl")
            End If
            reportViewer2.LocalReport.ReportPath = appPath

            reportViewer2.ProcessingMode = ProcessingMode.Local
            reportViewer2.LocalReport.DataSources.Clear()
            reportViewer2.LocalReport.SetParameters(New ReportParameter("BarCode", BarCodestring))

            'DtshiftID = clsCommon.GetShiftName(clsAdmin.SiteCode, clsAdmin.DayOpenDate, clsAdmin.TerminalID)

            'dtPaymentDetails.Columns.Add("Shift", GetType(String))
            'If Not DtshiftID Is Nothing AndAlso DtshiftID.Rows.Count > 0 Then
            '    For Each dtPaymentDetails12 In dtPaymentDetails.Rows
            '        dtPaymentDetails12("Shift") = DtshiftID.Rows(0)(0).ToString.Trim
            '    Next
            'End If

            Dim DataSource As New ReportDataSource("DS_SalesOrderPrintHeader", dtHeaderDetails)
            Dim DataSource1 As New ReportDataSource("DS_SalesOrderPrintPaymentDetails", dtPaymentDetails)
            Dim DataSource2 As New ReportDataSource("DS_salesOrderPrintPaymentsDetails1", dtPaymentDetails1)
            Dim DataSource3 As New ReportDataSource("DS_SalesOrderPrintDeliveryDetails", dtDeliveryDetails)
            Dim DataSource4 As New ReportDataSource("DS_SalesOrderPrintRemarks", dtRemark)
            Dim DataSource5 As New ReportDataSource("DS_salesOrderPrintOrderDetails", dtOrderComboDetails)
            Dim DataSource6 As New ReportDataSource("Ds_salesOrderPrintAddress", dtAddress)
            Dim DataSource7 As New ReportDataSource("DS_ArticleWiseGST", dtArticleWisePaymentDetails)
            Dim DataSource8 As New ReportDataSource("DS_salesReturnOrderPrintOrderDetails", dtReturnOrderComboDtl)
            Dim DataSource9 As New ReportDataSource("CustDetail", DtCustDtlForSOPrint)

            reportViewer2.LocalReport.DataSources.Add(DataSource)
            reportViewer2.LocalReport.DataSources.Add(DataSource1)
            reportViewer2.LocalReport.DataSources.Add(DataSource2)
            reportViewer2.LocalReport.DataSources.Add(DataSource3)
            reportViewer2.LocalReport.DataSources.Add(DataSource4)
            reportViewer2.LocalReport.DataSources.Add(DataSource5)
            reportViewer2.LocalReport.DataSources.Add(DataSource6)
            reportViewer2.LocalReport.DataSources.Add(DataSource7)
            reportViewer2.LocalReport.DataSources.Add(DataSource8)
            reportViewer2.LocalReport.DataSources.Add(DataSource9)
            reportViewer2.Refresh()
            Dim mybytes As [Byte]() = reportViewer2.LocalReport.Render("Pdf")
            'Byte[] mybytes = report.Render("PDF"); for exporting to PDF
            Dim obj As New clsCommon
            'path = clsDefaultConfiguration.DayCloseReportPath & "\DayClose_" & request.ToDate & ".pdf"
            'path = clsDefaultConfiguration.DayCloseReportPath & "\SOInvoice_" & DateTime.Now.ToString("dd-MM-yyyy_HH-mm") & ".pdf"
            Dim SOPath As String = clsDefaultConfiguration.DayCloseReportPath 'NEWdtDeliveryDetails, 
            Dim Newpath As String = ""
            Newpath = objPCSO.CreatePathForPrint(dtHeaderDetails, NEWdtDeliveryDetails, SOPath, "SOInvoice", False, False)
            path = Newpath
            Using fs As FileStream = File.Create(path)
                fs.Write(mybytes, 0, mybytes.Length)
            End Using
            If vIsPrintPreviewAllowed = True Then
                Process.Start(path)
            Else
                'Code For Print SO
                PrinterName = SetPrinterName(dtPrinterInfo, "SalesOrder", "SOInvc")
                Dim pdfdocument As New PdfDocument()
                pdfdocument.LoadFromFile(path)
                pdfdocument.PrinterName = PrinterName
                pdfdocument.PrintDocument.PrinterSettings.Copies = 1
                pdfdocument.PrintDocument.Print()
                pdfdocument.Dispose()
            End If

        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    Private Function GenerateOrderPreparationPrint(Optional ByVal consolidated As Boolean = False, Optional ByVal PrintID As Integer = 0) As Boolean
        Try

            If Not dtHeaderDetails Is Nothing AndAlso dtHeaderDetails.Rows.Count > 0 Then
                dtHeaderDetails.Rows(0)("FooterMassage") = "This document is printed "
            End If
            Dim reportViewer2 As New ReportViewer()
            Dim appPath As String = System.IO.Path.Combine(Application.StartupPath, "Reports\SalesOrderPreparation.rdl")
            reportViewer2.LocalReport.ReportPath = appPath

            reportViewer2.ProcessingMode = ProcessingMode.Local
            reportViewer2.LocalReport.DataSources.Clear()
            Dim DataSource As New ReportDataSource("dsSalesPreparationHeader", dtHeaderDetails)
            'Dim DataSource1 As New ReportDataSource("dsSalesPreparationDeliveryDetails", dtDeliveryDetails)
            Dim DataSource1 As New ReportDataSource("dsSalesPreparationDeliveryDetails", NEWdtDeliveryDetails)
            Dim DataSource2 As New ReportDataSource("dsSalesPreparationRemarks", NewdtRemark)
            ' Dim DataSource3 As New ReportDataSource("dsSalesPreparationOrderDetails", dtOrderComboDetails)
            Dim DataSource3 As New ReportDataSource("dsSalesPreparationOrderDetails", NEWdtOrderComboDetails)
            Dim DataSource4 As New ReportDataSource("dsSalesPreparationSTRDetails", dtStrDetails)
            Dim DataSource5 As New ReportDataSource("SdBalToPay", dtPaymentDetails1)
            Dim DataSource6 As New ReportDataSource("Ds_salesOrderPrintAddress", dtAddress)
            Dim DataSource7 As New ReportDataSource("DS_salesReturnOrderPrintOrderDetails", dtReturnOrderComboDtl)
            Dim DataSource8 As New ReportDataSource("CustDetail", DtCustDtlForSOPrint)

            reportViewer2.LocalReport.DataSources.Add(DataSource)
            reportViewer2.LocalReport.DataSources.Add(DataSource1)
            reportViewer2.LocalReport.DataSources.Add(DataSource2)
            reportViewer2.LocalReport.DataSources.Add(DataSource3)
            reportViewer2.LocalReport.DataSources.Add(DataSource4)
            reportViewer2.LocalReport.DataSources.Add(DataSource5)
            reportViewer2.LocalReport.DataSources.Add(DataSource6)
            reportViewer2.LocalReport.DataSources.Add(DataSource7)
            reportViewer2.LocalReport.DataSources.Add(DataSource8)

            reportViewer2.Refresh()
            Dim mybytes As [Byte]() = reportViewer2.LocalReport.Render("Pdf")
            'Byte[] mybytes = report.Render("PDF"); for exporting to PDF
            Dim obj As New clsCommon
            'path = clsDefaultConfiguration.DayCloseReportPath & "\DayClose_" & request.ToDate & ".pdf"
            'path = clsDefaultConfiguration.DayCloseReportPath & "\SOPreparationPrint_" & DateTime.Now.ToString("dd-MM-yyyy_HH-mm") & ".pdf"
            Dim Newpath As String = ""
            Dim SOPath As String = clsDefaultConfiguration.DayCloseReportPath 'NEWdtDeliveryDetails, 
            If consolidated = True Then
                Newpath = objPCSO.CreatePathForPrint(dtHeaderDetails, NEWdtDeliveryDetails, SOPath, "Consolidated-Order_prep", consolidated, True)
            Else
                Newpath = objPCSO.CreatePathForPrint(dtHeaderDetails, NEWdtDeliveryDetails, SOPath, "Order_prep" & PrintID & "", consolidated, True)
            End If
            path = Newpath
            Using fs As FileStream = File.Create(path)
                fs.Write(mybytes, 0, mybytes.Length)
            End Using
            If vIsPrintPreviewAllowed = True Then
                Process.Start(path)
            Else
                'Code For Print SO
                PrinterName = SetPrinterName(dtPrinterInfo, "SalesOrder", "SOInvc")
                Dim pdfdocument As New PdfDocument()
                pdfdocument.LoadFromFile(path)
                pdfdocument.PrinterName = PrinterName
                pdfdocument.PrintDocument.PrinterSettings.Copies = 1
                pdfdocument.PrintDocument.Print()
                pdfdocument.Dispose()
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    Private Function GenerateSoDeliveryPrint() As Boolean
        Try

            If Not dtHeaderDetails Is Nothing AndAlso dtHeaderDetails.Rows.Count > 0 Then
                dtHeaderDetails.Rows(0)("FooterMassage") = "This is computer generated delivery note"
            End If
            Dim reportViewer2 As New ReportViewer()
            Dim appPath As String = System.IO.Path.Combine(Application.StartupPath, "Reports\DeliveryNote.rdl")
            reportViewer2.LocalReport.ReportPath = appPath

            reportViewer2.ProcessingMode = ProcessingMode.Local
            reportViewer2.LocalReport.DataSources.Clear()
            reportViewer2.LocalReport.SetParameters(New ReportParameter("BarCode", BarCodestring))
            Dim DataSource As New ReportDataSource("Header", dtHeaderDetails)
            Dim DataSource1 As New ReportDataSource("PrintDeliveryDetails", dtDeliveryDetails)
            Dim DataSource2 As New ReportDataSource("PaymentDetails", dtPaymentDetails1)
            Dim DataSource3 As New ReportDataSource("PaymentInvoiceDetails", dtPaymentDetails)
            Dim DataSource4 As New ReportDataSource("PickUpHistory", dtPickupHistory)
            Dim DataSource5 As New ReportDataSource("Ds_salesOrderPrintAddress", dtAddress)
            Dim DataSource6 As New ReportDataSource("CustDetail", DtCustDtlForSOPrint)

            reportViewer2.LocalReport.DataSources.Add(DataSource)
            reportViewer2.LocalReport.DataSources.Add(DataSource1)
            reportViewer2.LocalReport.DataSources.Add(DataSource2)
            reportViewer2.LocalReport.DataSources.Add(DataSource3)
            reportViewer2.LocalReport.DataSources.Add(DataSource4)
            reportViewer2.LocalReport.DataSources.Add(DataSource5)
            reportViewer2.LocalReport.DataSources.Add(DataSource6)

            reportViewer2.Refresh()
            Dim mybytes As [Byte]() = reportViewer2.LocalReport.Render("Pdf")
            'Byte[] mybytes = report.Render("PDF"); for exporting to PDF
            Dim obj As New clsCommon
            'path = clsDefaultConfiguration.DayCloseReportPath & "\DayClose_" & request.ToDate & ".pdf"
            'path = clsDefaultConfiguration.DayCloseReportPath & "\SODeliveryNote_" & DateTime.Now.ToString("dd-MM-yyyy_HH-mm") & ".pdf"
            Dim SOPath As String = clsDefaultConfiguration.DayCloseReportPath
            Dim Newpath As String = ""
            Newpath = objSoPc.CreatePathForPrint(dtHeaderDetails, NEWdtDeliveryDetails, SOPath, "SODeliveryNote", False, False)
            path = Newpath
            Using fs As FileStream = File.Create(path)
                fs.Write(mybytes, 0, mybytes.Length)
            End Using
            If vIsPrintPreviewAllowed = True Then
                Process.Start(path)
            Else
                'Code For Print SO
                PrinterName = SetPrinterName(dtPrinterInfo, "SalesOrder", "SOInvc")
                Dim pdfdocument As New PdfDocument()
                pdfdocument.LoadFromFile(path)
                pdfdocument.PrinterName = PrinterName
                pdfdocument.PrintDocument.PrinterSettings.Copies = 1
                pdfdocument.PrintDocument.Print()
                pdfdocument.Dispose()
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Generate Invoice Print
    ''' </summary>
    ''' <returns>Boolean</returns>
    ''' <remarks></remarks>
    Private Function GenerateSoInvoiceChallanPrint() As Boolean
        Try

            Dim reportViewer2 As New ReportViewer()
            Dim appPath As String = System.IO.Path.Combine(Application.StartupPath, "Reports\InvoiceSavoy.rdl")
            reportViewer2.LocalReport.ReportPath = appPath

            reportViewer2.ProcessingMode = ProcessingMode.Local
            reportViewer2.LocalReport.DataSources.Clear()
            Dim DataSource1 As New ReportDataSource("dsInvoiceChallanHeader", dtHeaderDetailsChallan)
            Dim DataSource2 As New ReportDataSource("dsInvoiceChallan", dtOrderDetailsChallan)

            reportViewer2.LocalReport.DataSources.Add(DataSource1)
            reportViewer2.LocalReport.DataSources.Add(DataSource2)
            reportViewer2.Refresh()
            Dim mybytes As [Byte]() = reportViewer2.LocalReport.Render("Pdf")
            Dim obj As New clsCommon
            'path = clsDefaultConfiguration.DayCloseReportPath & "\InvoiceChallan" & DateTime.Now.ToString("dd-MM-yyyy_HH-mm") & ".pdf"
            Dim SOPath As String = clsDefaultConfiguration.DayCloseReportPath 'NEWdtDeliveryDetails, 
            Dim Newpath As String = ""
            Newpath = objPCSO.CreatePathForPrint(dtHeaderDetails, NEWdtDeliveryDetails, SOPath, "SODeliveryNote", False, False)
            path = Newpath
            Using fs As FileStream = File.Create(path)
                fs.Write(mybytes, 0, mybytes.Length)
            End Using

            If vIsPrintPreviewAllowed = True Then
                Process.Start(path)
            Else
                'Code For Print SO
                PrinterName = SetPrinterName(dtPrinterInfo, "SalesOrder", "SOInvc")
                Dim pdfdocument As New PdfDocument()
                pdfdocument.LoadFromFile(path)
                pdfdocument.PrinterName = PrinterName
                pdfdocument.PrintDocument.PrinterSettings.Copies = 1
                pdfdocument.PrintDocument.Print()
                pdfdocument.Dispose()
            End If

        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    ''' <summary>
    ''' Generate Delivery Challan Print
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GenerateSoDeliveryChallanPrint() As Boolean
        Try

            Dim reportViewer2 As New ReportViewer()
            Dim appPath As String = System.IO.Path.Combine(Application.StartupPath, "Reports\DeliveryChallanSavoy.rdl")
            reportViewer2.LocalReport.ReportPath = appPath

            reportViewer2.ProcessingMode = ProcessingMode.Local
            reportViewer2.LocalReport.DataSources.Clear()
            Dim DataSource1 As New ReportDataSource("dsDeliveryChallanHeader", dtHeaderDetailsChallan)
            Dim DataSource2 As New ReportDataSource("dsDeliveryChallanDetails", dtOrderDetailsChallan)

            reportViewer2.LocalReport.DataSources.Add(DataSource1)
            reportViewer2.LocalReport.DataSources.Add(DataSource2)
            reportViewer2.Refresh()
            Dim mybytes As [Byte]() = reportViewer2.LocalReport.Render("Pdf")
            Dim obj As New clsCommon
            path = clsDefaultConfiguration.DayCloseReportPath & "\DeliveryChallan" & DateTime.Now.ToString("dd-MM-yyyy_HH-mm") & ".pdf"
            Using fs As FileStream = File.Create(path)
                fs.Write(mybytes, 0, mybytes.Length)
            End Using

            If vIsPrintPreviewAllowed = True Then
                Process.Start(path)
            Else
                'Code For Print SO
                PrinterName = SetPrinterName(dtPrinterInfo, "SalesOrder", "SOInvc")
                Dim pdfdocument As New PdfDocument()
                pdfdocument.LoadFromFile(path)
                pdfdocument.PrinterName = PrinterName
                pdfdocument.PrintDocument.PrinterSettings.Copies = 1
                pdfdocument.PrintDocument.Print()
                pdfdocument.Dispose()
            End If

        Catch ex As Exception
            LogException(ex)
        End Try
    End Function

    Public Function ImageToBase64(ByVal CodeString As String) As String
        Try
            Dim VarBarcode As C1BarCode
            Dim s As C1BarCode = GetBarcode(CodeString)
            VarBarcode = s
            Dim mImage = VarBarcode.Image
            Dim uPix As GraphicsUnit = GraphicsUnit.Pixel
            Using ms As New MemoryStream()
                ' Convert Image to byte[]
                mImage.Save(ms, System.Drawing.Imaging.ImageFormat.Png)
                Dim imageBytes As Byte() = ms.ToArray()
                ' Convert byte[] to Base64 String
                Dim base64String As String = Convert.ToBase64String(imageBytes)
                Return base64String
            End Using
        Catch ex As Exception
            LogException(ex)
        End Try
    End Function
    Private Sub rbnCST_Click(sender As Object, e As EventArgs) Handles rbnCST.Click
        If dsScan.Tables(0).Rows.Count = 0 Then
            ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
            Exit Sub
        End If
        For drindex = 0 To dsPackagingVar.Tables(0).Rows.Count - 1

            If dsPackagingVar.Tables(0).Rows(drindex)("ArticleType") = "Combo" Then
                If dsPackagingVar.Tables(0).Rows(drindex)("PckgMaterial").ToString() = "" Then
                    ShowMessage("Please select Packaging material for Combo article", " " & getValueByKey("CLAE04"))
                    Exit Sub
                End If
            End If
        Next

        Dim EventType As Int32
        'ShowMessage(getValueByKey("CST001"), getValueByKey("CLAE04"), EventType, True, getValueByKey("mod009"))
        'If EventType = 1 Then
        Dim dtList = objComn.GetAllTaxesAppliedToSiteDocumentLevel(clsAdmin.SiteCode, "SO201")
        If dtList Is Nothing OrElse dtList.Rows.Count <= 0 Then
            ShowMessage("No Taxes available for this document type", getValueByKey("CLAE04"))
            Exit Sub
        End If
        'Dim objview As New frmNCommonSearch
        'objview.SetData = dtList
        'objview.showdialog()
        Dim objView As New frmPCApplyTax
        objView.dtBind = dtDocTaxes.Copy()
        '' Minus Discount from Gross amount For tax Calculation Added by Ketan
        Dim Discountvalue = CtrllblDiscAmt.Text
        objView.GrossAmt = CtrllblGrossAmt.Text - Discountvalue
        'objView.SetData = dtList
        If (objView.ShowDialog() = Windows.Forms.DialogResult.OK) Then

            dtDocTaxes = objView.dtBind
            'If Not objview.search Is Nothing Then
            '    clsDefaultConfiguration.CSTTaxCode = objview.search(1)
            'Else
            '    Exit Sub
            'End If
            'IsCSTApplicable = True
            ResetNewTax(True, dtDocTaxes, True)
            If clsDefaultConfiguration.IsSavoy Then
                Dim TaxCalc As Double = 0
                Dim TaxValue As Double
                If Not dsMain.Tables("SalesOrderTaxDtls") Is Nothing AndAlso dsMain.Tables("SalesOrderTaxDtls").Rows.Count > 0 Then
                    Dim dr() = dsMain.Tables("SalesOrderTaxDtls").Select("Status=True")
                    If dr.Count > 0 Then
                        TaxValue = dr(0)("TaxValue")
                    End If
                End If
                For Each drDisc As DataRow In dsPackagingVar.Tables(0).Rows
                    TaxCalc = ((drDisc("SellingPrice") * drDisc("PickupQty")) / dsPackagingVar.Tables(0).Compute("Sum(GrossAmt)", " ")) * TaxValue
                    drDisc("MinPayAmt") = (drDisc("SellingPrice") * drDisc("PickupQty")) + TaxCalc
                    drDisc("TotalPickUpAmt") = (drDisc("SellingPrice") * drDisc("PickupQty")) + TaxCalc
                Next
            End If
            CalculateSalesOrderSummory(_dsScan)
            RefreshLoadSOData()
            'rbnCST.Enabled = False
        End If
        'objView.ShowDialog()
        'If Not objView.search Is Nothing Then
        '    clsDefaultConfiguration.CSTTaxCode = objView.search(1)
        'Else
        '    Exit Sub
        'End If

        'End If


        'Dim res = MessageBox.Show(getValueByKey("CST001"), getValueByKey("CLAE04"), MessageBoxButtons.YesNo)
        'If res = Windows.Forms.DialogResult.Yes Then
        '    IsCSTApplicable = True
        '    ResetTax(True)

        'End If
    End Sub
#End Region

    Private Sub rdDelYes_CheckedChanged(sender As Object, e As EventArgs) Handles rdDelYes.CheckedChanged
        deliveryTimer.Start()
        CtrlLblDelivery.Visible = True
        CtrlLblDelivery.Text = "Delivery"
        If rdDelYes.Checked Then
            lblMultiPickupDel.Text = "Multi Delivery"
            DeliveryPickupChange()
            ClearDeliveryAddress()
        End If
        '-----Added BY Prasad for Loading Customer Address in grid
        'If Not dtCustmInfo Is Nothing AndAlso dtCustmInfo.Rows.Count > 0 Then
        '    dtOrderAddresses = objComn.GetSOAddresses(dtCustmInfo.Rows(0)("CUSTOMERNO"), dtCustmInfo.Rows(0)("CLPPROGRAMID"), True)
        'End If
        'If Not dtOrderAddresses Is Nothing AndAlso dtOrderAddresses.Rows.Count > 0 Then
        '    Dim drTo() As DataRow = dtOrderAddresses.Select("AddressValue='To Be Decided'")
        '    If Not drTo.Length > 0 Then
        '        Dim NewRow As DataRow = dtOrderAddresses.NewRow()
        '        NewRow(0) = 0
        '        NewRow(1) = "To Be Decided"
        '        NewRow(2) = "Address"
        '        dtOrderAddresses.Rows.InsertAt(NewRow, 0)
        '    End If
        '    GridDeliverdSetting()
        'End If
    End Sub

    Private Sub rdDelNo_CheckedChanged(sender As Object, e As EventArgs) Handles rdDelNo.CheckedChanged
        deliveryTimer.Start()
        'CtrlLblDelivery.Visible = False
        CtrlLblDelivery.Text = "Store Pickup"
        If rdDelNo.Checked Then
            lblMultiPickupDel.Text = "Multi Pickup"
            DeliveryPickupChange()
            ClearDeliveryAddress()
        End If
        '-----Added BY Prasad for Loading Only Store name in grid
        'If Not dtCustmInfo Is Nothing AndAlso dtCustmInfo.Rows.Count > 0 Then
        '    dtOrderAddresses = objComn.GetSOAddresses(dtCustmInfo.Rows(0)("CUSTOMERNO"), dtCustmInfo.Rows(0)("CLPPROGRAMID"), False)
        'End If
        'If Not dtOrderAddresses Is Nothing AndAlso dtOrderAddresses.Rows.Count > 0 Then
        '    Dim drTo() As DataRow = dtOrderAddresses.Select("AddressValue='To Be Decided'")

        '    If Not drTo.Length > 0 Then
        '        Dim NewRow As DataRow = dtOrderAddresses.NewRow()
        '        NewRow(0) = 0
        '        NewRow(1) = "To Be Decided"
        '        NewRow(2) = "Address"
        '        dtOrderAddresses.Rows.InsertAt(NewRow, 0)
        '    End If
        '    GridDeliverdSetting()
        'End If
    End Sub
    Private Sub timer_Tick(ByVal sender As Object, e As EventArgs)
        CtrlLblDelivery.Visible = Not CtrlLblDelivery.Visible
    End Sub

    Private Sub lnkCustDetails_LinkClicked(sender As Object, e As LinkLabelLinkClickedEventArgs) Handles lnkCustDetails.LinkClicked
        If CtrlTxtOrderNo.Text = String.Empty Then
            ShowMessage(getValueByKey("frmnquotationupdate.Warning"), getValueByKey("CLAE04"))
            CtrltxrCust.Select()
            Exit Sub
        End If
        Dim objClpCustomer As New frmNewCustomer
        objClpCustomer.CustomerNo = dtCustmInfo(0)("CustomerNo")
        objClpCustomer.ViewCust = True
        objClpCustomer.ShowDialog()
        objClpCustomer.Dispose()

    End Sub

    Private Sub CtrlTxtOrderNo_KeyDown(sender As Object, e As KeyEventArgs) Handles CtrlTxtOrderNo.KeyDown
        Try
            If e.KeyCode = Keys.Enter Then
                IsPromotionApplyFromFrontEnd = False
                Dim tempsaleorderNo As String = CtrlTxtOrderNo.Text

                If Not (tempsaleorderNo = "" Or tempsaleorderNo = String.Empty) Then
                    vSalesNo = tempsaleorderNo
                    If boolIsReturn = True Then
                        CtrlBtnReturn.Tag = "Cancel Return"
                        CtrlBtnReturn_Click(sender, e)
                    End If
                    CtrlTxtOrderNo.Text = vSalesNo
                    ResetSalesOrder()
                    dtSTRFactoryRemark = objPCSO.GetFactoryRemarks(vSalesNo)
                    SetSalesOrderInForm(vSalesNo)
                    'CtrlSalesPerson.CtrlTxtBox.Focus()
                    CtrlSalesPerson.AndroidSearchTextBox.Focus()
                    IsStrGenerateApplicable = False
                    ItemScan.Visible = True
                    CtrlSalesPerson.CtrlTxtBox.Visible = True
                    BtnSearchItem.Visible = True
                    BtnSOSave.Enabled = True
                    BtnSOPrint.Enabled = True
                    rbnGrpCMPromotion.Enabled = True
                    BtnSOAcceptPayment.Enabled = True
                    BtnSOOtherCharges.Enabled = True
                    'BtnSOReturn.Enabled = True
                    BtnSOStockCheck.Enabled = True
                    BtnSOCalculater.Enabled = True
                    IsDiscountApplicable = True
                Else
                    Exit Sub
                End If

                GridInvoiceSetting()
                GridItemSetting()
                GridDeliverdSetting()
                IssuingCV = False
                TabSalesOrder.SelectedTab = TabSalesOrder.TabPages("TabPageItemDetails")
                'CtrlSalesPerson.CtrlTxtBox.TabIndex = 8
                'fnGridColAutoSize(grdSOItems)
                'CtrlSalesPerson.CtrlTxtBox.Focus()
                CtrlSalesPerson.AndroidSearchTextBox.Focus()
                '---abc
                'CtrlSalesInfo.CtrlDtExpDelDate.Enabled = True
                If SoCancel Then
                    'CtrlRbn1.Tabs(1).Groups("grpPayments").Enabled = False
                    'CtrlBtnReturn.Enabled = False
                    'CtrlBtnAddExtraCost.Enabled = False
                    'cmdGenerateSTR.Enabled = False
                    'For Each Control In TabSalesOrder.Controls
                    '    For Each Ctrl In Control.Controls
                    '        Ctrl.Enabled = False
                    '    Next
                    'Next
                End If
            End If
        Catch ex As Exception
            ShowMessage(ex.Message, getValueByKey("CLAE05"))
            LogException(ex)
        End Try
    End Sub

    Private Sub rbbtnSOBooking_Click(sender As Object, e As EventArgs) Handles rbbtnSOBooking.Click
        Try
            Try
                If dsScan.Tables(0).Rows.Count > 0 Then
                    If MsgBox(getValueByKey("SO028"), MsgBoxStyle.YesNo, "SO028 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                        Dim frm As New frmPCSalesOrderCreation
                        frm.IsBooking = True
                        MDISpectrum.ShowChildForm(frm, True)
                    End If
                Else
                    Dim frm As New frmPCSalesOrderCreation
                    frm.IsBooking = True
                    MDISpectrum.ShowChildForm(frm, True)
                End If

            Catch ex As Exception
                LogException(ex)
            End Try

        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub

    Private Sub rbbtnSOBookingEdit_Click(sender As Object, e As EventArgs) Handles rbbtnSOBookingEdit.Click
        Try
            If dsScan.Tables(0).Rows.Count > 0 Then
                If MsgBox(getValueByKey("SO028"), MsgBoxStyle.YesNo, "SO028 - " & getValueByKey("CLAE04")) = MsgBoxResult.Yes Then
                    If Me.Name <> "frmPCNSalesOrderUpdate" Then
                        Dim frm As New frmPCNSalesOrderUpdate
                        frm.IsBookingEdit = True
                        MDISpectrum.ShowChildForm(frm, True)
                    Else
                        ResetSalesOrder()
                        'BtnSONew_Click(sender, e)
                        IsBookingEdit = True
                        Call SetScreenAsBooking()
                        CtrlTxtOrderNo.Text = ""
                        CtrldtOrderDt.Value = Nothing
                    End If
                End If
            Else
                If Me.Name <> "frmPCNSalesOrderUpdate" Then
                    Dim frm As New frmPCNSalesOrderUpdate
                    frm.IsBookingEdit = True
                    MDISpectrum.ShowChildForm(frm, True)
                Else
                    ResetSalesOrder()
                    'BtnSONew_Click(sender, e)
                    IsBookingEdit = True
                    Call SetScreenAsBooking()
                End If
            End If
        Catch ex As Exception
            LogException(ex)
        End Try
    End Sub
    Private Function Themechange()
        rdDelYes.CheckAlign = ContentAlignment.MiddleRight
        rdDelYes.TextAlign = ContentAlignment.MiddleLeft
        rdDelNo.TextAlign = ContentAlignment.MiddleLeft
        rdDelNo.CheckAlign = ContentAlignment.MiddleCenter
        rbnTabSO.Text = rbnTabSO.Text.ToUpper
        rbnTabSO.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        Me.BackgroundColor = Color.FromArgb(134, 134, 134)
        CtrlRbn1.VisualStyle = C1.Win.C1Ribbon.VisualStyle.Office2007Black
        CtrlSalesPerson.AlignChange = "Sales Order Old"
        '   CtrlCashSummary.AlignChangeForCashSummary = "Sales Order Old"
        rbbtnDefaultPromo.LargeImage = Global.Spectrum.My.Resources.Resources.defaultPromo_Normal
        rbbtnSelectPromo.LargeImage = Global.Spectrum.My.Resources.Resources.SelectPromo_Normal
        rbbtnClrAllPromo.LargeImage = Global.Spectrum.My.Resources.Resources.ClearPromo_Normal
        CtrlRbn1.DbtnPay.LargeImage = Global.Spectrum.My.Resources.Resources.payment_Normal
        CtrlRbn1.DbtnPayCash.LargeImage = Global.Spectrum.My.Resources.Resources.Cash_Normal
        CtrlRbn1.DbtnPayCard.LargeImage = Global.Spectrum.My.Resources.Resources.Card_Normal
        CtrlRbn1.DbtnpayCheque.LargeImage = Global.Spectrum.My.Resources.PayByCheque
        rbnCST.LargeImage = Global.Spectrum.My.Resources.ApplyTax
        'rbBtnRoundOff.LargeImage = Global.Spectrum.My.Resources.RoundOff
        Me.rbgrpSO.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        ' Me.rbgrpSO.Image = Global.Spectrum.My.Resources.defaultPromo_Normal
        Me.rbgrpSO.ForeColorInner = Color.FromArgb(37, 37, 37)
        Me.rbnGrpCST.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        ' Me.rbnGrpCST.Image = Global.Spectrum.My.Resources.cancel_so
        Me.rbnGrpCST.ForeColorInner = Color.FromArgb(37, 37, 37)

        rbnCST.LargeImage = My.Resources.ApplyTax
        Me.rbngAddCombo.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        'Me.rbnGrpAddCombo.Image = Global.Spectrum.My.Resources.defaultPromo_Normal
        rbnAddCombo.LargeImage = Global.Spectrum.My.Resources.AddCombonew
        Me.rbngAddCombo.ForeColorInner = Color.FromArgb(37, 37, 37)
        Me.rbnGrpCMPromotion1.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        Me.rbnGrpCMPromotion1.Image = Global.Spectrum.My.Resources.defaultPromo_Normal
        Me.rbnGrpCMPromotion1.ForeColorInner = Color.FromArgb(37, 37, 37)
        CtrlRbn1.DgrpPayments.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        Me.rbgrpSaveNprint.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        '  Me.rbnGrpPayments.Image = Global.Spectrum.My.Resources.payment_Normal
        Me.rbgrpSaveNprint.ForeColorInner = Color.FromArgb(37, 37, 37)
        cmdSONew.LargeImage = Global.Spectrum.My.Resources.NewSO1

        Me.RibbonGroupNew.Font = New Font("Droid Sans Bold", 7, FontStyle.Bold)
        '  Me.RibbonGroupNew.Image = Global.Spectrum.My.Resources.payment_Normal
        Me.RibbonGroupNew.ForeColorInner = Color.FromArgb(37, 37, 37)

        rbbtnDefaultPromo.Text = rbbtnDefaultPromo.Text.ToUpper
        rbbtnSelectPromo.Text = rbbtnSelectPromo.Text.ToUpper
        rbbtnClrAllPromo.Text = rbbtnClrAllPromo.Text.ToUpper
        CtrlRbn1.DbtnPay.Text = CtrlRbn1.DbtnPay.Text.ToUpper
        CtrlRbn1.DbtnPayCash.Text = CtrlRbn1.DbtnPayCash.Text.ToUpper
        CtrlRbn1.DbtnPayCard.Text = CtrlRbn1.DbtnPayCard.Text.ToUpper
        CtrlRbn1.DbtnpayCheque.Text = CtrlRbn1.DbtnpayCheque.Text.ToUpper
        rbnCST.Text = rbnCST.Text.ToUpper
        '   rbBtnRoundOff.Text = rbBtnRoundOff.Text.ToUpper


        Me.rbgrpSO.Text = Me.rbgrpSO.Text.ToUpper
        Me.rbnGrpCST.Text = Me.rbnGrpCST.Text.ToUpper
        rbnAddCombo.Text = rbnAddCombo.Text.ToUpper
        Me.rbngAddCombo.Text = Me.rbngAddCombo.Text.ToUpper
        Me.rbnGrpCMPromotion.Text = Me.rbnGrpCMPromotion.Text.ToUpper
        CtrlRbn1.DgrpPayments.Text = CtrlRbn1.DgrpPayments.Text.ToUpper
        Me.rbgrpSaveNprint.Text = Me.rbgrpSaveNprint.Text.ToUpper
        cmdSONew.Text = cmdSONew.Text.ToUpper
        CmdSOEdit.Text = CmdSOEdit.Text.ToUpper
        ' rbbtnSOCancel.Text = rbbtnSOCancel.Text.ToUpper
        cmdSave.Text = cmdSave.Text.ToUpper
        cmdPrint.Text = cmdPrint.Text.ToUpper
        RibbonGroupNew.Text = RibbonGroupNew.Text.ToUpper
        rbbtnSOBooking.Text = "NEW BOOKING(CTRL+B)".ToUpper
        rbbtnSOBookingEdit.Text = "EDIT BOOKING(CTRL+G)".ToUpper
        cmdGenerateSTR.Text = cmdGenerateSTR.Text.Trim.ToUpper
        CtrlBtnAddExtraCost.Text = CtrlBtnAddExtraCost.Text.ToUpper()
        CtrlBtnReturn.Text = CtrlBtnReturn.Text.ToUpper()
        CtrlBtnStockCheck.Text = CtrlBtnStockCheck.Text.ToUpper()
        rbnGrpCMPromotion1.Text = rbnGrpCMPromotion1.Text.ToUpper()
        CmdSOClose.Text = CmdSOClose.Text.ToUpper
        rbgrpSO.ForeColorInner = Color.FromArgb(54, 54, 54)
        rbnGrpCST.ForeColorInner = Color.FromArgb(54, 54, 54)
        rbgrpSaveNprint.ForeColorInner = Color.FromArgb(54, 54, 54)
        rbnGrpCMPromotion.ForeColorInner = Color.FromArgb(54, 54, 54)
        rbnGrpCMPromotion1.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbngAddCombo.ForeColorInner = Color.FromArgb(54, 54, 54)
        RibbonGroupNew.ForeColorInner = Color.FromArgb(54, 54, 54)


        RibbonGroupNew.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbgrpSO.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbnGrpCST.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbgrpSaveNprint.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbnGrpCMPromotion.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbnGrpCMPromotion1.ForeColorOuter = Color.FromArgb(0, 107, 163)
        rbngAddCombo.ForeColorOuter = Color.FromArgb(0, 107, 163)

        TabPageItemDetails.TabBackColorSelected = Color.FromArgb(0, 81, 120)
        TabPageItemDetails.TabForeColorSelected = Color.White
        TabPageInvoiceDetails.TabBackColorSelected = Color.FromArgb(0, 81, 120)
        TabPageInvoiceDetails.TabForeColorSelected = Color.White
        'TabPageInvoiceDetails.Font = New Font("Neo Sans", 8, FontStyle.Bold)
        ' TabPageItemDetails.Font = New Font("Neo Sans", 8, FontStyle.Bold)
        TabPageItemDetails.Text = TabPageItemDetails.Text.ToUpper
        TabPageInvoiceDetails.Text = TabPageInvoiceDetails.Text.ToUpper
        'TabPageItemSTRDetails.Font = New Font("Neo Sans", 8, FontStyle.Bold)
        TabPageItemSTRDetails.Text = TabPageItemSTRDetails.Text.ToUpper
        TabPageItemSTRDetails.TabBackColorSelected = Color.FromArgb(0, 81, 120)
        TabPageItemSTRDetails.TabForeColorSelected = Color.White
        ' TabPageOrderDetails.Font = New Font("Neo Sans", 8, FontStyle.Bold)
        TabPageOrderDetails.Text = TabPageOrderDetails.Text.ToUpper
        TabPageOrderDetails.TabBackColorSelected = Color.FromArgb(0, 81, 120)
        TabPageOrderDetails.TabForeColorSelected = Color.White
        CmdSOEdit.LargeImage = Global.Spectrum.My.Resources.EditSO1

        CmdSOClose.LargeImage = Global.Spectrum.My.Resources.CancelSO1
        cmdSave.LargeImage = Global.Spectrum.My.Resources.SaveSO1
        cmdPrint.LargeImage = Global.Spectrum.My.Resources.PrintSO1
        rbbtnSOBooking.LargeImage = My.Resources.NewBooking
        rbbtnSOBookingEdit.LargeImage = My.Resources.EditBooking
        grdSOItems.VisualStyle = C1.Win.C1FlexGrid.VisualStyle.Custom
        grdSOItems.Styles.Highlight.BackColor = Color.FromArgb(212, 212, 212)
        grdSOItems.Styles.Fixed.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItems.Styles.Normal.BackColor = Color.FromArgb(255, 255, 255)
        grdSOItems.Rows.MinSize = 30
        grdSOItems.Styles.Normal.Font = New Font("Neo Sans", 8.5, FontStyle.Regular)
        grdSOItems.Styles.Fixed.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItems.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItems.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItems.Styles.Focus.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItems.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItems.Styles.Fixed.ForeColor = Color.FromArgb(37, 37, 37)
        grdSOItems.Styles.Highlight.ForeColor = Color.Black
        grdSOItems.Styles.SelectedColumnHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItems.Styles.SelectedRowHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItems.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItems.Styles.SelectedRowHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItems.CellButtonImage = Global.Spectrum.My.Resources.Delete

        dgDeliveryLocation.VisualStyle = C1.Win.C1FlexGrid.VisualStyle.Custom
        dgDeliveryLocation.Styles.Highlight.BackColor = Color.FromArgb(212, 212, 212)
        dgDeliveryLocation.Styles.Fixed.BackColor = Color.FromArgb(177, 227, 253)
        dgDeliveryLocation.Styles.Normal.BackColor = Color.FromArgb(255, 255, 255)
        dgDeliveryLocation.Rows.MinSize = 30
        dgDeliveryLocation.Styles.Normal.Font = New Font("Neo Sans", 8.5, FontStyle.Regular)
        dgDeliveryLocation.Styles.Fixed.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        dgDeliveryLocation.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        dgDeliveryLocation.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        dgDeliveryLocation.Styles.Focus.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        dgDeliveryLocation.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        dgDeliveryLocation.Styles.Highlight.ForeColor = Color.Black
        dgDeliveryLocation.Styles.Fixed.ForeColor = Color.FromArgb(37, 37, 37)
        dgDeliveryLocation.Styles.SelectedColumnHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        dgDeliveryLocation.Styles.SelectedRowHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        dgDeliveryLocation.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        dgDeliveryLocation.Styles.SelectedRowHeader.BackColor = Color.FromArgb(177, 227, 253)
        dgDeliveryLocation.CellButtonImage = Global.Spectrum.My.Resources.Delete

        grdSOInvoice.VisualStyle = C1.Win.C1FlexGrid.VisualStyle.Custom
        grdSOInvoice.Styles.Highlight.BackColor = Color.FromArgb(212, 212, 212)
        grdSOInvoice.Styles.Fixed.BackColor = Color.FromArgb(177, 227, 253)
        grdSOInvoice.Styles.Normal.BackColor = Color.FromArgb(255, 255, 255)
        grdSOInvoice.Rows.MinSize = 30
        grdSOInvoice.Styles.Normal.Font = New Font("Neo Sans", 8.5, FontStyle.Regular)
        grdSOInvoice.Styles.Fixed.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOInvoice.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOInvoice.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOInvoice.Styles.Focus.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOInvoice.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOInvoice.Styles.Highlight.ForeColor = Color.Black
        grdSOInvoice.Styles.Fixed.ForeColor = Color.FromArgb(37, 37, 37)
        grdSOInvoice.Styles.SelectedColumnHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOInvoice.Styles.SelectedRowHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOInvoice.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOInvoice.Styles.SelectedRowHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOInvoice.CellButtonImage = Global.Spectrum.My.Resources.Delete

        grdSOItemRetuns.VisualStyle = C1.Win.C1FlexGrid.VisualStyle.Custom
        grdSOItemRetuns.Styles.Highlight.BackColor = Color.FromArgb(212, 212, 212)
        grdSOItemRetuns.Styles.Fixed.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItemRetuns.Styles.Normal.BackColor = Color.FromArgb(255, 255, 255)
        grdSOItemRetuns.Rows.MinSize = 30
        grdSOItemRetuns.Styles.Normal.Font = New Font("Neo Sans", 8.5, FontStyle.Regular)
        grdSOItemRetuns.Styles.Fixed.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItemRetuns.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItemRetuns.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItemRetuns.Styles.Focus.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItemRetuns.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItemRetuns.Styles.Highlight.ForeColor = Color.Black
        grdSOItemRetuns.Styles.Fixed.ForeColor = Color.FromArgb(37, 37, 37)
        grdSOItemRetuns.Styles.SelectedColumnHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItemRetuns.Styles.SelectedRowHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSOItemRetuns.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItemRetuns.Styles.SelectedRowHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSOItemRetuns.CellButtonImage = Global.Spectrum.My.Resources.Delete

        grdSTRDetails.VisualStyle = C1.Win.C1FlexGrid.VisualStyle.Custom
        grdSTRDetails.Styles.Highlight.BackColor = Color.FromArgb(212, 212, 212)
        grdSTRDetails.Styles.Fixed.BackColor = Color.FromArgb(177, 227, 253)
        grdSTRDetails.Styles.Normal.BackColor = Color.FromArgb(255, 255, 255)
        grdSTRDetails.Rows.MinSize = 30
        grdSTRDetails.Styles.Normal.Font = New Font("Neo Sans", 8.5, FontStyle.Regular)
        grdSTRDetails.Styles.Fixed.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSTRDetails.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSTRDetails.Styles.Highlight.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSTRDetails.Styles.Focus.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSTRDetails.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSTRDetails.Styles.Highlight.ForeColor = Color.Black
        grdSTRDetails.Styles.Fixed.ForeColor = Color.FromArgb(37, 37, 37)
        grdSTRDetails.Styles.SelectedColumnHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSTRDetails.Styles.SelectedRowHeader.Font = New Font("Neo Sans", 8.5, FontStyle.Bold)
        grdSTRDetails.Styles.SelectedColumnHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSTRDetails.Styles.SelectedRowHeader.BackColor = Color.FromArgb(177, 227, 253)
        grdSTRDetails.CellButtonImage = Global.Spectrum.My.Resources.Delete

        CtrlBtnReturn.LargeImage = My.Resources.ReturnsNew
        cmdGenerateSTR.LargeImage = My.Resources.GenerateSTRnew

        CtrlBtnStockCheck.LargeImage = My.Resources.StockCheck

        CtrlBtnAddExtraCost.LargeImage = My.Resources.AdditionalCost

        lblDelReq.BackColor = Color.FromArgb(212, 212, 212)
        lblDelReq.BorderStyle = BorderStyle.None
        lblSelCust.BackColor = Color.FromArgb(212, 212, 212)
        lblSelCust.BorderStyle = BorderStyle.None
        lblDispCompany.BackColor = Color.FromArgb(212, 212, 212)
        lblDispCompany.BorderStyle = BorderStyle.None
        lblSalesOrderNo.BackColor = Color.FromArgb(212, 212, 212)
        lblSalesOrderNo.BorderStyle = BorderStyle.None
        lblDispStrRaised.BackColor = Color.FromArgb(212, 212, 212)
        lblDispStrRaised.BorderStyle = BorderStyle.None
        CtrlLabel14.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel14.BorderStyle = BorderStyle.None
        Me.TableLayoutPanel1.SetRowSpan(CtrlLabel14, 2)
        lblDispDepart.BackColor = Color.FromArgb(212, 212, 212)
        lblDispDepart.BorderStyle = BorderStyle.None
        lblOrderDate.BackColor = Color.FromArgb(212, 212, 212)
        lblOrderDate.BorderStyle = BorderStyle.None
        lblStrRaised.ForeColor = Color.White
        lblStrRaised.BorderStyle = BorderStyle.None
        lblMultiPickupDel.BackColor = Color.FromArgb(212, 212, 212)
        lblMultiPickupDel.BorderStyle = BorderStyle.None
        rbDPNo.ForeColor = Color.White
        rbDPYes.ForeColor = Color.White
        lblDeliveryDate.BackColor = Color.FromArgb(212, 212, 212)
        lblDeliveryDate.BorderStyle = BorderStyle.None
        lblMultiPickupDel.TextAlign = ContentAlignment.MiddleLeft
        lblDeliveryDate.TextAlign = ContentAlignment.MiddleLeft
        CtrlLabel15.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel15.Margin = New Padding(3, 0, 3, 1)
        CtrlLabel16.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel16.Margin = New Padding(3, 1, 3, 0)
        CtrlLabel4.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel4.Margin = New Padding(3, 2, 3, 3)
        CtrlLabel6.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel6.Margin = New Padding(3, 0, 3, 2)
        CtrlLabelDiscUsed.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabelDiscUsed.Margin = New Padding(3, 3, 3, 1)
        CtrlLabel17.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel17.Margin = New Padding(3, 0, 3, 2)
        CtrlLabel3.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel3.Margin = New Padding(3, 0, 3, 2)
        CtrlLabel2.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel2.Margin = New Padding(3, 0, 3, 3)
        CtrlLabel1.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel1.Margin = New Padding(3, 0, 3, 2)
        CtrlLabel10.BackColor = Color.FromArgb(212, 212, 212)
        CtrlLabel10.Margin = New Padding(3, 2, 3, 1)
        CtrlLabel7.Font = New Font("Neo Sans", 10, FontStyle.Bold)
        CtrlLabel5.Font = New Font("Neo Sans", 10, FontStyle.Bold)
        CtrlLabel8.Visible = False
        CtrlLabel9.Visible = False
        CtrlLabel11.Visible = False
        CtrlLabel12.Visible = False
        BtnSearchCust.Image = Nothing
        BtnSearchCust.BackgroundImage = My.Resources.SearchItems1
        BtnSearchCust.VisualStyle = C1.Win.C1Input.VisualStyle.System
        BtnSearchCust.BackgroundImageLayout = ImageLayout.Stretch
        BtnSearchCust.FlatAppearance.BorderSize = 0
        BtnSearchCust.FlatStyle = FlatStyle.Flat

        BtnSearchSalesOrder.Image = Nothing
        BtnSearchSalesOrder.BackgroundImage = My.Resources.SearchItems1
        BtnSearchSalesOrder.VisualStyle = C1.Win.C1Input.VisualStyle.System
        BtnSearchSalesOrder.BackgroundImageLayout = ImageLayout.Stretch
        BtnSearchSalesOrder.FlatAppearance.BorderSize = 0
        BtnSearchSalesOrder.FlatStyle = FlatStyle.Flat
        CtrlLabel5.ForeColor = Color.White
        CtrlLabel7.ForeColor = Color.White
        rdDelYes.ForeColor = Color.White
        rdDelNo.ForeColor = Color.White
        BtnSearchSalesOrder.Size = New Size(25, 21)

        CtrltxrCust.MaximumSize = New Size(0, 0)
        lblCompName.MaximumSize = New Size(0, 0)
        CtrlTxtOrderNo.MaximumSize = New Size(0, 0)
        remarkPanel.MaximumSize = New Size(0, 0)
        CtrlLabel18.MaximumSize = New Size(0, 0)
        CtrldtOrderDt.MaximumSize = New Size(0, 0)
        CtrllblGrossAmt.MaximumSize = New Size(0, 0)
        'Panel4.MaximumSize = New Size(0, 27)
        'Panel4.Size = New Size(137, 27)
        CtrllblDiscUsed.MaximumSize = New Size(0, 0)
        CtrllblTaxAmt.MaximumSize = New Size(0, 0)
        CtrllblOtherCharges.MaximumSize = New Size(0, 0)
        CtrllblMinAdv.MaximumSize = New Size(0, 0)
        CtrllblNetAmt.MaximumSize = New Size(0, 0)
        CtrllblAmtPaid.MaximumSize = New Size(0, 0)
        CtrllblCreditSale.MaximumSize = New Size(0, 0)
        CtrllblBaltoPay.MaximumSize = New Size(0, 0)
        CtrllblDiscUsedPerc.MaximumSize = New Size(0, 0)
        CtrllblDiscAmt.MaximumSize = New Size(81, 29)
        CtrllblDiscPerc.MaximumSize = New Size(71, 29)
        CtrllblDiscAmt.Size = New Size(81, 29)
        CtrllblDiscPerc.Size = New Size(56, 29)
        CtrllblDiscUsedPerc.BorderStyle = BorderStyle.None
        CtrllblDiscUsed.BorderStyle = BorderStyle.None
        CtrllblDiscPerc.BorderStyle = BorderStyle.None
        CtrltxrCust.Margin = New Padding(3, 3, 3, 1)
        lblCompName.Margin = New Padding(3, 3, 3, 1)
        CtrlLabel14.Margin = New Padding(2, 0, 2, 2)
        CtrlTxtOrderNo.Margin = New Padding(3, 3, 3, 0)
        remarkPanel.Margin = New Padding(3, 3, 3, 1)
        CtrlLabel18.Margin = New Padding(3, 3, 3, 1)
        CtrldtOrderDt.Margin = New Padding(3, 3, 3, 1)
        CtrllblGrossAmt.Margin = New Padding(3, 3, 3, 1)
        'Panel4.Margin = New Padding(3, 3, 3, 1)
        CtrllblDiscUsed.Margin = New Padding(3, 3, 3, 1)
        CtrllblTaxAmt.Margin = New Padding(3, 3, 3, 1)
        CtrllblOtherCharges.Margin = New Padding(3, 3, 3, 1)
        CtrllblMinAdv.Margin = New Padding(3, 3, 3, 1)
        CtrllblNetAmt.Margin = New Padding(3, 3, 3, 1)
        CtrllblAmtPaid.Margin = New Padding(3, 3, 3, 1)
        CtrllblCreditSale.Margin = New Padding(3, 3, 3, 1)
        CtrllblBaltoPay.Margin = New Padding(3, 3, 3, 1)
        CtrllblDiscUsedPerc.Margin = New Padding(2, 3, 3, 1)
        CtrllblDiscAmt.Margin = New Padding(3, 3, 3, 0)
        CtrllblDiscPerc.Margin = New Padding(3, 2, 3, 0)
        CtrllblDiscPerc.BackColor = Color.FromArgb(255, 234, 242, 251)
        CtrllblDiscUsedPerc.BackColor = Color.FromArgb(255, 234, 242, 251)
        CtrllblDiscUsed.BackColor = Color.FromArgb(255, 234, 242, 251)
        ' Me.C1Sizer3.Controls.Remove(Me.CtrlSalesPerson)
        ' Me.CtrlSalesPerson.Size = New System.Drawing.Size(504, 22)
        ' Me.CtrlSalesPerson.Location = New System.Drawing.Point(503, 423)
        ' CtrlSalesPerson.Anchor = AnchorStyles.Right
        ' Me.Controls.Add(Me.CtrlSalesPerson)
        ' Me.Controls.SetChildIndex(Me.CtrlSalesPerson, 0)
        ' C1Sizer3.Controls.Remove(grdSOItems)
        ' C1Sizer3.Hide()
        ' Me.TabPageItemDetails.Controls.Add(Me.grdSOItems)
        ' Me.grdSOItems.Size = New System.Drawing.Size(1354, 290)
        '  Me.grdSOItems.Location = New System.Drawing.Point(4, 3)

        TableLayoutPanel2.Margin = New Padding(3, 1, 3, 0)
        TableLayoutPanel3.Margin = New Padding(3, 0, 3, 0)
        TableLayoutPanel4.Margin = New Padding(3, 0, 3, 0)
        TableLayoutPanel5.Margin = New Padding(3, 0, 3, 0)
        TableLayoutPanel6.Margin = New Padding(3, 0, 3, 0)
        TableLayoutPanel7.Margin = New Padding(3, 0, 3, 0)
        TableLayoutPanel2.Size = New Size(151, 27)
        TableLayoutPanel3.Size = New Size(151, 27)
        TableLayoutPanel4.Size = New Size(151, 30)
        TableLayoutPanel5.Size = New Size(151, 28)
        TableLayoutPanel6.Size = New Size(151, 27)
        TableLayoutPanel7.Size = New Size(151, 27)

        CtrlRbn1.DbtnPayNEFT.LargeImage = Global.Spectrum.My.Resources.Resources.RTGS_Blue
        CtrlRbn1.DbtnPayRTGS.LargeImage = Global.Spectrum.My.Resources.Resources.RTGS_Blue  '' added by vipin For Theam Change


        Label1.BorderStyle = BorderStyle.None
        Label1.BackColor = Color.FromArgb(212, 212, 212)
    End Function

    Private Sub rbDPNo_CheckedChanged(sender As Object, e As EventArgs) Handles rbDPNo.CheckedChanged
        lblDeliveryDate.Visible = True
        If Not dsMain Is Nothing AndAlso dsMain.Tables.Count > 0 Then
            If dsMain.Tables("SOPackagingBoxDeliveryDtl").Rows.Count = 0 Then
                ctrlDtDeliveryDate.Value = DateTime.Now
            End If

        End If
        ctrlDtDeliveryDate.Visible = True
        'If Not dtCustmInfo Is Nothing AndAlso dtCustmInfo.Rows.Count > 0 Then
        '    dtOrderAddresses = objComn.GetSOAddresses(dtCustmInfo.Rows(0)("CUSTOMERNO"), dtCustmInfo.Rows(0)("CLPPROGRAMID"), False)
        'End If
        'If lblMultiPickupDel.Text = "Multi Pickup" Then
        '    If Not dtOrderAddresses Is Nothing AndAlso dtOrderAddresses.Rows.Count > 0 Then
        '        dtTempOrderAddresses = dtOrderAddresses.Select("AddressKey='" & clsAdmin.SiteCode & "'").CopyToDataTable
        '    End If
        'End If
        'If Not dtTempOrderAddresses Is Nothing AndAlso dtTempOrderAddresses.Rows.Count > 0 Then
        '    Dim drTo() As DataRow = dtTempOrderAddresses.Select("AddressValue='To Be Decided'")

        '    If Not drTo.Length > 0 Then
        '        Dim NewRow As DataRow = dtTempOrderAddresses.NewRow()
        '        NewRow(0) = 0
        '        NewRow(1) = "To Be Decided"
        '        NewRow(2) = "Address"
        '        ' dtOrderAddresses.Rows.Add(NewRow)
        '        dtTempOrderAddresses.Rows.InsertAt(NewRow, 0)
        '    End If
        '    GridDeliverdSetting()
        '    dgDeliveryLocation.Cols("DeliveryDate").AllowEditing = False
        '    dgDeliveryLocation.Cols("DeliveryTime").AllowEditing = False
        'End If
        DeliveryPickupChange()
        ClearDeliveryAddress()
        If Not dtTempOrderAddresses Is Nothing AndAlso dtTempOrderAddresses.Rows.Count > 0 Then
            ctrlDtDeliveryDate.Visible = True
            isEditLoad = True
            ctrlDtDeliveryDate.Value = DateTime.Now
            isEditLoad = False
            dgDeliveryLocation.Cols("DeliveryDate").AllowEditing = False
            dgDeliveryLocation.Cols("DeliveryTime").AllowEditing = False
        End If
    End Sub

    Private Sub rbDPYes_CheckedChanged(sender As Object, e As EventArgs) Handles rbDPYes.CheckedChanged
        lblDeliveryDate.Visible = False
        ctrlDtDeliveryDate.Visible = False
        'If Not dtCustmInfo Is Nothing AndAlso dtCustmInfo.Rows.Count > 0 Then
        '    dtOrderAddresses = objComn.GetSOAddresses(dtCustmInfo.Rows(0)("CUSTOMERNO"), dtCustmInfo.Rows(0)("CLPPROGRAMID"), False)
        'End If

        'If lblMultiPickupDel.Text = "Multi Pickup" Then
        '    If Not dtOrderAddresses Is Nothing AndAlso dtOrderAddresses.Rows.Count > 0 Then
        '        dtTempOrderAddresses = dtOrderAddresses.Copy
        '    End If
        'End If
        'If Not dtTempOrderAddresses Is Nothing AndAlso dtTempOrderAddresses.Rows.Count > 0 Then
        '    Dim drTo() As DataRow = dtTempOrderAddresses.Select("AddressValue='To Be Decided'")

        '    If Not drTo.Length > 0 Then
        '        Dim NewRow As DataRow = dtTempOrderAddresses.NewRow()
        '        NewRow(0) = 0
        '        NewRow(1) = "To Be Decided"
        '        NewRow(2) = "Address"
        '        ' dtOrderAddresses.Rows.Add(NewRow)
        '        dtTempOrderAddresses.Rows.InsertAt(NewRow, 0)
        '    End If

        '    GridDeliverdSetting()
        '    dgDeliveryLocation.Cols("DeliveryDate").AllowEditing = True
        '    dgDeliveryLocation.Cols("DeliveryTime").AllowEditing = True
        'End If
        DeliveryPickupChange()
        ClearDeliveryAddress()
        If Not dtTempOrderAddresses Is Nothing AndAlso dtTempOrderAddresses.Rows.Count > 0 Then
            dgDeliveryLocation.Cols("DeliveryDate").AllowEditing = True
            dgDeliveryLocation.Cols("DeliveryTime").AllowEditing = True
        End If

    End Sub
    Sub ClearDeliveryAddress()
        If dsPackagingDelivery.Tables.Count = 0 Then
            Exit Sub
        End If

        If Not dsPackagingDelivery.Tables.Count = 0 Or Not dsPackagingDelivery.Tables.Count = 1 Then
            If rbDPNo.Checked Then
                If lblMultiPickupDel.Text = "Multi Pickup" Then
                    For Each drAdd As DataRow In dsPackagingDelivery.Tables(0).Rows
                        Dim drdefaddr() = dtTempOrderAddresses.Select("AddressKey='" & clsAdmin.SiteCode & "'")
                        If drdefaddr.Count > 0 Then
                            drAdd("DeliveryAddress") = drdefaddr(0)("AddressKey").ToString
                            drAdd("IsCustAddress") = "1"
                        End If
                    Next
                Else
                    For Each drAdd As DataRow In dsPackagingDelivery.Tables(0).Rows
                        Dim drdefaddr() = dtTempOrderAddresses.Select("DefaultAddress=1")
                        If drdefaddr.Count > 0 Then
                            drAdd("DeliveryAddress") = drdefaddr(0)("AddressKey").ToString
                            drAdd("IsCustAddress") = "2"
                        End If
                    Next
                End If
            Else
                For Each drAdd As DataRow In dsPackagingDelivery.Tables(0).Rows
                    drAdd("DeliveryAddress") = ""
                Next
            End If
            BindSODeliveryGridData(dsPackagingDelivery.Tables(0), True)
            AddButtonControlInDeliveryGrid(1)
            AddSTRButtonControlInDeliveryGrid(1)
        End If

    End Sub
    Sub DeliveryPickupChange()
        ' dtOrderAddresses = objComn.GetSOAddresses("", "", False)
        If lblMultiPickupDel.Text = "Multi Pickup" Then
            If rdDelNo.Checked Then
                dtOrderAddresses = objComn.GetSOAddresses("", "", False)
            End If
            If Not dtOrderAddresses Is Nothing AndAlso dtOrderAddresses.Rows.Count > 0 Then
                Dim dr() = dtOrderAddresses.Select("addresstype='Store'")
                If dr.Length > 0 Then
                    dtTempOrderAddresses = dtOrderAddresses.Select("addresstype='Store'").CopyToDataTable
                End If
                'If rbDPNo.Checked Then
                '    'Dim dr() = dtOrderAddresses.Select("AddressKey='" & clsAdmin.SiteCode & "'")
                '    'If dr.Length > 0 Then
                '    '    dtTempOrderAddresses = dtOrderAddresses.Select("AddressKey='" & clsAdmin.SiteCode & "'").CopyToDataTable
                '    'Else

                '    'End If
                'Else
                'Dim dr() = dtOrderAddresses.Select("addresstype='Store'")
                'If dr.Length > 0 Then
                '    dtTempOrderAddresses = dtOrderAddresses.Select("addresstype='Store'").CopyToDataTable
                'End If

                'End If
            End If

            'If Not dtOrderAddresses Is Nothing AndAlso dtOrderAddresses.Rows.Count > 0 Then
            '    dtTempOrderAddresses = dtOrderAddresses.Copy
            'End If
        Else
            If Not dtCustmInfo Is Nothing AndAlso dtCustmInfo.Rows.Count > 0 AndAlso isCustSelected = True Then
                dtOrderAddresses = objComn.GetSOAddresses(dtCustmInfo.Rows(0)("CUSTOMERNO"), dtCustmInfo.Rows(0)("CLPPROGRAMID"), True, True)
                If dtOrderAddresses.Rows.Count > 0 Then
                    dtTempOrderAddresses = dtOrderAddresses.Copy
                End If
                'If rbDPNo.Checked Then
                '    'Dim dr() = dtOrderAddresses.Select("AddressKey=1")
                '    'If dr.Length > 0 Then
                '    '    dtTempOrderAddresses = dtOrderAddresses.Select("AddressKey=1").CopyToDataTable
                '    'End If
                'Else
                '    'If dtOrderAddresses.Rows.Count > 0 Then
                '    '    dtTempOrderAddresses = dtOrderAddresses.Copy
                '    'End If

                'End If

            Else
                dtTempOrderAddresses.Clear()
                If dtTempOrderAddresses.Columns.Count = 0 Then
                    Exit Sub
                Else
                    Dim drTo() As DataRow = dtTempOrderAddresses.Select("AddressValue='To Be Decided'")
                    If Not drTo.Length > 0 Then
                        Dim NewRow As DataRow = dtTempOrderAddresses.NewRow()
                        NewRow(0) = 1001
                        NewRow(1) = "To Be Decided"
                        NewRow(2) = "Address"
                        ' dtOrderAddresses.Rows.Add(NewRow)
                        dtTempOrderAddresses.Rows.InsertAt(NewRow, 0)
                    End If
                    GridDeliverdSetting()
                End If
            End If
        End If
        If Not dtTempOrderAddresses Is Nothing AndAlso dtTempOrderAddresses.Rows.Count > 0 Then
            Dim drTo() As DataRow = dtTempOrderAddresses.Select("AddressValue='To Be Decided'")

            If Not drTo.Length > 0 Then
                Dim NewRow As DataRow = dtTempOrderAddresses.NewRow()
                NewRow(0) = 1001
                NewRow(1) = "To Be Decided"
                NewRow(2) = "Address"
                ' dtOrderAddresses.Rows.Add(NewRow)
                dtTempOrderAddresses.Rows.InsertAt(NewRow, 0)
            End If

            GridDeliverdSetting()
        End If

    End Sub
    Dim IsBackDelDate As Boolean ''  ''added by ketan PC delivery date issue 
    Private Sub ctrlDtDeliveryDate_ValueChanged(sender As Object, e As EventArgs) Handles ctrlDtDeliveryDate.ValueChanged
        If isEditLoad = False Then
            If DateTime.Compare(Convert.ToDateTime(ctrlDtDeliveryDate.Value.Date), Convert.ToDateTime(DateTime.Now.Date)) < 0 Then
                ShowMessage("Delivery Date Can't be Backdated", "Information")
                ctrlDtDeliveryDate.Value = DateTime.Now
                IsBackDelDate = True
            ElseIf DateTime.Compare(Convert.ToDateTime(ctrlDtDeliveryDate.Value.Date), Convert.ToDateTime(DateTime.Now.Date)) = 0 Then
                If DateTime.Compare((Convert.ToDateTime(ctrlDtDeliveryDate.Value).ToShortTimeString), Convert.ToDateTime(DateTime.Now).ToShortTimeString) < 0 Then
                    ShowMessage("Delivery Date Can't be Backdated", "Information")
                    ctrlDtDeliveryDate.Value = DateTime.Now
                    IsBackDelDate = True
                End If
            End If
        End If
        If Not dsPackagingDelivery Is Nothing AndAlso dsPackagingDelivery.Tables.Count <> 0 Then

            If dsPackagingDelivery.Tables(0).Rows.Count > 0 Then
                If rbDPNo.Checked Then
                    For Each drDel As DataRow In dsPackagingDelivery.Tables(0).Rows




                        drDel("DeliveryDate") = ctrlDtDeliveryDate.Value
                        drDel("DeliveryTime") = ctrlDtDeliveryDate.Value
                    Next
                Else
                    For Each drDel As DataRow In dsPackagingDelivery.Tables(0).Rows
                        drDel("DeliveryDate") = DateTime.Now
                        drDel("DeliveryTime") = DateTime.Now
                    Next
                End If
                BindSODeliveryGridData(dsPackagingDelivery.Tables(0), True)
                AddButtonControlInDeliveryGrid(1)
                AddSTRButtonControlInDeliveryGrid(1)
            End If
        End If

    End Sub
End Class

