'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Runtime.Serialization

Namespace LicenseServices
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="BaseModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute(),  _
     System.Runtime.Serialization.KnownTypeAttribute(GetType(LicenseServices.ClientModel)),  _
     System.Runtime.Serialization.KnownTypeAttribute(GetType(LicenseServices.ClientSiteMapModel)),  _
     System.Runtime.Serialization.KnownTypeAttribute(GetType(LicenseServices.AutoUpdateVersionInfoModel)),  _
     System.Runtime.Serialization.KnownTypeAttribute(GetType(LicenseServices.LicenseModel))>  _
    Partial Public Class BaseModel
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CreatedByField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CreatedOnField As System.Nullable(Of Date)
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private IsActiveField As Boolean
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private UpdatedByField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private UpdatedOnField As System.Nullable(Of Date)
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Return Me.CreatedByField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CreatedByField, value) <> true) Then
                    Me.CreatedByField = value
                    Me.RaisePropertyChanged("CreatedBy")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CreatedOn() As System.Nullable(Of Date)
            Get
                Return Me.CreatedOnField
            End Get
            Set
                If (Me.CreatedOnField.Equals(value) <> true) Then
                    Me.CreatedOnField = value
                    Me.RaisePropertyChanged("CreatedOn")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property IsActive() As Boolean
            Get
                Return Me.IsActiveField
            End Get
            Set
                If (Me.IsActiveField.Equals(value) <> true) Then
                    Me.IsActiveField = value
                    Me.RaisePropertyChanged("IsActive")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property UpdatedBy() As String
            Get
                Return Me.UpdatedByField
            End Get
            Set
                If (Object.ReferenceEquals(Me.UpdatedByField, value) <> true) Then
                    Me.UpdatedByField = value
                    Me.RaisePropertyChanged("UpdatedBy")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property UpdatedOn() As System.Nullable(Of Date)
            Get
                Return Me.UpdatedOnField
            End Get
            Set
                If (Me.UpdatedOnField.Equals(value) <> true) Then
                    Me.UpdatedOnField = value
                    Me.RaisePropertyChanged("UpdatedOn")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="ClientModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute()>  _
    Partial Public Class ClientModel
        Inherits LicenseServices.BaseModel
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private BOLicenseField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private BOLicenseActivatedField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private BOValidityField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CCEConnectionField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClienSiteListField() As LicenseServices.ClientSiteMapModel
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClientIDField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClientNameField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentVersionField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private LicenseListField() As LicenseServices.LicenseModel
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MasterKeyField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MobexLicenseField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MobexLicenseActivatedField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MobexValidityField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private POSLicenseField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private POSLicenseActivatedField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private POSValidityField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private PaymentStatusField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ProcurementDateField As Date
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private UpgradedVersionField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property BOLicense() As Integer
            Get
                Return Me.BOLicenseField
            End Get
            Set
                If (Me.BOLicenseField.Equals(value) <> true) Then
                    Me.BOLicenseField = value
                    Me.RaisePropertyChanged("BOLicense")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property BOLicenseActivated() As Integer
            Get
                Return Me.BOLicenseActivatedField
            End Get
            Set
                If (Me.BOLicenseActivatedField.Equals(value) <> true) Then
                    Me.BOLicenseActivatedField = value
                    Me.RaisePropertyChanged("BOLicenseActivated")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property BOValidity() As Integer
            Get
                Return Me.BOValidityField
            End Get
            Set
                If (Me.BOValidityField.Equals(value) <> true) Then
                    Me.BOValidityField = value
                    Me.RaisePropertyChanged("BOValidity")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CCEConnection() As String
            Get
                Return Me.CCEConnectionField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CCEConnectionField, value) <> true) Then
                    Me.CCEConnectionField = value
                    Me.RaisePropertyChanged("CCEConnection")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClienSiteList() As LicenseServices.ClientSiteMapModel()
            Get
                Return Me.ClienSiteListField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ClienSiteListField, value) <> true) Then
                    Me.ClienSiteListField = value
                    Me.RaisePropertyChanged("ClienSiteList")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClientID() As Integer
            Get
                Return Me.ClientIDField
            End Get
            Set
                If (Me.ClientIDField.Equals(value) <> true) Then
                    Me.ClientIDField = value
                    Me.RaisePropertyChanged("ClientID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClientName() As String
            Get
                Return Me.ClientNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ClientNameField, value) <> true) Then
                    Me.ClientNameField = value
                    Me.RaisePropertyChanged("ClientName")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentVersion() As String
            Get
                Return Me.CurrentVersionField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CurrentVersionField, value) <> true) Then
                    Me.CurrentVersionField = value
                    Me.RaisePropertyChanged("CurrentVersion")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property LicenseList() As LicenseServices.LicenseModel()
            Get
                Return Me.LicenseListField
            End Get
            Set
                If (Object.ReferenceEquals(Me.LicenseListField, value) <> true) Then
                    Me.LicenseListField = value
                    Me.RaisePropertyChanged("LicenseList")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MasterKey() As String
            Get
                Return Me.MasterKeyField
            End Get
            Set
                If (Object.ReferenceEquals(Me.MasterKeyField, value) <> true) Then
                    Me.MasterKeyField = value
                    Me.RaisePropertyChanged("MasterKey")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MobexLicense() As Integer
            Get
                Return Me.MobexLicenseField
            End Get
            Set
                If (Me.MobexLicenseField.Equals(value) <> true) Then
                    Me.MobexLicenseField = value
                    Me.RaisePropertyChanged("MobexLicense")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MobexLicenseActivated() As Integer
            Get
                Return Me.MobexLicenseActivatedField
            End Get
            Set
                If (Me.MobexLicenseActivatedField.Equals(value) <> true) Then
                    Me.MobexLicenseActivatedField = value
                    Me.RaisePropertyChanged("MobexLicenseActivated")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MobexValidity() As Integer
            Get
                Return Me.MobexValidityField
            End Get
            Set
                If (Me.MobexValidityField.Equals(value) <> true) Then
                    Me.MobexValidityField = value
                    Me.RaisePropertyChanged("MobexValidity")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property POSLicense() As Integer
            Get
                Return Me.POSLicenseField
            End Get
            Set
                If (Me.POSLicenseField.Equals(value) <> true) Then
                    Me.POSLicenseField = value
                    Me.RaisePropertyChanged("POSLicense")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property POSLicenseActivated() As Integer
            Get
                Return Me.POSLicenseActivatedField
            End Get
            Set
                If (Me.POSLicenseActivatedField.Equals(value) <> true) Then
                    Me.POSLicenseActivatedField = value
                    Me.RaisePropertyChanged("POSLicenseActivated")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property POSValidity() As Integer
            Get
                Return Me.POSValidityField
            End Get
            Set
                If (Me.POSValidityField.Equals(value) <> true) Then
                    Me.POSValidityField = value
                    Me.RaisePropertyChanged("POSValidity")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property PaymentStatus() As String
            Get
                Return Me.PaymentStatusField
            End Get
            Set
                If (Object.ReferenceEquals(Me.PaymentStatusField, value) <> true) Then
                    Me.PaymentStatusField = value
                    Me.RaisePropertyChanged("PaymentStatus")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ProcurementDate() As Date
            Get
                Return Me.ProcurementDateField
            End Get
            Set
                If (Me.ProcurementDateField.Equals(value) <> true) Then
                    Me.ProcurementDateField = value
                    Me.RaisePropertyChanged("ProcurementDate")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property UpgradedVersion() As String
            Get
                Return Me.UpgradedVersionField
            End Get
            Set
                If (Object.ReferenceEquals(Me.UpgradedVersionField, value) <> true) Then
                    Me.UpgradedVersionField = value
                    Me.RaisePropertyChanged("UpgradedVersion")
                End If
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="ClientSiteMapModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute()>  _
    Partial Public Class ClientSiteMapModel
        Inherits LicenseServices.BaseModel
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private BOStatusField As Boolean
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClientIdField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private FOStatusField As Boolean
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private SiteCodeField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private SiteNameField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property BOStatus() As Boolean
            Get
                Return Me.BOStatusField
            End Get
            Set
                If (Me.BOStatusField.Equals(value) <> true) Then
                    Me.BOStatusField = value
                    Me.RaisePropertyChanged("BOStatus")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClientId() As Integer
            Get
                Return Me.ClientIdField
            End Get
            Set
                If (Me.ClientIdField.Equals(value) <> true) Then
                    Me.ClientIdField = value
                    Me.RaisePropertyChanged("ClientId")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property FOStatus() As Boolean
            Get
                Return Me.FOStatusField
            End Get
            Set
                If (Me.FOStatusField.Equals(value) <> true) Then
                    Me.FOStatusField = value
                    Me.RaisePropertyChanged("FOStatus")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property SiteCode() As String
            Get
                Return Me.SiteCodeField
            End Get
            Set
                If (Object.ReferenceEquals(Me.SiteCodeField, value) <> true) Then
                    Me.SiteCodeField = value
                    Me.RaisePropertyChanged("SiteCode")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property SiteName() As String
            Get
                Return Me.SiteNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.SiteNameField, value) <> true) Then
                    Me.SiteNameField = value
                    Me.RaisePropertyChanged("SiteName")
                End If
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="AutoUpdateVersionInfoModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute()>  _
    Partial Public Class AutoUpdateVersionInfoModel
        Inherits LicenseServices.BaseModel
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentVersionField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private HardwareKeyField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private UpgradedVersionField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentVersion() As String
            Get
                Return Me.CurrentVersionField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CurrentVersionField, value) <> true) Then
                    Me.CurrentVersionField = value
                    Me.RaisePropertyChanged("CurrentVersion")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property HardwareKey() As String
            Get
                Return Me.HardwareKeyField
            End Get
            Set
                If (Object.ReferenceEquals(Me.HardwareKeyField, value) <> true) Then
                    Me.HardwareKeyField = value
                    Me.RaisePropertyChanged("HardwareKey")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property UpgradedVersion() As String
            Get
                Return Me.UpgradedVersionField
            End Get
            Set
                If (Object.ReferenceEquals(Me.UpgradedVersionField, value) <> true) Then
                    Me.UpgradedVersionField = value
                    Me.RaisePropertyChanged("UpgradedVersion")
                End If
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="LicenseModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute()>  _
    Partial Public Class LicenseModel
        Inherits LicenseServices.BaseModel
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ActivationModeField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ActivationStateField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ApplicationTypeField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClientIDField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ExpireDateField As Date
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private HardwareKeyField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private IssueDateField As Date
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private LicenseIDField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private LicenseKeyField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MasterKeyField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ProductIDField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private SiteCodeField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private TerminalIDField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ValidityField As Integer
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ActivationMode() As String
            Get
                Return Me.ActivationModeField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ActivationModeField, value) <> true) Then
                    Me.ActivationModeField = value
                    Me.RaisePropertyChanged("ActivationMode")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ActivationState() As String
            Get
                Return Me.ActivationStateField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ActivationStateField, value) <> true) Then
                    Me.ActivationStateField = value
                    Me.RaisePropertyChanged("ActivationState")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ApplicationType() As String
            Get
                Return Me.ApplicationTypeField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ApplicationTypeField, value) <> true) Then
                    Me.ApplicationTypeField = value
                    Me.RaisePropertyChanged("ApplicationType")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClientID() As Integer
            Get
                Return Me.ClientIDField
            End Get
            Set
                If (Me.ClientIDField.Equals(value) <> true) Then
                    Me.ClientIDField = value
                    Me.RaisePropertyChanged("ClientID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ExpireDate() As Date
            Get
                Return Me.ExpireDateField
            End Get
            Set
                If (Me.ExpireDateField.Equals(value) <> true) Then
                    Me.ExpireDateField = value
                    Me.RaisePropertyChanged("ExpireDate")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property HardwareKey() As String
            Get
                Return Me.HardwareKeyField
            End Get
            Set
                If (Object.ReferenceEquals(Me.HardwareKeyField, value) <> true) Then
                    Me.HardwareKeyField = value
                    Me.RaisePropertyChanged("HardwareKey")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property IssueDate() As Date
            Get
                Return Me.IssueDateField
            End Get
            Set
                If (Me.IssueDateField.Equals(value) <> true) Then
                    Me.IssueDateField = value
                    Me.RaisePropertyChanged("IssueDate")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property LicenseID() As Integer
            Get
                Return Me.LicenseIDField
            End Get
            Set
                If (Me.LicenseIDField.Equals(value) <> true) Then
                    Me.LicenseIDField = value
                    Me.RaisePropertyChanged("LicenseID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property LicenseKey() As String
            Get
                Return Me.LicenseKeyField
            End Get
            Set
                If (Object.ReferenceEquals(Me.LicenseKeyField, value) <> true) Then
                    Me.LicenseKeyField = value
                    Me.RaisePropertyChanged("LicenseKey")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MasterKey() As String
            Get
                Return Me.MasterKeyField
            End Get
            Set
                If (Object.ReferenceEquals(Me.MasterKeyField, value) <> true) Then
                    Me.MasterKeyField = value
                    Me.RaisePropertyChanged("MasterKey")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ProductID() As String
            Get
                Return Me.ProductIDField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ProductIDField, value) <> true) Then
                    Me.ProductIDField = value
                    Me.RaisePropertyChanged("ProductID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property SiteCode() As String
            Get
                Return Me.SiteCodeField
            End Get
            Set
                If (Object.ReferenceEquals(Me.SiteCodeField, value) <> true) Then
                    Me.SiteCodeField = value
                    Me.RaisePropertyChanged("SiteCode")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property TerminalID() As String
            Get
                Return Me.TerminalIDField
            End Get
            Set
                If (Object.ReferenceEquals(Me.TerminalIDField, value) <> true) Then
                    Me.TerminalIDField = value
                    Me.RaisePropertyChanged("TerminalID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property Validity() As Integer
            Get
                Return Me.ValidityField
            End Get
            Set
                If (Me.ValidityField.Equals(value) <> true) Then
                    Me.ValidityField = value
                    Me.RaisePropertyChanged("Validity")
                End If
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="ReconciliationModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute()>  _
    Partial Public Class ReconciliationModel
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClientIDField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ClientNameField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private DeactiveLicenseField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private POSLicenseField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private POSLicenseActivatedField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ReconciliationStatusField As String
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClientID() As Integer
            Get
                Return Me.ClientIDField
            End Get
            Set
                If (Me.ClientIDField.Equals(value) <> true) Then
                    Me.ClientIDField = value
                    Me.RaisePropertyChanged("ClientID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ClientName() As String
            Get
                Return Me.ClientNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ClientNameField, value) <> true) Then
                    Me.ClientNameField = value
                    Me.RaisePropertyChanged("ClientName")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property DeactiveLicense() As Integer
            Get
                Return Me.DeactiveLicenseField
            End Get
            Set
                If (Me.DeactiveLicenseField.Equals(value) <> true) Then
                    Me.DeactiveLicenseField = value
                    Me.RaisePropertyChanged("DeactiveLicense")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property POSLicense() As Integer
            Get
                Return Me.POSLicenseField
            End Get
            Set
                If (Me.POSLicenseField.Equals(value) <> true) Then
                    Me.POSLicenseField = value
                    Me.RaisePropertyChanged("POSLicense")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property POSLicenseActivated() As Integer
            Get
                Return Me.POSLicenseActivatedField
            End Get
            Set
                If (Me.POSLicenseActivatedField.Equals(value) <> true) Then
                    Me.POSLicenseActivatedField = value
                    Me.RaisePropertyChanged("POSLicenseActivated")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ReconciliationStatus() As String
            Get
                Return Me.ReconciliationStatusField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ReconciliationStatusField, value) <> true) Then
                    Me.ReconciliationStatusField = value
                    Me.RaisePropertyChanged("ReconciliationStatus")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="LicenseBackDatedModel", [Namespace]:="http://schemas.datacontract.org/2004/07/SpectrumLicense.Models"),  _
     System.SerializableAttribute()>  _
    Partial Public Class LicenseBackDatedModel
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ExpireDateField As Date
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private IssueDateField As Date
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private LicenseKeyField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ValidityField As Integer
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ExpireDate() As Date
            Get
                Return Me.ExpireDateField
            End Get
            Set
                If (Me.ExpireDateField.Equals(value) <> true) Then
                    Me.ExpireDateField = value
                    Me.RaisePropertyChanged("ExpireDate")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property IssueDate() As Date
            Get
                Return Me.IssueDateField
            End Get
            Set
                If (Me.IssueDateField.Equals(value) <> true) Then
                    Me.IssueDateField = value
                    Me.RaisePropertyChanged("IssueDate")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property LicenseKey() As String
            Get
                Return Me.LicenseKeyField
            End Get
            Set
                If (Object.ReferenceEquals(Me.LicenseKeyField, value) <> true) Then
                    Me.LicenseKeyField = value
                    Me.RaisePropertyChanged("LicenseKey")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property Validity() As Integer
            Get
                Return Me.ValidityField
            End Get
            Set
                If (Me.ValidityField.Equals(value) <> true) Then
                    Me.ValidityField = value
                    Me.RaisePropertyChanged("Validity")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="LicenseServices.ILicenseService")>  _
    Public Interface ILicenseService
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/SaveLicense", ReplyAction:="http://tempuri.org/ILicenseService/SaveLicenseResponse")>  _
        Sub SaveLicense(ByVal licenseModel As LicenseServices.LicenseModel)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/SaveLicense", ReplyAction:="http://tempuri.org/ILicenseService/SaveLicenseResponse")>  _
        Function BeginSaveLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndSaveLicense(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/SaveLicense1", ReplyAction:="http://tempuri.org/ILicenseService/SaveLicense1Response")>  _
        Sub SaveLicense1(ByVal licenseModel As LicenseServices.LicenseModel, ByVal clientModel As LicenseServices.ClientModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/SaveLicense1", ReplyAction:="http://tempuri.org/ILicenseService/SaveLicense1Response")>  _
        Function BeginSaveLicense1(ByVal licenseModel As LicenseServices.LicenseModel, ByVal clientModel As LicenseServices.ClientModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndSaveLicense1(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/UpdateLicense", ReplyAction:="http://tempuri.org/ILicenseService/UpdateLicenseResponse")>  _
        Sub UpdateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal licenseStatus As String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/UpdateLicense", ReplyAction:="http://tempuri.org/ILicenseService/UpdateLicenseResponse")>  _
        Function BeginUpdateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal licenseStatus As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndUpdateLicense(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/DeleteByID", ReplyAction:="http://tempuri.org/ILicenseService/DeleteByIDResponse")>  _
        Sub DeleteByID(ByVal licenseID As Integer)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/DeleteByID", ReplyAction:="http://tempuri.org/ILicenseService/DeleteByIDResponse")>  _
        Function BeginDeleteByID(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndDeleteByID(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/DeleteByHardwareKey", ReplyAction:="http://tempuri.org/ILicenseService/DeleteByHardwareKeyResponse")>  _
        Sub DeleteByHardwareKey(ByVal hardwareKey As String)
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/DeleteByHardwareKey", ReplyAction:="http://tempuri.org/ILicenseService/DeleteByHardwareKeyResponse")>  _
        Function BeginDeleteByHardwareKey(ByVal hardwareKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndDeleteByHardwareKey(ByVal result As System.IAsyncResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseList", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseListResponse")>  _
        Function GetLicenseList() As LicenseServices.LicenseModel()
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseList", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseListResponse")>  _
        Function BeginGetLicenseList(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseList(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel()
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseByClientID", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByClientIDResponse")>  _
        Function GetLicenseByClientID(ByVal clientID As Integer) As LicenseServices.LicenseModel()
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseByClientID", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByClientIDResponse")>  _
        Function BeginGetLicenseByClientID(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseByClientID(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel()
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetClientByID", ReplyAction:="http://tempuri.org/ILicenseService/GetClientByIDResponse")>  _
        Function GetClientByID(ByVal clientID As Integer) As LicenseServices.ClientModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetClientByID", ReplyAction:="http://tempuri.org/ILicenseService/GetClientByIDResponse")>  _
        Function BeginGetClientByID(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetClientByID(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseByID", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByIDResponse")>  _
        Function GetLicenseByID(ByVal licenseID As Integer) As LicenseServices.LicenseModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseByID", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByIDResponse")>  _
        Function BeginGetLicenseByID(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseByID(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetClientList", ReplyAction:="http://tempuri.org/ILicenseService/GetClientListResponse")>  _
        Function GetClientList() As LicenseServices.ClientModel()
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetClientList", ReplyAction:="http://tempuri.org/ILicenseService/GetClientListResponse")>  _
        Function BeginGetClientList(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetClientList(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel()
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/DeactivateLicense", ReplyAction:="http://tempuri.org/ILicenseService/DeactivateLicenseResponse")>  _
        Function DeactivateLicense(ByVal licenseID As Integer) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/DeactivateLicense", ReplyAction:="http://tempuri.org/ILicenseService/DeactivateLicenseResponse")>  _
        Function BeginDeactivateLicense(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndDeactivateLicense(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/ActivateLicense", ReplyAction:="http://tempuri.org/ILicenseService/ActivateLicenseResponse")>  _
        Function ActivateLicense(ByVal licenseID As Integer) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/ActivateLicense", ReplyAction:="http://tempuri.org/ILicenseService/ActivateLicenseResponse")>  _
        Function BeginActivateLicense(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndActivateLicense(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/AllocateLicense", ReplyAction:="http://tempuri.org/ILicenseService/AllocateLicenseResponse")>  _
        Function AllocateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel) As LicenseServices.LicenseModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/AllocateLicense", ReplyAction:="http://tempuri.org/ILicenseService/AllocateLicenseResponse")>  _
        Function BeginAllocateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndAllocateLicense(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseByLicenseKey", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByLicenseKeyResponse")>  _
        Function GetLicenseByLicenseKey(ByVal licenseKey As String) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseByLicenseKey", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByLicenseKeyResponse")>  _
        Function BeginGetLicenseByLicenseKey(ByVal licenseKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseByLicenseKey(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKey", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKeyResponse")>  _
        Function GetLicenseByHardwareKey(ByVal hardwareKey As String, ByVal prodType As String, ByVal clientid As Integer, ByVal sitecode As String) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKey", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKeyResponse")>  _
        Function BeginGetLicenseByHardwareKey(ByVal hardwareKey As String, ByVal prodType As String, ByVal clientid As Integer, ByVal sitecode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseByHardwareKey(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseReconciliationData", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseReconciliationDataResponse")>  _
        Function GetLicenseReconciliationData() As LicenseServices.ReconciliationModel()
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseReconciliationData", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseReconciliationDataResponse")>  _
        Function BeginGetLicenseReconciliationData(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseReconciliationData(ByVal result As System.IAsyncResult) As LicenseServices.ReconciliationModel()
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetReconciliationDetailsByClientID", ReplyAction:="http://tempuri.org/ILicenseService/GetReconciliationDetailsByClientIDResponse")>  _
        Function GetReconciliationDetailsByClientID(ByVal clientID As Integer) As LicenseServices.ClientModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetReconciliationDetailsByClientID", ReplyAction:="http://tempuri.org/ILicenseService/GetReconciliationDetailsByClientIDResponse")>  _
        Function BeginGetReconciliationDetailsByClientID(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetReconciliationDetailsByClientID(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/ClientLicenseDetailsByMasterKey", ReplyAction:="http://tempuri.org/ILicenseService/ClientLicenseDetailsByMasterKeyResponse")>  _
        Function ClientLicenseDetailsByMasterKey(ByVal masterKey As String) As LicenseServices.ClientModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/ClientLicenseDetailsByMasterKey", ReplyAction:="http://tempuri.org/ILicenseService/ClientLicenseDetailsByMasterKeyResponse")>  _
        Function BeginClientLicenseDetailsByMasterKey(ByVal masterKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndClientLicenseDetailsByMasterKey(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseByClientIDModel", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByClientIDModelResponse")>  _
        Function GetLicenseByClientIDModel(ByVal clientID As Integer) As LicenseServices.LicenseModel()
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseByClientIDModel", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByClientIDModelResponse")>  _
        Function BeginGetLicenseByClientIDModel(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseByClientIDModel(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel()
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/UpdateLicenseBackDated", ReplyAction:="http://tempuri.org/ILicenseService/UpdateLicenseBackDatedResponse")>  _
        Function UpdateLicenseBackDated(ByVal mstLicense As LicenseServices.LicenseModel) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/UpdateLicenseBackDated", ReplyAction:="http://tempuri.org/ILicenseService/UpdateLicenseBackDatedResponse")>  _
        Function BeginUpdateLicenseBackDated(ByVal mstLicense As LicenseServices.LicenseModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUpdateLicenseBackDated(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetIssueDateByLicenseKey", ReplyAction:="http://tempuri.org/ILicenseService/GetIssueDateByLicenseKeyResponse")>  _
        Function GetIssueDateByLicenseKey(ByVal licenseKey As String) As Date
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetIssueDateByLicenseKey", ReplyAction:="http://tempuri.org/ILicenseService/GetIssueDateByLicenseKeyResponse")>  _
        Function BeginGetIssueDateByLicenseKey(ByVal licenseKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetIssueDateByLicenseKey(ByVal result As System.IAsyncResult) As Date
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKeys", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKeysResponse")>  _
        Function GetLicenseByHardwareKeys(ByVal hardwareKey As String, ByVal siteCode As String) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKeys", ReplyAction:="http://tempuri.org/ILicenseService/GetLicenseByHardwareKeysResponse")>  _
        Function BeginGetLicenseByHardwareKeys(ByVal hardwareKey As String, ByVal siteCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetLicenseByHardwareKeys(ByVal result As System.IAsyncResult) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKey", ReplyAction:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKeyResponse")>  _
        Function GetIssueDateByHardwareKey(ByVal hardwareKey As String, ByVal siteCode As String) As LicenseServices.LicenseBackDatedModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKey", ReplyAction:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKeyResponse")>  _
        Function BeginGetIssueDateByHardwareKey(ByVal hardwareKey As String, ByVal siteCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetIssueDateByHardwareKey(ByVal result As System.IAsyncResult) As LicenseServices.LicenseBackDatedModel
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKeyNew", ReplyAction:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKeyNewResponse")>  _
        Function GetIssueDateByHardwareKeyNew(ByVal hardwareKey As String, ByVal siteCode As String, ByVal terminalId As String) As LicenseServices.LicenseBackDatedModel
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKeyNew", ReplyAction:="http://tempuri.org/ILicenseService/GetIssueDateByHardwareKeyNewResponse")>  _
        Function BeginGetIssueDateByHardwareKeyNew(ByVal hardwareKey As String, ByVal siteCode As String, ByVal terminalId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndGetIssueDateByHardwareKeyNew(ByVal result As System.IAsyncResult) As LicenseServices.LicenseBackDatedModel
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface ILicenseServiceChannel
        Inherits LicenseServices.ILicenseService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseModel()
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseModel())
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseByClientIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseModel()
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseModel())
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetClientByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.ClientModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.ClientModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetClientListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.ClientModel()
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.ClientModel())
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class DeactivateLicenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ActivateLicenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class AllocateLicenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseByLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseByHardwareKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseReconciliationDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.ReconciliationModel()
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.ReconciliationModel())
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetReconciliationDetailsByClientIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.ClientModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.ClientModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ClientLicenseDetailsByMasterKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.ClientModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.ClientModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseByClientIDModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseModel()
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseModel())
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class UpdateLicenseBackDatedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetIssueDateByLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Date
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetLicenseByHardwareKeysCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Boolean
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetIssueDateByHardwareKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseBackDatedModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseBackDatedModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class GetIssueDateByHardwareKeyNewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As LicenseServices.LicenseBackDatedModel
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LicenseServices.LicenseBackDatedModel)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class LicenseServiceClient
        Inherits System.ServiceModel.ClientBase(Of LicenseServices.ILicenseService)
        Implements LicenseServices.ILicenseService
        
        Private onBeginSaveLicenseDelegate As BeginOperationDelegate
        
        Private onEndSaveLicenseDelegate As EndOperationDelegate
        
        Private onSaveLicenseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginSaveLicense1Delegate As BeginOperationDelegate
        
        Private onEndSaveLicense1Delegate As EndOperationDelegate
        
        Private onSaveLicense1CompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateLicenseDelegate As BeginOperationDelegate
        
        Private onEndUpdateLicenseDelegate As EndOperationDelegate
        
        Private onUpdateLicenseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginDeleteByIDDelegate As BeginOperationDelegate
        
        Private onEndDeleteByIDDelegate As EndOperationDelegate
        
        Private onDeleteByIDCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginDeleteByHardwareKeyDelegate As BeginOperationDelegate
        
        Private onEndDeleteByHardwareKeyDelegate As EndOperationDelegate
        
        Private onDeleteByHardwareKeyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseListDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseListDelegate As EndOperationDelegate
        
        Private onGetLicenseListCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseByClientIDDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseByClientIDDelegate As EndOperationDelegate
        
        Private onGetLicenseByClientIDCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetClientByIDDelegate As BeginOperationDelegate
        
        Private onEndGetClientByIDDelegate As EndOperationDelegate
        
        Private onGetClientByIDCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseByIDDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseByIDDelegate As EndOperationDelegate
        
        Private onGetLicenseByIDCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetClientListDelegate As BeginOperationDelegate
        
        Private onEndGetClientListDelegate As EndOperationDelegate
        
        Private onGetClientListCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginDeactivateLicenseDelegate As BeginOperationDelegate
        
        Private onEndDeactivateLicenseDelegate As EndOperationDelegate
        
        Private onDeactivateLicenseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginActivateLicenseDelegate As BeginOperationDelegate
        
        Private onEndActivateLicenseDelegate As EndOperationDelegate
        
        Private onActivateLicenseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginAllocateLicenseDelegate As BeginOperationDelegate
        
        Private onEndAllocateLicenseDelegate As EndOperationDelegate
        
        Private onAllocateLicenseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseByLicenseKeyDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseByLicenseKeyDelegate As EndOperationDelegate
        
        Private onGetLicenseByLicenseKeyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseByHardwareKeyDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseByHardwareKeyDelegate As EndOperationDelegate
        
        Private onGetLicenseByHardwareKeyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseReconciliationDataDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseReconciliationDataDelegate As EndOperationDelegate
        
        Private onGetLicenseReconciliationDataCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetReconciliationDetailsByClientIDDelegate As BeginOperationDelegate
        
        Private onEndGetReconciliationDetailsByClientIDDelegate As EndOperationDelegate
        
        Private onGetReconciliationDetailsByClientIDCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginClientLicenseDetailsByMasterKeyDelegate As BeginOperationDelegate
        
        Private onEndClientLicenseDetailsByMasterKeyDelegate As EndOperationDelegate
        
        Private onClientLicenseDetailsByMasterKeyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseByClientIDModelDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseByClientIDModelDelegate As EndOperationDelegate
        
        Private onGetLicenseByClientIDModelCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUpdateLicenseBackDatedDelegate As BeginOperationDelegate
        
        Private onEndUpdateLicenseBackDatedDelegate As EndOperationDelegate
        
        Private onUpdateLicenseBackDatedCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetIssueDateByLicenseKeyDelegate As BeginOperationDelegate
        
        Private onEndGetIssueDateByLicenseKeyDelegate As EndOperationDelegate
        
        Private onGetIssueDateByLicenseKeyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetLicenseByHardwareKeysDelegate As BeginOperationDelegate
        
        Private onEndGetLicenseByHardwareKeysDelegate As EndOperationDelegate
        
        Private onGetLicenseByHardwareKeysCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetIssueDateByHardwareKeyDelegate As BeginOperationDelegate
        
        Private onEndGetIssueDateByHardwareKeyDelegate As EndOperationDelegate
        
        Private onGetIssueDateByHardwareKeyCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginGetIssueDateByHardwareKeyNewDelegate As BeginOperationDelegate
        
        Private onEndGetIssueDateByHardwareKeyNewDelegate As EndOperationDelegate
        
        Private onGetIssueDateByHardwareKeyNewCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Event SaveLicenseCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event SaveLicense1Completed As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event UpdateLicenseCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event DeleteByIDCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event DeleteByHardwareKeyCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event GetLicenseListCompleted As System.EventHandler(Of GetLicenseListCompletedEventArgs)
        
        Public Event GetLicenseByClientIDCompleted As System.EventHandler(Of GetLicenseByClientIDCompletedEventArgs)
        
        Public Event GetClientByIDCompleted As System.EventHandler(Of GetClientByIDCompletedEventArgs)
        
        Public Event GetLicenseByIDCompleted As System.EventHandler(Of GetLicenseByIDCompletedEventArgs)
        
        Public Event GetClientListCompleted As System.EventHandler(Of GetClientListCompletedEventArgs)
        
        Public Event DeactivateLicenseCompleted As System.EventHandler(Of DeactivateLicenseCompletedEventArgs)
        
        Public Event ActivateLicenseCompleted As System.EventHandler(Of ActivateLicenseCompletedEventArgs)
        
        Public Event AllocateLicenseCompleted As System.EventHandler(Of AllocateLicenseCompletedEventArgs)
        
        Public Event GetLicenseByLicenseKeyCompleted As System.EventHandler(Of GetLicenseByLicenseKeyCompletedEventArgs)
        
        Public Event GetLicenseByHardwareKeyCompleted As System.EventHandler(Of GetLicenseByHardwareKeyCompletedEventArgs)
        
        Public Event GetLicenseReconciliationDataCompleted As System.EventHandler(Of GetLicenseReconciliationDataCompletedEventArgs)
        
        Public Event GetReconciliationDetailsByClientIDCompleted As System.EventHandler(Of GetReconciliationDetailsByClientIDCompletedEventArgs)
        
        Public Event ClientLicenseDetailsByMasterKeyCompleted As System.EventHandler(Of ClientLicenseDetailsByMasterKeyCompletedEventArgs)
        
        Public Event GetLicenseByClientIDModelCompleted As System.EventHandler(Of GetLicenseByClientIDModelCompletedEventArgs)
        
        Public Event UpdateLicenseBackDatedCompleted As System.EventHandler(Of UpdateLicenseBackDatedCompletedEventArgs)
        
        Public Event GetIssueDateByLicenseKeyCompleted As System.EventHandler(Of GetIssueDateByLicenseKeyCompletedEventArgs)
        
        Public Event GetLicenseByHardwareKeysCompleted As System.EventHandler(Of GetLicenseByHardwareKeysCompletedEventArgs)
        
        Public Event GetIssueDateByHardwareKeyCompleted As System.EventHandler(Of GetIssueDateByHardwareKeyCompletedEventArgs)
        
        Public Event GetIssueDateByHardwareKeyNewCompleted As System.EventHandler(Of GetIssueDateByHardwareKeyNewCompletedEventArgs)
        
        Public Sub SaveLicense(ByVal licenseModel As LicenseServices.LicenseModel) Implements LicenseServices.ILicenseService.SaveLicense
            MyBase.Channel.SaveLicense(licenseModel)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginSaveLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginSaveLicense
            Return MyBase.Channel.BeginSaveLicense(licenseModel, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndSaveLicense(ByVal result As System.IAsyncResult) Implements LicenseServices.ILicenseService.EndSaveLicense
            MyBase.Channel.EndSaveLicense(result)
        End Sub
        
        Private Function OnBeginSaveLicense(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseModel As LicenseServices.LicenseModel = CType(inValues(0),LicenseServices.LicenseModel)
            Return Me.BeginSaveLicense(licenseModel, callback, asyncState)
        End Function
        
        Private Function OnEndSaveLicense(ByVal result As System.IAsyncResult) As Object()
            Me.EndSaveLicense(result)
            Return Nothing
        End Function
        
        Private Sub OnSaveLicenseCompleted(ByVal state As Object)
            If (Not (Me.SaveLicenseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent SaveLicenseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub SaveLicenseAsync(ByVal licenseModel As LicenseServices.LicenseModel)
            Me.SaveLicenseAsync(licenseModel, Nothing)
        End Sub
        
        Public Overloads Sub SaveLicenseAsync(ByVal licenseModel As LicenseServices.LicenseModel, ByVal userState As Object)
            If (Me.onBeginSaveLicenseDelegate Is Nothing) Then
                Me.onBeginSaveLicenseDelegate = AddressOf Me.OnBeginSaveLicense
            End If
            If (Me.onEndSaveLicenseDelegate Is Nothing) Then
                Me.onEndSaveLicenseDelegate = AddressOf Me.OnEndSaveLicense
            End If
            If (Me.onSaveLicenseCompletedDelegate Is Nothing) Then
                Me.onSaveLicenseCompletedDelegate = AddressOf Me.OnSaveLicenseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginSaveLicenseDelegate, New Object() {licenseModel}, Me.onEndSaveLicenseDelegate, Me.onSaveLicenseCompletedDelegate, userState)
        End Sub
        
        Public Sub SaveLicense1(ByVal licenseModel As LicenseServices.LicenseModel, ByVal clientModel As LicenseServices.ClientModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel) Implements LicenseServices.ILicenseService.SaveLicense1
            MyBase.Channel.SaveLicense1(licenseModel, clientModel, versionModel)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginSaveLicense1(ByVal licenseModel As LicenseServices.LicenseModel, ByVal clientModel As LicenseServices.ClientModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginSaveLicense1
            Return MyBase.Channel.BeginSaveLicense1(licenseModel, clientModel, versionModel, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndSaveLicense1(ByVal result As System.IAsyncResult) Implements LicenseServices.ILicenseService.EndSaveLicense1
            MyBase.Channel.EndSaveLicense1(result)
        End Sub
        
        Private Function OnBeginSaveLicense1(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseModel As LicenseServices.LicenseModel = CType(inValues(0),LicenseServices.LicenseModel)
            Dim clientModel As LicenseServices.ClientModel = CType(inValues(1),LicenseServices.ClientModel)
            Dim versionModel As LicenseServices.AutoUpdateVersionInfoModel = CType(inValues(2),LicenseServices.AutoUpdateVersionInfoModel)
            Return Me.BeginSaveLicense1(licenseModel, clientModel, versionModel, callback, asyncState)
        End Function
        
        Private Function OnEndSaveLicense1(ByVal result As System.IAsyncResult) As Object()
            Me.EndSaveLicense1(result)
            Return Nothing
        End Function
        
        Private Sub OnSaveLicense1Completed(ByVal state As Object)
            If (Not (Me.SaveLicense1CompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent SaveLicense1Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub SaveLicense1Async(ByVal licenseModel As LicenseServices.LicenseModel, ByVal clientModel As LicenseServices.ClientModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel)
            Me.SaveLicense1Async(licenseModel, clientModel, versionModel, Nothing)
        End Sub
        
        Public Overloads Sub SaveLicense1Async(ByVal licenseModel As LicenseServices.LicenseModel, ByVal clientModel As LicenseServices.ClientModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel, ByVal userState As Object)
            If (Me.onBeginSaveLicense1Delegate Is Nothing) Then
                Me.onBeginSaveLicense1Delegate = AddressOf Me.OnBeginSaveLicense1
            End If
            If (Me.onEndSaveLicense1Delegate Is Nothing) Then
                Me.onEndSaveLicense1Delegate = AddressOf Me.OnEndSaveLicense1
            End If
            If (Me.onSaveLicense1CompletedDelegate Is Nothing) Then
                Me.onSaveLicense1CompletedDelegate = AddressOf Me.OnSaveLicense1Completed
            End If
            MyBase.InvokeAsync(Me.onBeginSaveLicense1Delegate, New Object() {licenseModel, clientModel, versionModel}, Me.onEndSaveLicense1Delegate, Me.onSaveLicense1CompletedDelegate, userState)
        End Sub
        
        Public Sub UpdateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal licenseStatus As String) Implements LicenseServices.ILicenseService.UpdateLicense
            MyBase.Channel.UpdateLicense(licenseModel, licenseStatus)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUpdateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal licenseStatus As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginUpdateLicense
            Return MyBase.Channel.BeginUpdateLicense(licenseModel, licenseStatus, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndUpdateLicense(ByVal result As System.IAsyncResult) Implements LicenseServices.ILicenseService.EndUpdateLicense
            MyBase.Channel.EndUpdateLicense(result)
        End Sub
        
        Private Function OnBeginUpdateLicense(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseModel As LicenseServices.LicenseModel = CType(inValues(0),LicenseServices.LicenseModel)
            Dim licenseStatus As String = CType(inValues(1),String)
            Return Me.BeginUpdateLicense(licenseModel, licenseStatus, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateLicense(ByVal result As System.IAsyncResult) As Object()
            Me.EndUpdateLicense(result)
            Return Nothing
        End Function
        
        Private Sub OnUpdateLicenseCompleted(ByVal state As Object)
            If (Not (Me.UpdateLicenseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateLicenseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateLicenseAsync(ByVal licenseModel As LicenseServices.LicenseModel, ByVal licenseStatus As String)
            Me.UpdateLicenseAsync(licenseModel, licenseStatus, Nothing)
        End Sub
        
        Public Overloads Sub UpdateLicenseAsync(ByVal licenseModel As LicenseServices.LicenseModel, ByVal licenseStatus As String, ByVal userState As Object)
            If (Me.onBeginUpdateLicenseDelegate Is Nothing) Then
                Me.onBeginUpdateLicenseDelegate = AddressOf Me.OnBeginUpdateLicense
            End If
            If (Me.onEndUpdateLicenseDelegate Is Nothing) Then
                Me.onEndUpdateLicenseDelegate = AddressOf Me.OnEndUpdateLicense
            End If
            If (Me.onUpdateLicenseCompletedDelegate Is Nothing) Then
                Me.onUpdateLicenseCompletedDelegate = AddressOf Me.OnUpdateLicenseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateLicenseDelegate, New Object() {licenseModel, licenseStatus}, Me.onEndUpdateLicenseDelegate, Me.onUpdateLicenseCompletedDelegate, userState)
        End Sub
        
        Public Sub DeleteByID(ByVal licenseID As Integer) Implements LicenseServices.ILicenseService.DeleteByID
            MyBase.Channel.DeleteByID(licenseID)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginDeleteByID(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginDeleteByID
            Return MyBase.Channel.BeginDeleteByID(licenseID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndDeleteByID(ByVal result As System.IAsyncResult) Implements LicenseServices.ILicenseService.EndDeleteByID
            MyBase.Channel.EndDeleteByID(result)
        End Sub
        
        Private Function OnBeginDeleteByID(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseID As Integer = CType(inValues(0),Integer)
            Return Me.BeginDeleteByID(licenseID, callback, asyncState)
        End Function
        
        Private Function OnEndDeleteByID(ByVal result As System.IAsyncResult) As Object()
            Me.EndDeleteByID(result)
            Return Nothing
        End Function
        
        Private Sub OnDeleteByIDCompleted(ByVal state As Object)
            If (Not (Me.DeleteByIDCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent DeleteByIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub DeleteByIDAsync(ByVal licenseID As Integer)
            Me.DeleteByIDAsync(licenseID, Nothing)
        End Sub
        
        Public Overloads Sub DeleteByIDAsync(ByVal licenseID As Integer, ByVal userState As Object)
            If (Me.onBeginDeleteByIDDelegate Is Nothing) Then
                Me.onBeginDeleteByIDDelegate = AddressOf Me.OnBeginDeleteByID
            End If
            If (Me.onEndDeleteByIDDelegate Is Nothing) Then
                Me.onEndDeleteByIDDelegate = AddressOf Me.OnEndDeleteByID
            End If
            If (Me.onDeleteByIDCompletedDelegate Is Nothing) Then
                Me.onDeleteByIDCompletedDelegate = AddressOf Me.OnDeleteByIDCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginDeleteByIDDelegate, New Object() {licenseID}, Me.onEndDeleteByIDDelegate, Me.onDeleteByIDCompletedDelegate, userState)
        End Sub
        
        Public Sub DeleteByHardwareKey(ByVal hardwareKey As String) Implements LicenseServices.ILicenseService.DeleteByHardwareKey
            MyBase.Channel.DeleteByHardwareKey(hardwareKey)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginDeleteByHardwareKey(ByVal hardwareKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginDeleteByHardwareKey
            Return MyBase.Channel.BeginDeleteByHardwareKey(hardwareKey, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Sub EndDeleteByHardwareKey(ByVal result As System.IAsyncResult) Implements LicenseServices.ILicenseService.EndDeleteByHardwareKey
            MyBase.Channel.EndDeleteByHardwareKey(result)
        End Sub
        
        Private Function OnBeginDeleteByHardwareKey(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim hardwareKey As String = CType(inValues(0),String)
            Return Me.BeginDeleteByHardwareKey(hardwareKey, callback, asyncState)
        End Function
        
        Private Function OnEndDeleteByHardwareKey(ByVal result As System.IAsyncResult) As Object()
            Me.EndDeleteByHardwareKey(result)
            Return Nothing
        End Function
        
        Private Sub OnDeleteByHardwareKeyCompleted(ByVal state As Object)
            If (Not (Me.DeleteByHardwareKeyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent DeleteByHardwareKeyCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub DeleteByHardwareKeyAsync(ByVal hardwareKey As String)
            Me.DeleteByHardwareKeyAsync(hardwareKey, Nothing)
        End Sub
        
        Public Overloads Sub DeleteByHardwareKeyAsync(ByVal hardwareKey As String, ByVal userState As Object)
            If (Me.onBeginDeleteByHardwareKeyDelegate Is Nothing) Then
                Me.onBeginDeleteByHardwareKeyDelegate = AddressOf Me.OnBeginDeleteByHardwareKey
            End If
            If (Me.onEndDeleteByHardwareKeyDelegate Is Nothing) Then
                Me.onEndDeleteByHardwareKeyDelegate = AddressOf Me.OnEndDeleteByHardwareKey
            End If
            If (Me.onDeleteByHardwareKeyCompletedDelegate Is Nothing) Then
                Me.onDeleteByHardwareKeyCompletedDelegate = AddressOf Me.OnDeleteByHardwareKeyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginDeleteByHardwareKeyDelegate, New Object() {hardwareKey}, Me.onEndDeleteByHardwareKeyDelegate, Me.onDeleteByHardwareKeyCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseList() As LicenseServices.LicenseModel() Implements LicenseServices.ILicenseService.GetLicenseList
            Return MyBase.Channel.GetLicenseList
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseList(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseList
            Return MyBase.Channel.BeginGetLicenseList(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseList(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel() Implements LicenseServices.ILicenseService.EndGetLicenseList
            Return MyBase.Channel.EndGetLicenseList(result)
        End Function
        
        Private Function OnBeginGetLicenseList(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginGetLicenseList(callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseList(ByVal result As System.IAsyncResult) As Object()
            Dim retVal() As LicenseServices.LicenseModel = Me.EndGetLicenseList(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseListCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseListCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseListCompleted(Me, New GetLicenseListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseListAsync()
            Me.GetLicenseListAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseListAsync(ByVal userState As Object)
            If (Me.onBeginGetLicenseListDelegate Is Nothing) Then
                Me.onBeginGetLicenseListDelegate = AddressOf Me.OnBeginGetLicenseList
            End If
            If (Me.onEndGetLicenseListDelegate Is Nothing) Then
                Me.onEndGetLicenseListDelegate = AddressOf Me.OnEndGetLicenseList
            End If
            If (Me.onGetLicenseListCompletedDelegate Is Nothing) Then
                Me.onGetLicenseListCompletedDelegate = AddressOf Me.OnGetLicenseListCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseListDelegate, Nothing, Me.onEndGetLicenseListDelegate, Me.onGetLicenseListCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseByClientID(ByVal clientID As Integer) As LicenseServices.LicenseModel() Implements LicenseServices.ILicenseService.GetLicenseByClientID
            Return MyBase.Channel.GetLicenseByClientID(clientID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseByClientID(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseByClientID
            Return MyBase.Channel.BeginGetLicenseByClientID(clientID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseByClientID(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel() Implements LicenseServices.ILicenseService.EndGetLicenseByClientID
            Return MyBase.Channel.EndGetLicenseByClientID(result)
        End Function
        
        Private Function OnBeginGetLicenseByClientID(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim clientID As Integer = CType(inValues(0),Integer)
            Return Me.BeginGetLicenseByClientID(clientID, callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseByClientID(ByVal result As System.IAsyncResult) As Object()
            Dim retVal() As LicenseServices.LicenseModel = Me.EndGetLicenseByClientID(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseByClientIDCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseByClientIDCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseByClientIDCompleted(Me, New GetLicenseByClientIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseByClientIDAsync(ByVal clientID As Integer)
            Me.GetLicenseByClientIDAsync(clientID, Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseByClientIDAsync(ByVal clientID As Integer, ByVal userState As Object)
            If (Me.onBeginGetLicenseByClientIDDelegate Is Nothing) Then
                Me.onBeginGetLicenseByClientIDDelegate = AddressOf Me.OnBeginGetLicenseByClientID
            End If
            If (Me.onEndGetLicenseByClientIDDelegate Is Nothing) Then
                Me.onEndGetLicenseByClientIDDelegate = AddressOf Me.OnEndGetLicenseByClientID
            End If
            If (Me.onGetLicenseByClientIDCompletedDelegate Is Nothing) Then
                Me.onGetLicenseByClientIDCompletedDelegate = AddressOf Me.OnGetLicenseByClientIDCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseByClientIDDelegate, New Object() {clientID}, Me.onEndGetLicenseByClientIDDelegate, Me.onGetLicenseByClientIDCompletedDelegate, userState)
        End Sub
        
        Public Function GetClientByID(ByVal clientID As Integer) As LicenseServices.ClientModel Implements LicenseServices.ILicenseService.GetClientByID
            Return MyBase.Channel.GetClientByID(clientID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetClientByID(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetClientByID
            Return MyBase.Channel.BeginGetClientByID(clientID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetClientByID(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel Implements LicenseServices.ILicenseService.EndGetClientByID
            Return MyBase.Channel.EndGetClientByID(result)
        End Function
        
        Private Function OnBeginGetClientByID(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim clientID As Integer = CType(inValues(0),Integer)
            Return Me.BeginGetClientByID(clientID, callback, asyncState)
        End Function
        
        Private Function OnEndGetClientByID(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.ClientModel = Me.EndGetClientByID(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetClientByIDCompleted(ByVal state As Object)
            If (Not (Me.GetClientByIDCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetClientByIDCompleted(Me, New GetClientByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetClientByIDAsync(ByVal clientID As Integer)
            Me.GetClientByIDAsync(clientID, Nothing)
        End Sub
        
        Public Overloads Sub GetClientByIDAsync(ByVal clientID As Integer, ByVal userState As Object)
            If (Me.onBeginGetClientByIDDelegate Is Nothing) Then
                Me.onBeginGetClientByIDDelegate = AddressOf Me.OnBeginGetClientByID
            End If
            If (Me.onEndGetClientByIDDelegate Is Nothing) Then
                Me.onEndGetClientByIDDelegate = AddressOf Me.OnEndGetClientByID
            End If
            If (Me.onGetClientByIDCompletedDelegate Is Nothing) Then
                Me.onGetClientByIDCompletedDelegate = AddressOf Me.OnGetClientByIDCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetClientByIDDelegate, New Object() {clientID}, Me.onEndGetClientByIDDelegate, Me.onGetClientByIDCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseByID(ByVal licenseID As Integer) As LicenseServices.LicenseModel Implements LicenseServices.ILicenseService.GetLicenseByID
            Return MyBase.Channel.GetLicenseByID(licenseID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseByID(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseByID
            Return MyBase.Channel.BeginGetLicenseByID(licenseID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseByID(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel Implements LicenseServices.ILicenseService.EndGetLicenseByID
            Return MyBase.Channel.EndGetLicenseByID(result)
        End Function
        
        Private Function OnBeginGetLicenseByID(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseID As Integer = CType(inValues(0),Integer)
            Return Me.BeginGetLicenseByID(licenseID, callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseByID(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.LicenseModel = Me.EndGetLicenseByID(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseByIDCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseByIDCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseByIDCompleted(Me, New GetLicenseByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseByIDAsync(ByVal licenseID As Integer)
            Me.GetLicenseByIDAsync(licenseID, Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseByIDAsync(ByVal licenseID As Integer, ByVal userState As Object)
            If (Me.onBeginGetLicenseByIDDelegate Is Nothing) Then
                Me.onBeginGetLicenseByIDDelegate = AddressOf Me.OnBeginGetLicenseByID
            End If
            If (Me.onEndGetLicenseByIDDelegate Is Nothing) Then
                Me.onEndGetLicenseByIDDelegate = AddressOf Me.OnEndGetLicenseByID
            End If
            If (Me.onGetLicenseByIDCompletedDelegate Is Nothing) Then
                Me.onGetLicenseByIDCompletedDelegate = AddressOf Me.OnGetLicenseByIDCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseByIDDelegate, New Object() {licenseID}, Me.onEndGetLicenseByIDDelegate, Me.onGetLicenseByIDCompletedDelegate, userState)
        End Sub
        
        Public Function GetClientList() As LicenseServices.ClientModel() Implements LicenseServices.ILicenseService.GetClientList
            Return MyBase.Channel.GetClientList
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetClientList(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetClientList
            Return MyBase.Channel.BeginGetClientList(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetClientList(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel() Implements LicenseServices.ILicenseService.EndGetClientList
            Return MyBase.Channel.EndGetClientList(result)
        End Function
        
        Private Function OnBeginGetClientList(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginGetClientList(callback, asyncState)
        End Function
        
        Private Function OnEndGetClientList(ByVal result As System.IAsyncResult) As Object()
            Dim retVal() As LicenseServices.ClientModel = Me.EndGetClientList(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetClientListCompleted(ByVal state As Object)
            If (Not (Me.GetClientListCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetClientListCompleted(Me, New GetClientListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetClientListAsync()
            Me.GetClientListAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetClientListAsync(ByVal userState As Object)
            If (Me.onBeginGetClientListDelegate Is Nothing) Then
                Me.onBeginGetClientListDelegate = AddressOf Me.OnBeginGetClientList
            End If
            If (Me.onEndGetClientListDelegate Is Nothing) Then
                Me.onEndGetClientListDelegate = AddressOf Me.OnEndGetClientList
            End If
            If (Me.onGetClientListCompletedDelegate Is Nothing) Then
                Me.onGetClientListCompletedDelegate = AddressOf Me.OnGetClientListCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetClientListDelegate, Nothing, Me.onEndGetClientListDelegate, Me.onGetClientListCompletedDelegate, userState)
        End Sub
        
        Public Function DeactivateLicense(ByVal licenseID As Integer) As Boolean Implements LicenseServices.ILicenseService.DeactivateLicense
            Return MyBase.Channel.DeactivateLicense(licenseID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginDeactivateLicense(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginDeactivateLicense
            Return MyBase.Channel.BeginDeactivateLicense(licenseID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndDeactivateLicense(ByVal result As System.IAsyncResult) As Boolean Implements LicenseServices.ILicenseService.EndDeactivateLicense
            Return MyBase.Channel.EndDeactivateLicense(result)
        End Function
        
        Private Function OnBeginDeactivateLicense(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseID As Integer = CType(inValues(0),Integer)
            Return Me.BeginDeactivateLicense(licenseID, callback, asyncState)
        End Function
        
        Private Function OnEndDeactivateLicense(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = Me.EndDeactivateLicense(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnDeactivateLicenseCompleted(ByVal state As Object)
            If (Not (Me.DeactivateLicenseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent DeactivateLicenseCompleted(Me, New DeactivateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub DeactivateLicenseAsync(ByVal licenseID As Integer)
            Me.DeactivateLicenseAsync(licenseID, Nothing)
        End Sub
        
        Public Overloads Sub DeactivateLicenseAsync(ByVal licenseID As Integer, ByVal userState As Object)
            If (Me.onBeginDeactivateLicenseDelegate Is Nothing) Then
                Me.onBeginDeactivateLicenseDelegate = AddressOf Me.OnBeginDeactivateLicense
            End If
            If (Me.onEndDeactivateLicenseDelegate Is Nothing) Then
                Me.onEndDeactivateLicenseDelegate = AddressOf Me.OnEndDeactivateLicense
            End If
            If (Me.onDeactivateLicenseCompletedDelegate Is Nothing) Then
                Me.onDeactivateLicenseCompletedDelegate = AddressOf Me.OnDeactivateLicenseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginDeactivateLicenseDelegate, New Object() {licenseID}, Me.onEndDeactivateLicenseDelegate, Me.onDeactivateLicenseCompletedDelegate, userState)
        End Sub
        
        Public Function ActivateLicense(ByVal licenseID As Integer) As Boolean Implements LicenseServices.ILicenseService.ActivateLicense
            Return MyBase.Channel.ActivateLicense(licenseID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginActivateLicense(ByVal licenseID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginActivateLicense
            Return MyBase.Channel.BeginActivateLicense(licenseID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndActivateLicense(ByVal result As System.IAsyncResult) As Boolean Implements LicenseServices.ILicenseService.EndActivateLicense
            Return MyBase.Channel.EndActivateLicense(result)
        End Function
        
        Private Function OnBeginActivateLicense(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseID As Integer = CType(inValues(0),Integer)
            Return Me.BeginActivateLicense(licenseID, callback, asyncState)
        End Function
        
        Private Function OnEndActivateLicense(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = Me.EndActivateLicense(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnActivateLicenseCompleted(ByVal state As Object)
            If (Not (Me.ActivateLicenseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent ActivateLicenseCompleted(Me, New ActivateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub ActivateLicenseAsync(ByVal licenseID As Integer)
            Me.ActivateLicenseAsync(licenseID, Nothing)
        End Sub
        
        Public Overloads Sub ActivateLicenseAsync(ByVal licenseID As Integer, ByVal userState As Object)
            If (Me.onBeginActivateLicenseDelegate Is Nothing) Then
                Me.onBeginActivateLicenseDelegate = AddressOf Me.OnBeginActivateLicense
            End If
            If (Me.onEndActivateLicenseDelegate Is Nothing) Then
                Me.onEndActivateLicenseDelegate = AddressOf Me.OnEndActivateLicense
            End If
            If (Me.onActivateLicenseCompletedDelegate Is Nothing) Then
                Me.onActivateLicenseCompletedDelegate = AddressOf Me.OnActivateLicenseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginActivateLicenseDelegate, New Object() {licenseID}, Me.onEndActivateLicenseDelegate, Me.onActivateLicenseCompletedDelegate, userState)
        End Sub
        
        Public Function AllocateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel) As LicenseServices.LicenseModel Implements LicenseServices.ILicenseService.AllocateLicense
            Return MyBase.Channel.AllocateLicense(licenseModel, versionModel)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginAllocateLicense(ByVal licenseModel As LicenseServices.LicenseModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginAllocateLicense
            Return MyBase.Channel.BeginAllocateLicense(licenseModel, versionModel, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndAllocateLicense(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel Implements LicenseServices.ILicenseService.EndAllocateLicense
            Return MyBase.Channel.EndAllocateLicense(result)
        End Function
        
        Private Function OnBeginAllocateLicense(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseModel As LicenseServices.LicenseModel = CType(inValues(0),LicenseServices.LicenseModel)
            Dim versionModel As LicenseServices.AutoUpdateVersionInfoModel = CType(inValues(1),LicenseServices.AutoUpdateVersionInfoModel)
            Return Me.BeginAllocateLicense(licenseModel, versionModel, callback, asyncState)
        End Function
        
        Private Function OnEndAllocateLicense(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.LicenseModel = Me.EndAllocateLicense(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnAllocateLicenseCompleted(ByVal state As Object)
            If (Not (Me.AllocateLicenseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent AllocateLicenseCompleted(Me, New AllocateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub AllocateLicenseAsync(ByVal licenseModel As LicenseServices.LicenseModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel)
            Me.AllocateLicenseAsync(licenseModel, versionModel, Nothing)
        End Sub
        
        Public Overloads Sub AllocateLicenseAsync(ByVal licenseModel As LicenseServices.LicenseModel, ByVal versionModel As LicenseServices.AutoUpdateVersionInfoModel, ByVal userState As Object)
            If (Me.onBeginAllocateLicenseDelegate Is Nothing) Then
                Me.onBeginAllocateLicenseDelegate = AddressOf Me.OnBeginAllocateLicense
            End If
            If (Me.onEndAllocateLicenseDelegate Is Nothing) Then
                Me.onEndAllocateLicenseDelegate = AddressOf Me.OnEndAllocateLicense
            End If
            If (Me.onAllocateLicenseCompletedDelegate Is Nothing) Then
                Me.onAllocateLicenseCompletedDelegate = AddressOf Me.OnAllocateLicenseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginAllocateLicenseDelegate, New Object() {licenseModel, versionModel}, Me.onEndAllocateLicenseDelegate, Me.onAllocateLicenseCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseByLicenseKey(ByVal licenseKey As String) As Boolean Implements LicenseServices.ILicenseService.GetLicenseByLicenseKey
            Return MyBase.Channel.GetLicenseByLicenseKey(licenseKey)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseByLicenseKey(ByVal licenseKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseByLicenseKey
            Return MyBase.Channel.BeginGetLicenseByLicenseKey(licenseKey, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseByLicenseKey(ByVal result As System.IAsyncResult) As Boolean Implements LicenseServices.ILicenseService.EndGetLicenseByLicenseKey
            Return MyBase.Channel.EndGetLicenseByLicenseKey(result)
        End Function
        
        Private Function OnBeginGetLicenseByLicenseKey(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseKey As String = CType(inValues(0),String)
            Return Me.BeginGetLicenseByLicenseKey(licenseKey, callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseByLicenseKey(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = Me.EndGetLicenseByLicenseKey(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseByLicenseKeyCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseByLicenseKeyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseByLicenseKeyCompleted(Me, New GetLicenseByLicenseKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseByLicenseKeyAsync(ByVal licenseKey As String)
            Me.GetLicenseByLicenseKeyAsync(licenseKey, Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseByLicenseKeyAsync(ByVal licenseKey As String, ByVal userState As Object)
            If (Me.onBeginGetLicenseByLicenseKeyDelegate Is Nothing) Then
                Me.onBeginGetLicenseByLicenseKeyDelegate = AddressOf Me.OnBeginGetLicenseByLicenseKey
            End If
            If (Me.onEndGetLicenseByLicenseKeyDelegate Is Nothing) Then
                Me.onEndGetLicenseByLicenseKeyDelegate = AddressOf Me.OnEndGetLicenseByLicenseKey
            End If
            If (Me.onGetLicenseByLicenseKeyCompletedDelegate Is Nothing) Then
                Me.onGetLicenseByLicenseKeyCompletedDelegate = AddressOf Me.OnGetLicenseByLicenseKeyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseByLicenseKeyDelegate, New Object() {licenseKey}, Me.onEndGetLicenseByLicenseKeyDelegate, Me.onGetLicenseByLicenseKeyCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseByHardwareKey(ByVal hardwareKey As String, ByVal prodType As String, ByVal clientid As Integer, ByVal sitecode As String) As Boolean Implements LicenseServices.ILicenseService.GetLicenseByHardwareKey
            Return MyBase.Channel.GetLicenseByHardwareKey(hardwareKey, prodType, clientid, sitecode)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseByHardwareKey(ByVal hardwareKey As String, ByVal prodType As String, ByVal clientid As Integer, ByVal sitecode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseByHardwareKey
            Return MyBase.Channel.BeginGetLicenseByHardwareKey(hardwareKey, prodType, clientid, sitecode, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseByHardwareKey(ByVal result As System.IAsyncResult) As Boolean Implements LicenseServices.ILicenseService.EndGetLicenseByHardwareKey
            Return MyBase.Channel.EndGetLicenseByHardwareKey(result)
        End Function
        
        Private Function OnBeginGetLicenseByHardwareKey(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim hardwareKey As String = CType(inValues(0),String)
            Dim prodType As String = CType(inValues(1),String)
            Dim clientid As Integer = CType(inValues(2),Integer)
            Dim sitecode As String = CType(inValues(3),String)
            Return Me.BeginGetLicenseByHardwareKey(hardwareKey, prodType, clientid, sitecode, callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseByHardwareKey(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = Me.EndGetLicenseByHardwareKey(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseByHardwareKeyCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseByHardwareKeyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseByHardwareKeyCompleted(Me, New GetLicenseByHardwareKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseByHardwareKeyAsync(ByVal hardwareKey As String, ByVal prodType As String, ByVal clientid As Integer, ByVal sitecode As String)
            Me.GetLicenseByHardwareKeyAsync(hardwareKey, prodType, clientid, sitecode, Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseByHardwareKeyAsync(ByVal hardwareKey As String, ByVal prodType As String, ByVal clientid As Integer, ByVal sitecode As String, ByVal userState As Object)
            If (Me.onBeginGetLicenseByHardwareKeyDelegate Is Nothing) Then
                Me.onBeginGetLicenseByHardwareKeyDelegate = AddressOf Me.OnBeginGetLicenseByHardwareKey
            End If
            If (Me.onEndGetLicenseByHardwareKeyDelegate Is Nothing) Then
                Me.onEndGetLicenseByHardwareKeyDelegate = AddressOf Me.OnEndGetLicenseByHardwareKey
            End If
            If (Me.onGetLicenseByHardwareKeyCompletedDelegate Is Nothing) Then
                Me.onGetLicenseByHardwareKeyCompletedDelegate = AddressOf Me.OnGetLicenseByHardwareKeyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseByHardwareKeyDelegate, New Object() {hardwareKey, prodType, clientid, sitecode}, Me.onEndGetLicenseByHardwareKeyDelegate, Me.onGetLicenseByHardwareKeyCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseReconciliationData() As LicenseServices.ReconciliationModel() Implements LicenseServices.ILicenseService.GetLicenseReconciliationData
            Return MyBase.Channel.GetLicenseReconciliationData
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseReconciliationData(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseReconciliationData
            Return MyBase.Channel.BeginGetLicenseReconciliationData(callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseReconciliationData(ByVal result As System.IAsyncResult) As LicenseServices.ReconciliationModel() Implements LicenseServices.ILicenseService.EndGetLicenseReconciliationData
            Return MyBase.Channel.EndGetLicenseReconciliationData(result)
        End Function
        
        Private Function OnBeginGetLicenseReconciliationData(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginGetLicenseReconciliationData(callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseReconciliationData(ByVal result As System.IAsyncResult) As Object()
            Dim retVal() As LicenseServices.ReconciliationModel = Me.EndGetLicenseReconciliationData(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseReconciliationDataCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseReconciliationDataCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseReconciliationDataCompleted(Me, New GetLicenseReconciliationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseReconciliationDataAsync()
            Me.GetLicenseReconciliationDataAsync(Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseReconciliationDataAsync(ByVal userState As Object)
            If (Me.onBeginGetLicenseReconciliationDataDelegate Is Nothing) Then
                Me.onBeginGetLicenseReconciliationDataDelegate = AddressOf Me.OnBeginGetLicenseReconciliationData
            End If
            If (Me.onEndGetLicenseReconciliationDataDelegate Is Nothing) Then
                Me.onEndGetLicenseReconciliationDataDelegate = AddressOf Me.OnEndGetLicenseReconciliationData
            End If
            If (Me.onGetLicenseReconciliationDataCompletedDelegate Is Nothing) Then
                Me.onGetLicenseReconciliationDataCompletedDelegate = AddressOf Me.OnGetLicenseReconciliationDataCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseReconciliationDataDelegate, Nothing, Me.onEndGetLicenseReconciliationDataDelegate, Me.onGetLicenseReconciliationDataCompletedDelegate, userState)
        End Sub
        
        Public Function GetReconciliationDetailsByClientID(ByVal clientID As Integer) As LicenseServices.ClientModel Implements LicenseServices.ILicenseService.GetReconciliationDetailsByClientID
            Return MyBase.Channel.GetReconciliationDetailsByClientID(clientID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetReconciliationDetailsByClientID(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetReconciliationDetailsByClientID
            Return MyBase.Channel.BeginGetReconciliationDetailsByClientID(clientID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetReconciliationDetailsByClientID(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel Implements LicenseServices.ILicenseService.EndGetReconciliationDetailsByClientID
            Return MyBase.Channel.EndGetReconciliationDetailsByClientID(result)
        End Function
        
        Private Function OnBeginGetReconciliationDetailsByClientID(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim clientID As Integer = CType(inValues(0),Integer)
            Return Me.BeginGetReconciliationDetailsByClientID(clientID, callback, asyncState)
        End Function
        
        Private Function OnEndGetReconciliationDetailsByClientID(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.ClientModel = Me.EndGetReconciliationDetailsByClientID(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetReconciliationDetailsByClientIDCompleted(ByVal state As Object)
            If (Not (Me.GetReconciliationDetailsByClientIDCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetReconciliationDetailsByClientIDCompleted(Me, New GetReconciliationDetailsByClientIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetReconciliationDetailsByClientIDAsync(ByVal clientID As Integer)
            Me.GetReconciliationDetailsByClientIDAsync(clientID, Nothing)
        End Sub
        
        Public Overloads Sub GetReconciliationDetailsByClientIDAsync(ByVal clientID As Integer, ByVal userState As Object)
            If (Me.onBeginGetReconciliationDetailsByClientIDDelegate Is Nothing) Then
                Me.onBeginGetReconciliationDetailsByClientIDDelegate = AddressOf Me.OnBeginGetReconciliationDetailsByClientID
            End If
            If (Me.onEndGetReconciliationDetailsByClientIDDelegate Is Nothing) Then
                Me.onEndGetReconciliationDetailsByClientIDDelegate = AddressOf Me.OnEndGetReconciliationDetailsByClientID
            End If
            If (Me.onGetReconciliationDetailsByClientIDCompletedDelegate Is Nothing) Then
                Me.onGetReconciliationDetailsByClientIDCompletedDelegate = AddressOf Me.OnGetReconciliationDetailsByClientIDCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetReconciliationDetailsByClientIDDelegate, New Object() {clientID}, Me.onEndGetReconciliationDetailsByClientIDDelegate, Me.onGetReconciliationDetailsByClientIDCompletedDelegate, userState)
        End Sub
        
        Public Function ClientLicenseDetailsByMasterKey(ByVal masterKey As String) As LicenseServices.ClientModel Implements LicenseServices.ILicenseService.ClientLicenseDetailsByMasterKey
            Return MyBase.Channel.ClientLicenseDetailsByMasterKey(masterKey)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginClientLicenseDetailsByMasterKey(ByVal masterKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginClientLicenseDetailsByMasterKey
            Return MyBase.Channel.BeginClientLicenseDetailsByMasterKey(masterKey, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndClientLicenseDetailsByMasterKey(ByVal result As System.IAsyncResult) As LicenseServices.ClientModel Implements LicenseServices.ILicenseService.EndClientLicenseDetailsByMasterKey
            Return MyBase.Channel.EndClientLicenseDetailsByMasterKey(result)
        End Function
        
        Private Function OnBeginClientLicenseDetailsByMasterKey(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim masterKey As String = CType(inValues(0),String)
            Return Me.BeginClientLicenseDetailsByMasterKey(masterKey, callback, asyncState)
        End Function
        
        Private Function OnEndClientLicenseDetailsByMasterKey(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.ClientModel = Me.EndClientLicenseDetailsByMasterKey(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnClientLicenseDetailsByMasterKeyCompleted(ByVal state As Object)
            If (Not (Me.ClientLicenseDetailsByMasterKeyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent ClientLicenseDetailsByMasterKeyCompleted(Me, New ClientLicenseDetailsByMasterKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub ClientLicenseDetailsByMasterKeyAsync(ByVal masterKey As String)
            Me.ClientLicenseDetailsByMasterKeyAsync(masterKey, Nothing)
        End Sub
        
        Public Overloads Sub ClientLicenseDetailsByMasterKeyAsync(ByVal masterKey As String, ByVal userState As Object)
            If (Me.onBeginClientLicenseDetailsByMasterKeyDelegate Is Nothing) Then
                Me.onBeginClientLicenseDetailsByMasterKeyDelegate = AddressOf Me.OnBeginClientLicenseDetailsByMasterKey
            End If
            If (Me.onEndClientLicenseDetailsByMasterKeyDelegate Is Nothing) Then
                Me.onEndClientLicenseDetailsByMasterKeyDelegate = AddressOf Me.OnEndClientLicenseDetailsByMasterKey
            End If
            If (Me.onClientLicenseDetailsByMasterKeyCompletedDelegate Is Nothing) Then
                Me.onClientLicenseDetailsByMasterKeyCompletedDelegate = AddressOf Me.OnClientLicenseDetailsByMasterKeyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginClientLicenseDetailsByMasterKeyDelegate, New Object() {masterKey}, Me.onEndClientLicenseDetailsByMasterKeyDelegate, Me.onClientLicenseDetailsByMasterKeyCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseByClientIDModel(ByVal clientID As Integer) As LicenseServices.LicenseModel() Implements LicenseServices.ILicenseService.GetLicenseByClientIDModel
            Return MyBase.Channel.GetLicenseByClientIDModel(clientID)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseByClientIDModel(ByVal clientID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseByClientIDModel
            Return MyBase.Channel.BeginGetLicenseByClientIDModel(clientID, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseByClientIDModel(ByVal result As System.IAsyncResult) As LicenseServices.LicenseModel() Implements LicenseServices.ILicenseService.EndGetLicenseByClientIDModel
            Return MyBase.Channel.EndGetLicenseByClientIDModel(result)
        End Function
        
        Private Function OnBeginGetLicenseByClientIDModel(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim clientID As Integer = CType(inValues(0),Integer)
            Return Me.BeginGetLicenseByClientIDModel(clientID, callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseByClientIDModel(ByVal result As System.IAsyncResult) As Object()
            Dim retVal() As LicenseServices.LicenseModel = Me.EndGetLicenseByClientIDModel(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseByClientIDModelCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseByClientIDModelCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseByClientIDModelCompleted(Me, New GetLicenseByClientIDModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseByClientIDModelAsync(ByVal clientID As Integer)
            Me.GetLicenseByClientIDModelAsync(clientID, Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseByClientIDModelAsync(ByVal clientID As Integer, ByVal userState As Object)
            If (Me.onBeginGetLicenseByClientIDModelDelegate Is Nothing) Then
                Me.onBeginGetLicenseByClientIDModelDelegate = AddressOf Me.OnBeginGetLicenseByClientIDModel
            End If
            If (Me.onEndGetLicenseByClientIDModelDelegate Is Nothing) Then
                Me.onEndGetLicenseByClientIDModelDelegate = AddressOf Me.OnEndGetLicenseByClientIDModel
            End If
            If (Me.onGetLicenseByClientIDModelCompletedDelegate Is Nothing) Then
                Me.onGetLicenseByClientIDModelCompletedDelegate = AddressOf Me.OnGetLicenseByClientIDModelCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseByClientIDModelDelegate, New Object() {clientID}, Me.onEndGetLicenseByClientIDModelDelegate, Me.onGetLicenseByClientIDModelCompletedDelegate, userState)
        End Sub
        
        Public Function UpdateLicenseBackDated(ByVal mstLicense As LicenseServices.LicenseModel) As Boolean Implements LicenseServices.ILicenseService.UpdateLicenseBackDated
            Return MyBase.Channel.UpdateLicenseBackDated(mstLicense)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUpdateLicenseBackDated(ByVal mstLicense As LicenseServices.LicenseModel, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginUpdateLicenseBackDated
            Return MyBase.Channel.BeginUpdateLicenseBackDated(mstLicense, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUpdateLicenseBackDated(ByVal result As System.IAsyncResult) As Boolean Implements LicenseServices.ILicenseService.EndUpdateLicenseBackDated
            Return MyBase.Channel.EndUpdateLicenseBackDated(result)
        End Function
        
        Private Function OnBeginUpdateLicenseBackDated(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim mstLicense As LicenseServices.LicenseModel = CType(inValues(0),LicenseServices.LicenseModel)
            Return Me.BeginUpdateLicenseBackDated(mstLicense, callback, asyncState)
        End Function
        
        Private Function OnEndUpdateLicenseBackDated(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = Me.EndUpdateLicenseBackDated(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUpdateLicenseBackDatedCompleted(ByVal state As Object)
            If (Not (Me.UpdateLicenseBackDatedCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UpdateLicenseBackDatedCompleted(Me, New UpdateLicenseBackDatedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UpdateLicenseBackDatedAsync(ByVal mstLicense As LicenseServices.LicenseModel)
            Me.UpdateLicenseBackDatedAsync(mstLicense, Nothing)
        End Sub
        
        Public Overloads Sub UpdateLicenseBackDatedAsync(ByVal mstLicense As LicenseServices.LicenseModel, ByVal userState As Object)
            If (Me.onBeginUpdateLicenseBackDatedDelegate Is Nothing) Then
                Me.onBeginUpdateLicenseBackDatedDelegate = AddressOf Me.OnBeginUpdateLicenseBackDated
            End If
            If (Me.onEndUpdateLicenseBackDatedDelegate Is Nothing) Then
                Me.onEndUpdateLicenseBackDatedDelegate = AddressOf Me.OnEndUpdateLicenseBackDated
            End If
            If (Me.onUpdateLicenseBackDatedCompletedDelegate Is Nothing) Then
                Me.onUpdateLicenseBackDatedCompletedDelegate = AddressOf Me.OnUpdateLicenseBackDatedCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUpdateLicenseBackDatedDelegate, New Object() {mstLicense}, Me.onEndUpdateLicenseBackDatedDelegate, Me.onUpdateLicenseBackDatedCompletedDelegate, userState)
        End Sub
        
        Public Function GetIssueDateByLicenseKey(ByVal licenseKey As String) As Date Implements LicenseServices.ILicenseService.GetIssueDateByLicenseKey
            Return MyBase.Channel.GetIssueDateByLicenseKey(licenseKey)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetIssueDateByLicenseKey(ByVal licenseKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetIssueDateByLicenseKey
            Return MyBase.Channel.BeginGetIssueDateByLicenseKey(licenseKey, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetIssueDateByLicenseKey(ByVal result As System.IAsyncResult) As Date Implements LicenseServices.ILicenseService.EndGetIssueDateByLicenseKey
            Return MyBase.Channel.EndGetIssueDateByLicenseKey(result)
        End Function
        
        Private Function OnBeginGetIssueDateByLicenseKey(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim licenseKey As String = CType(inValues(0),String)
            Return Me.BeginGetIssueDateByLicenseKey(licenseKey, callback, asyncState)
        End Function
        
        Private Function OnEndGetIssueDateByLicenseKey(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Date = Me.EndGetIssueDateByLicenseKey(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetIssueDateByLicenseKeyCompleted(ByVal state As Object)
            If (Not (Me.GetIssueDateByLicenseKeyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetIssueDateByLicenseKeyCompleted(Me, New GetIssueDateByLicenseKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetIssueDateByLicenseKeyAsync(ByVal licenseKey As String)
            Me.GetIssueDateByLicenseKeyAsync(licenseKey, Nothing)
        End Sub
        
        Public Overloads Sub GetIssueDateByLicenseKeyAsync(ByVal licenseKey As String, ByVal userState As Object)
            If (Me.onBeginGetIssueDateByLicenseKeyDelegate Is Nothing) Then
                Me.onBeginGetIssueDateByLicenseKeyDelegate = AddressOf Me.OnBeginGetIssueDateByLicenseKey
            End If
            If (Me.onEndGetIssueDateByLicenseKeyDelegate Is Nothing) Then
                Me.onEndGetIssueDateByLicenseKeyDelegate = AddressOf Me.OnEndGetIssueDateByLicenseKey
            End If
            If (Me.onGetIssueDateByLicenseKeyCompletedDelegate Is Nothing) Then
                Me.onGetIssueDateByLicenseKeyCompletedDelegate = AddressOf Me.OnGetIssueDateByLicenseKeyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetIssueDateByLicenseKeyDelegate, New Object() {licenseKey}, Me.onEndGetIssueDateByLicenseKeyDelegate, Me.onGetIssueDateByLicenseKeyCompletedDelegate, userState)
        End Sub
        
        Public Function GetLicenseByHardwareKeys(ByVal hardwareKey As String, ByVal siteCode As String) As Boolean Implements LicenseServices.ILicenseService.GetLicenseByHardwareKeys
            Return MyBase.Channel.GetLicenseByHardwareKeys(hardwareKey, siteCode)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetLicenseByHardwareKeys(ByVal hardwareKey As String, ByVal siteCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetLicenseByHardwareKeys
            Return MyBase.Channel.BeginGetLicenseByHardwareKeys(hardwareKey, siteCode, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetLicenseByHardwareKeys(ByVal result As System.IAsyncResult) As Boolean Implements LicenseServices.ILicenseService.EndGetLicenseByHardwareKeys
            Return MyBase.Channel.EndGetLicenseByHardwareKeys(result)
        End Function
        
        Private Function OnBeginGetLicenseByHardwareKeys(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim hardwareKey As String = CType(inValues(0),String)
            Dim siteCode As String = CType(inValues(1),String)
            Return Me.BeginGetLicenseByHardwareKeys(hardwareKey, siteCode, callback, asyncState)
        End Function
        
        Private Function OnEndGetLicenseByHardwareKeys(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As Boolean = Me.EndGetLicenseByHardwareKeys(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetLicenseByHardwareKeysCompleted(ByVal state As Object)
            If (Not (Me.GetLicenseByHardwareKeysCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetLicenseByHardwareKeysCompleted(Me, New GetLicenseByHardwareKeysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetLicenseByHardwareKeysAsync(ByVal hardwareKey As String, ByVal siteCode As String)
            Me.GetLicenseByHardwareKeysAsync(hardwareKey, siteCode, Nothing)
        End Sub
        
        Public Overloads Sub GetLicenseByHardwareKeysAsync(ByVal hardwareKey As String, ByVal siteCode As String, ByVal userState As Object)
            If (Me.onBeginGetLicenseByHardwareKeysDelegate Is Nothing) Then
                Me.onBeginGetLicenseByHardwareKeysDelegate = AddressOf Me.OnBeginGetLicenseByHardwareKeys
            End If
            If (Me.onEndGetLicenseByHardwareKeysDelegate Is Nothing) Then
                Me.onEndGetLicenseByHardwareKeysDelegate = AddressOf Me.OnEndGetLicenseByHardwareKeys
            End If
            If (Me.onGetLicenseByHardwareKeysCompletedDelegate Is Nothing) Then
                Me.onGetLicenseByHardwareKeysCompletedDelegate = AddressOf Me.OnGetLicenseByHardwareKeysCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetLicenseByHardwareKeysDelegate, New Object() {hardwareKey, siteCode}, Me.onEndGetLicenseByHardwareKeysDelegate, Me.onGetLicenseByHardwareKeysCompletedDelegate, userState)
        End Sub
        
        Public Function GetIssueDateByHardwareKey(ByVal hardwareKey As String, ByVal siteCode As String) As LicenseServices.LicenseBackDatedModel Implements LicenseServices.ILicenseService.GetIssueDateByHardwareKey
            Return MyBase.Channel.GetIssueDateByHardwareKey(hardwareKey, siteCode)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetIssueDateByHardwareKey(ByVal hardwareKey As String, ByVal siteCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetIssueDateByHardwareKey
            Return MyBase.Channel.BeginGetIssueDateByHardwareKey(hardwareKey, siteCode, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetIssueDateByHardwareKey(ByVal result As System.IAsyncResult) As LicenseServices.LicenseBackDatedModel Implements LicenseServices.ILicenseService.EndGetIssueDateByHardwareKey
            Return MyBase.Channel.EndGetIssueDateByHardwareKey(result)
        End Function
        
        Private Function OnBeginGetIssueDateByHardwareKey(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim hardwareKey As String = CType(inValues(0),String)
            Dim siteCode As String = CType(inValues(1),String)
            Return Me.BeginGetIssueDateByHardwareKey(hardwareKey, siteCode, callback, asyncState)
        End Function
        
        Private Function OnEndGetIssueDateByHardwareKey(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.LicenseBackDatedModel = Me.EndGetIssueDateByHardwareKey(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetIssueDateByHardwareKeyCompleted(ByVal state As Object)
            If (Not (Me.GetIssueDateByHardwareKeyCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetIssueDateByHardwareKeyCompleted(Me, New GetIssueDateByHardwareKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetIssueDateByHardwareKeyAsync(ByVal hardwareKey As String, ByVal siteCode As String)
            Me.GetIssueDateByHardwareKeyAsync(hardwareKey, siteCode, Nothing)
        End Sub
        
        Public Overloads Sub GetIssueDateByHardwareKeyAsync(ByVal hardwareKey As String, ByVal siteCode As String, ByVal userState As Object)
            If (Me.onBeginGetIssueDateByHardwareKeyDelegate Is Nothing) Then
                Me.onBeginGetIssueDateByHardwareKeyDelegate = AddressOf Me.OnBeginGetIssueDateByHardwareKey
            End If
            If (Me.onEndGetIssueDateByHardwareKeyDelegate Is Nothing) Then
                Me.onEndGetIssueDateByHardwareKeyDelegate = AddressOf Me.OnEndGetIssueDateByHardwareKey
            End If
            If (Me.onGetIssueDateByHardwareKeyCompletedDelegate Is Nothing) Then
                Me.onGetIssueDateByHardwareKeyCompletedDelegate = AddressOf Me.OnGetIssueDateByHardwareKeyCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetIssueDateByHardwareKeyDelegate, New Object() {hardwareKey, siteCode}, Me.onEndGetIssueDateByHardwareKeyDelegate, Me.onGetIssueDateByHardwareKeyCompletedDelegate, userState)
        End Sub
        
        Public Function GetIssueDateByHardwareKeyNew(ByVal hardwareKey As String, ByVal siteCode As String, ByVal terminalId As String) As LicenseServices.LicenseBackDatedModel Implements LicenseServices.ILicenseService.GetIssueDateByHardwareKeyNew
            Return MyBase.Channel.GetIssueDateByHardwareKeyNew(hardwareKey, siteCode, terminalId)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginGetIssueDateByHardwareKeyNew(ByVal hardwareKey As String, ByVal siteCode As String, ByVal terminalId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements LicenseServices.ILicenseService.BeginGetIssueDateByHardwareKeyNew
            Return MyBase.Channel.BeginGetIssueDateByHardwareKeyNew(hardwareKey, siteCode, terminalId, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndGetIssueDateByHardwareKeyNew(ByVal result As System.IAsyncResult) As LicenseServices.LicenseBackDatedModel Implements LicenseServices.ILicenseService.EndGetIssueDateByHardwareKeyNew
            Return MyBase.Channel.EndGetIssueDateByHardwareKeyNew(result)
        End Function
        
        Private Function OnBeginGetIssueDateByHardwareKeyNew(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim hardwareKey As String = CType(inValues(0),String)
            Dim siteCode As String = CType(inValues(1),String)
            Dim terminalId As String = CType(inValues(2),String)
            Return Me.BeginGetIssueDateByHardwareKeyNew(hardwareKey, siteCode, terminalId, callback, asyncState)
        End Function
        
        Private Function OnEndGetIssueDateByHardwareKeyNew(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As LicenseServices.LicenseBackDatedModel = Me.EndGetIssueDateByHardwareKeyNew(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnGetIssueDateByHardwareKeyNewCompleted(ByVal state As Object)
            If (Not (Me.GetIssueDateByHardwareKeyNewCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent GetIssueDateByHardwareKeyNewCompleted(Me, New GetIssueDateByHardwareKeyNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub GetIssueDateByHardwareKeyNewAsync(ByVal hardwareKey As String, ByVal siteCode As String, ByVal terminalId As String)
            Me.GetIssueDateByHardwareKeyNewAsync(hardwareKey, siteCode, terminalId, Nothing)
        End Sub
        
        Public Overloads Sub GetIssueDateByHardwareKeyNewAsync(ByVal hardwareKey As String, ByVal siteCode As String, ByVal terminalId As String, ByVal userState As Object)
            If (Me.onBeginGetIssueDateByHardwareKeyNewDelegate Is Nothing) Then
                Me.onBeginGetIssueDateByHardwareKeyNewDelegate = AddressOf Me.OnBeginGetIssueDateByHardwareKeyNew
            End If
            If (Me.onEndGetIssueDateByHardwareKeyNewDelegate Is Nothing) Then
                Me.onEndGetIssueDateByHardwareKeyNewDelegate = AddressOf Me.OnEndGetIssueDateByHardwareKeyNew
            End If
            If (Me.onGetIssueDateByHardwareKeyNewCompletedDelegate Is Nothing) Then
                Me.onGetIssueDateByHardwareKeyNewCompletedDelegate = AddressOf Me.OnGetIssueDateByHardwareKeyNewCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginGetIssueDateByHardwareKeyNewDelegate, New Object() {hardwareKey, siteCode, terminalId}, Me.onEndGetIssueDateByHardwareKeyNewDelegate, Me.onGetIssueDateByHardwareKeyNewCompletedDelegate, userState)
        End Sub
    End Class
End Namespace
